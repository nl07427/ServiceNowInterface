<?xml version="1.0" encoding="utf-8"?>
<PowershellConnectorDefinition Id="ServiceNow" Version="1.0" Description="Powershell connector for ServiceNow">
  <PluginAssemblies>
    <!--<Assembly Path=""/>-->
  </PluginAssemblies>

  <ConnectionParameters>
    <ConnectionParameter Name="Domain" Description="Domain name of the ServiceNow instance" />
    <ConnectionParameter Name="ClientId" Description="ClientId of the OAuth client." />
    <ConnectionParameter Name="ClientSecret" Description="Client secret of the OAuth client" IsSensibleData="true" />
    <ConnectionParameter Name="UserName" Description="Snow integration username" />
    <ConnectionParameter Name="UserPassword" Description="Snow integration user password" IsSensibleData="true" />
    <ConnectionParameter Name="LibraryPath" Description="Absolute path to the ServiceNow.Graph.dll Windows library" />
    <ConnectionParameter Name="PageSize" Description="The maximum number of results returned per page (default: 1000)" />
    <ConnectionParameter Name="task_filter" Description="Query filter to use for filtering task table" />
    <ConnectionParameter Name="sc_task_filter" Description="Query filter to use for filtering sc_task table" />
    <ConnectionParameter Name="sys_user_filter" Description="Query filter to use for filtering sys_user table" />
    <ConnectionParameter Name="sys_user_group_filter"
                         Description="Query filter to use for filtering sys_user_group table" />
    <ConnectionParameter Name="sys_user_grmember_filter"
                         Description="Query filter to use for filtering sys_user_grmember table" />
    <ConnectionParameter Name="cmn_department_filter"
                         Description="Query filter to use for filtering cmn_department table" />
    <ConnectionParameter Name="cmn_location_filter" Description="Query filter to use for filtering cmn_location table" />
    <ConnectionParameter Name="cmn_cost_center_filter"
                         Description="Query filter to use for filtering cmn_cost_center table" />
    <ConnectionParameter Name="core_company_filter" Description="Query filter to use for filtering core_company table" />
    <ConnectionParameter Name="sc_request_filter" Description="Query filter to use for filtering sc_request table" />
    <ConnectionParameter Name="sc_req_item_filter" Description="Query filter to use for filtering sc_req_item table" />
    <ConnectionParameter Name="sc_catalog_filter" Description="Query filter to use for filtering sc_catalog table" />
    <ConnectionParameter Name="sc_cat_item_filter" Description="Query filter to use for filtering sc_cat_item table" />
    <ConnectionParameter Name="sc_cat_item_guide_filter"
                         Description="Query filter to use for filtering sc_cat_item_guide table" />
    <ConnectionParameter Name="item_option_new_filter"
                         Description="Query filter to use for filtering item_option_new table" />
    <ConnectionParameter Name="sc_item_option_filter"
                         Description="Query filter to use for filtering sc_item_option table" />
    <ConnectionParameter Name="sc_item_option_mtom_filter"
                         Description="Query filter to use for filtering sc_item_option_mtom table" />
    <ConnectionParameter Name="business_unit_filter"
                         Description="Query filter to use for filtering the business_unit table" />
    <ConnectionParameter Name="live_profile_filter"
                         Description="Query filter to use for filtering the live_profile table" />
    <ConnectionParameter Name="incident_filter" Description="Query filter to use for filtering the incident table" />
    <ConnectionParameter Name="sys_user_role_filter"
                         Description="Query filter to use for filtering the sys_user_role table" />
    <ConnectionParameter Name="sys_user_has_role_filter"
                         Description="Query filter to use for filtering the sys_user_has_role table" />
    <ConnectionParameter Name="sys_group_has_role_filter"
                         Description="Query filter to use for filtering the sys_group_has_role table" />
    <ConnectionParameter Name="sys_user_role_contains_filter"
                         Description="Query filter to use for filtering the sys_user_role_contains table" />
    <ConnectionParameter Name="sys_attachment_filter"
                         Description="Query filter to use for filtering the sys_attachment table" />
    <ConnectionParameter Name="cmdb_ci_filter" Description="Query filter to use for filtering the cmdb_ci table" />
    <ConnectionParameter Name="building_filter" Description="Query filter to use for filtering the cmn_building table" />
  </ConnectionParameters>

  <Initialization>
    <CustomCommands>
      <CustomCommand Name="Get-SnowBusinessUnit">
        <![CDATA[
      param (
            [parameter(Mandatory = $false)]
            [String]$Id,

            [parameter(Mandatory = $false)]
            [String]$Filter,

            [parameter(Mandatory = $false)]
            [String]$Select,

            [parameter(Mandatory = $false)]
            [String]$OrderBy
        )
            
            Get-Entity -CollectionBuilder $ServiceNowClient.BusinessUnits() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy                      
            ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowBusinessUnit">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$BuHead,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$SysDomain,

        [parameter(Mandatory = $false)]
        [string]$Description,

        [parameter(Mandatory = $false)]
        [string]$Parent
    )
    $parameters = $MyInvocation.BoundParameters  
    $bu = New-Object -TypeName ServiceNow.Graph.Models.BusinessUnit
    $bu.Name = $Name
    if ($parameters.ContainsKey("BuHead") -and $BuHead) {
        $bu.BuHead = Get-ReferenceLink $BuHead
    }    
    if ($parameters.ContainsKey("Company") -and $Company) {
        $bu.Company = Get-ReferenceLink $Company
    }        
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $bu.Parent = Get-ReferenceLink $Parent
    }            
    if ($parameters.ContainsKey("Description")) {
        $bu.Description = $Description
    }
    if ($parameters.ContainsKey("SysDomain") -and $SysDomain) {
        $bu.SysDomain = Get-ReferenceLink $SysDomain
    }            
    $ServiceNowClient.BusinessUnits().Request().AddAsync($bu).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowBusinessUnit">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$BuHead,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$Description,

        [parameter(Mandatory = $false)]
        [string]$Parent
    )
   
    $businessUnitBuilder = $ServiceNowClient.BusinessUnits()[$Id] 
    $parameters = $MyInvocation.BoundParameters  
    $bu = New-Object -TypeName ServiceNow.Graph.Models.BusinessUnit
    $bu.Id = $Id

    if ($parameters.ContainsKey("BuHead")) {
        if($BuHead) {
            $bu.BuHead = Get-ReferenceLink $BuHead
        } else {
            $bu.BuHead =  Get-ReferenceLink  ""
        }
    }    

    if ($parameters.ContainsKey("Company")) {
        if($Company) {
            $bu.Company = Get-ReferenceLink $Company
        } else {
            $bu.Company =  Get-ReferenceLink  ""
        }
    }        

    if ($parameters.ContainsKey("Parent")) {
        if($Parent) {
            $bu.Parent = Get-ReferenceLink $Parent
        } else {
            $bu.Parent =  Get-ReferenceLink  ""
        }
    }        
        
    if ($parameters.ContainsKey("Description")) {
        $bu.Description = $Description
    }
    if ($parameters.ContainsKey("Name")) {
        $bu.Name = $Name
    }
    $businessUnitBuilder.Request().UpdateAsync($bu).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowBuilding">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy,

        [parameter(Mandatory = $false)]
        [String]$Version=""        
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.Buildings($Version) -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
            ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowBuilding">
        <![CDATA[
            param (
                [parameter(Mandatory = $true)]
                [string]$Name,

                [parameter(Mandatory = $false)]
                [string]$Contact,

                [parameter(Mandatory = $false)]
                [string]$Location,

                [parameter(Mandatory = $false)]
                [string]$Notes,

                [parameter(Mandatory = $false)]
                [int]$Floors
            )
            $parameters = $MyInvocation.BoundParameters  
            $building = New-Object -TypeName ServiceNow.Graph.Models.Building
            $building.Name = $Name
            if ($parameters.ContainsKey("Contact") -and $Contact) {
                $building.Contact = Get-ReferenceLink $Contact
            }    
            if ($parameters.ContainsKey("Location") -and $Location) {
                $building.Location = Get-ReferenceLink $Location
            }        
            if ($parameters.ContainsKey("Notes")) {
                $building.Notes = $Notes
            }
            if ($parameters.ContainsKey("Floors")) {
                $building.Floors = $Floors
            }    
            $ServiceNowClient.Buildings().Request().AddAsync($building).GetAwaiter().GetResult()        
            ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowBuilding">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Contact,

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$Notes,

        [parameter(Mandatory = $false)]
        [int]$Floors
    )
   
    $buildingBuilder = $ServiceNowClient.Buildings()[$Id] 
    $parameters = $MyInvocation.BoundParameters  
    $building = New-Object -TypeName ServiceNow.Graph.Models.Building
    $building.Id = $Id
    if ($parameters.ContainsKey("Contact")) {
        if($Contact) {
            $building.Contact = Get-ReferenceLink $Contact
        } else {
            $building.Contact =  Get-ReferenceLink  ""
        }
    }    

    if ($parameters.ContainsKey("Location")) {
        if($Location) {
            $building.Location = Get-ReferenceLink $Location
        } else {
            $building.Location =  Get-ReferenceLink  ""
        }
    }    

    if ($parameters.ContainsKey("Notes")) {
        $building.Notes = $Notes
    }
    if ($parameters.ContainsKey("Floors")) {
        $building.Floors = $Floors
    }    
    if ($parameters.ContainsKey("Name")) {
        $building.Name = $Name
    }
    $buildingBuilder.Request().UpdateAsync($building).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowConfigurationItem">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.ConfigurationItems() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowCostCenter">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.CostCenters() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
        ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowCostCenter">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [string]$AccountNumber,

        [parameter(Mandatory = $false)]
        [string]$Code,

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$Manager,

        [parameter(Mandatory = $true)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$SysDomain,

        [parameter(Mandatory = $false)]
        [string]$ValidFrom,

        [parameter(Mandatory = $false)]
        [string]$ValidTo        
    )
    $parameters = $MyInvocation.BoundParameters  
    $costcenter = New-Object -TypeName ServiceNow.Graph.Models.CostCenter
    $costcenter.Name = $Name
    if ($parameters.ContainsKey("AccountNumber")) {
        $costcenter.AccountNumber = $AccountNumber
    }
    if ($parameters.ContainsKey("Code")) {
        $costcenter.Code = $Code
    }        
    if ($parameters.ContainsKey("Location") -and $Location) {
        $costcenter.Location = Get-ReferenceLink $Location
    }    
    if ($parameters.ContainsKey("Manager") -and $Manager) {
        $costcenter.Manager = Get-ReferenceLink $Manager
    }        
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $costcenter.Parent = Get-ReferenceLink $Parent
    }        
    if ($parameters.ContainsKey("SysDomain") -and $SysDomain) {
        $costcenter.SysDomain = Get-ReferenceLink $SysDomain
    }            
    if ($parameters.ContainsKey("ValidFrom") -and $ValidFrom) {
        $costcenter.ValidFrom = $ValidFrom
    }                     

    if ($parameters.ContainsKey("ValidTo") -and $ValidTo) {
        $costcenter.ValidTo = $ValidTo
    }                     

    $ServiceNowClient.CostCenters().Request().AddAsync($costcenter).GetAwaiter().GetResult()
        ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowCostCenter">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [string]$AccountNumber,

        [parameter(Mandatory = $false)]
        [string]$Code,

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$Manager,

        [parameter(Mandatory = $false)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$ValidFrom,

        [parameter(Mandatory = $false)]
        [string]$ValidTo        
    )
   
    $costCenterBuilder = $ServiceNowClient.CostCenters()[$Id] 
    $parameters = $MyInvocation.BoundParameters  
    $costcenter = New-Object -TypeName ServiceNow.Graph.Models.CostCenter
    $costcenter.Id = $Id

    if ($parameters.ContainsKey("AccountNumber")) {
        $costcenter.AccountNumber = $AccountNumber
    }
    if ($parameters.ContainsKey("Code")) {
        $costcenter.Code = $Code
    }        
    if ($parameters.ContainsKey("Location") ) {
        if($Location) {
            $costcenter.Location = Get-ReferenceLink $Location
        } else {
            $costcenter.Location = Get-ReferenceLink ""
        }
    }    
    if ($parameters.ContainsKey("Manager") ) {
        if($Manager) {
            $costcenter.Manager = Get-ReferenceLink $Manager
        } else {
            $costcenter.Manager = Get-ReferenceLink ""
        }
    }        
    if ($parameters.ContainsKey("Name")) {
        $costcenter.Name = $Name
    }            
    if ($parameters.ContainsKey("Parent") ) {
        if($Parent) {
            $costcenter.Parent = Get-ReferenceLink $Parent
        } else {
            $costcenter.Parent = Get-ReferenceLink ""
        }
    }
    if ($parameters.ContainsKey("ValidFrom")) {
        $costcenter.ValidFrom = $ValidFrom
    }                     

    if ($parameters.ContainsKey("ValidTo")) {
        $costcenter.ValidTo = $ValidTo
    }                     


    $costCenterBuilder.Request().UpdateAsync($costcenter).GetAwaiter().GetResult()
        ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowDepartment">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.Departments() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowDepartment">
        <![CDATA[
        param (
            [parameter(Mandatory = $false)]
            [string]$BusinessUnit,

            [parameter(Mandatory = $false)]
            [string]$Company,

            [parameter(Mandatory = $false)]
            [string]$CostCenter,

            [parameter(Mandatory = $false)]
            [string]$DeptHead,

            [parameter(Mandatory = $false)]
            [string]$Description,

            [parameter(Mandatory = $false)]
            [int]$HeadCount,

            [parameter(Mandatory = $false)]
            [string]$DepartmentId,

            [parameter(Mandatory = $true)]
            [string]$Name,

            [parameter(Mandatory = $false)]
            [string]$Parent,

            [parameter(Mandatory = $false)]
            [string]$PrimaryContact        
        )
        $parameters = $MyInvocation.BoundParameters  
        $department = New-Object -TypeName ServiceNow.Graph.Models.Department
        $department.Name = $Name
        if ($parameters.ContainsKey("BusinessUnit") -and $BusinessUnit) {
            $department.BusinessUnit = Get-ReferenceLink $BusinessUnit
        }        
        if ($parameters.ContainsKey("Company") -and $Company) {
            $department.Company = Get-ReferenceLink $Company
        }            
        if ($parameters.ContainsKey("CostCenter") -and $CostCenter) {
            $department.CostCenter = Get-ReferenceLink $CostCenter
        }                
        if ($parameters.ContainsKey("DeptHead") -and $DeptHead) {
            $department.DeptHead = Get-ReferenceLink $DeptHead
        }                    
        if ($parameters.ContainsKey("Description")) {
            $department.Description = $Description
        }
        if ($parameters.ContainsKey("HeadCount")) {
            $department.HeadCount = $HeadCount
        }        
        if ($parameters.ContainsKey("DepartmentId")) {
            $department.DepartmentId = $DepartmentId
        }            
        if ($parameters.ContainsKey("Parent") -and $Parent) {
            $department.Parent = Get-ReferenceLink $Parent
        }    
        if ($parameters.ContainsKey("PrimaryContact") -and $PrimaryContact) {
            $department.PrimaryContact = Get-ReferenceLink $PrimaryContact
        }        

        $ServiceNowClient.Departments().Request().AddAsync($department).GetAwaiter().GetResult()
        ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowDepartment">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [string]$BusinessUnit,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$CostCenter,

        [parameter(Mandatory = $false)]
        [string]$DeptHead,

        [parameter(Mandatory = $false)]
        [string]$Description,

        [parameter(Mandatory = $false)]
        [int]$HeadCount,

        [parameter(Mandatory = $false)]
        [string]$DepartmentId,

        [parameter(Mandatory = $false)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$PrimaryContact        
    )
   
    $departmentBuilder = $ServiceNowClient.Departments()[$Id] 
    $parameters = $MyInvocation.BoundParameters  
    $department = New-Object -TypeName ServiceNow.Graph.Models.Department
    $department.Id = $Id

    if ($parameters.ContainsKey("BusinessUnit")) {
        if($BusinessUnit){
            $department.BusinessUnit = Get-ReferenceLink $BusinessUnit
        } else {
            $department.BusinessUnit = Get-ReferenceLink ""
        }
    }        
    if ($parameters.ContainsKey("Company")) {
        if($Company){
            $department.Company = Get-ReferenceLink $Company
        } else {
            $department.Company = Get-ReferenceLink ""
        }
    }            
    if ($parameters.ContainsKey("CostCenter")) {
        if($CostCenter){
            $department.CostCenter = Get-ReferenceLink $CostCenter
        } else {
            $department.CostCenter = Get-ReferenceLink ""
        }
    }                
    if ($parameters.ContainsKey("DeptHead")) {
        if($DeptHead){
            $department.DeptHead = Get-ReferenceLink $DeptHead
        } else {
            $department.DeptHead = Get-ReferenceLink ""
        }
    }                    
    if ($parameters.ContainsKey("Description")) {
        $department.Description = $Description
    }
    if ($parameters.ContainsKey("HeadCount")) {
        $department.HeadCount = $HeadCount
    }        
    if ($parameters.ContainsKey("DepartmentId")) {
        $department.DepartmentId = $DepartmentId
    }            
    if ($parameters.ContainsKey("Name")) {
        $department.Name = $Name
    }              
    if ($parameters.ContainsKey("Parent")) {
        if($Parent){
            $department.Parent = Get-ReferenceLink $Parent
        } else {
            $department.Parent = Get-ReferenceLink ""
        }
    }              
    if ($parameters.ContainsKey("PrimaryContact")) {
        if($PrimaryContact){
            $department.PrimaryContact = Get-ReferenceLink $PrimaryContact
        } else {
            $department.PrimaryContact = Get-ReferenceLink ""
        }
    }             

    $departmentBuilder.Request().UpdateAsync($department).GetAwaiter().GetResult()
        ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowLocation">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.Locations() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowLocation">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [string]$City,

        [parameter(Mandatory = $false)]
        [string]$CmnLocationSource,

        [parameter(Mandatory = $false)]
        [string]$CmnLocationType,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$Contact,

        [parameter(Mandatory = $false)]
        [string]$CoordinatesRetrievedOn,

        [parameter(Mandatory = $false)]
        [string]$Country,

        [parameter(Mandatory = $false)]
        [bool]$Duplicate,

        [parameter(Mandatory = $false)]
        [string]$FaxPhone,

        [parameter(Mandatory = $false)]
        [string]$FullName,        

        [parameter(Mandatory = $false)]
        [string]$Latitude,

        [parameter(Mandatory = $false)]
        [string]$LatLongError,

        [parameter(Mandatory = $false)]
        [string]$LifeCycleStage,

        [parameter(Mandatory = $false)]
        [string]$LifeCycleStageStatus,        

        [parameter(Mandatory = $false)]
        [string]$Longitude,

        [parameter(Mandatory = $false)]
        [string]$ManagedByGroup,

        [parameter(Mandatory = $true)]
        [string]$Name,        

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$Phone,        

        [parameter(Mandatory = $false)]
        [string]$PhoneTerritory,

        [parameter(Mandatory = $false)]
        [string]$PrimaryLocation,

        [parameter(Mandatory = $false)]
        [string]$State,

        [parameter(Mandatory = $false)]
        [bool]$StockRoom,        

        [parameter(Mandatory = $false)]
        [string]$Street,

        [parameter(Mandatory = $false)]
        [string]$TimeZone,
        
        [parameter(Mandatory = $false)]
        [string]$Zip        
    )
    $parameters = $MyInvocation.BoundParameters  
    $location = New-Object -TypeName ServiceNow.Graph.Models.Location
    $location.Name = $Name
    if ($parameters.ContainsKey("City")) {
        $location.City = $City
    }
    if ($parameters.ContainsKey("CmnLocationSource")) {
        $location.CmnLocationSource = $CmnLocationSource
    }
    if ($parameters.ContainsKey("CmnLocationType")) {
        $location.CmnLocationType = $CmnLocationType
    }            
    if ($parameters.ContainsKey("Company") -and $Company) {
        $location.Company = Get-ReferenceLink $Company
    }        
    if ($parameters.ContainsKey("Contact") -and $Contact) {
        $location.Contact = Get-ReferenceLink $Contact
    }        
    if ($parameters.ContainsKey("CoordinatesRetrievedOn")) {
        $location.CoordinatesRetrievedOn = $CoordinatesRetrievedOn
    }                 
    if ($parameters.ContainsKey("Country")) {
        $location.Country = $Country
    }                
    if ($parameters.ContainsKey("Duplicate")) {
        $location.Duplicate = $Duplicate
    }                
    if ($parameters.ContainsKey("FaxPhone")) {
        $location.FaxPhone = $FaxPhone
    }                
    if ($parameters.ContainsKey("FullName")) {
        $location.FullName = $FullName
    }                
    if ($parameters.ContainsKey("Latitude")) {
        $location.Latitude = $Latitude
    }                
    if ($parameters.ContainsKey("LatLongError")) {
        $location.LatLongError = $LatLongError
    }                
    if ($parameters.ContainsKey("LifeCycleStage") -and $LifeCycleStage) {
        $location.LifeCycleStage = Get-ReferenceLink $LifeCycleStage
    }                
    if ($parameters.ContainsKey("LifeCycleStageStatus") -and $LifeCycleStageStatus) {
        $location.LifeCycleStageStatus = Get-ReferenceLink $LifeCycleStageStatus
    }                    
    if ($parameters.ContainsKey("Longitude")) {
        $location.Longitude = $Longitude
    }
    if ($parameters.ContainsKey("ManagedByGroup") -and $ManagedByGroup) {
        $location.ManagedByGroup = Get-ReferenceLink $ManagedByGroup
    }        
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $location.Parent = Get-ReferenceLink $Parent
    }        
    if ($parameters.ContainsKey("Phone")) {
        $location.Phone = $Phone
    }                
    if ($parameters.ContainsKey("PhoneTerritory") -and $PhoneTerritory) {
        $location.PhoneTerritory = Get-ReferenceLink $PhoneTerritory
    }                
    if ($parameters.ContainsKey("PrimaryLocation") -and $PrimaryLocation) {
        $location.PrimaryLocation = Get-ReferenceLink $PrimaryLocation
    }            
    if ($parameters.ContainsKey("State")) {
        $location.State = $State
    }        
    if ($parameters.ContainsKey("StockRoom")) {
        $location.StockRoom = $StockRoom
    }        
    if ($parameters.ContainsKey("Street")) {
        $location.Street = $Street
    }        
    if ($parameters.ContainsKey("TimeZone")) {
        $location.TimeZone = $TimeZone
    }        
    if ($parameters.ContainsKey("Zip")) {
        $location.Zip = $Zip
    }        

    $ServiceNowClient.Locations().Request().AddAsync($location).GetAwaiter().GetResult()
      ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowLocation">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [string]$City,

        [parameter(Mandatory = $false)]
        [string]$CmnLocationSource,

        [parameter(Mandatory = $false)]
        [string]$CmnLocationType,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$Contact,

        [parameter(Mandatory = $false)]
        [string]$CoordinatesRetrievedOn,

        [parameter(Mandatory = $false)]
        [string]$Country,

        [parameter(Mandatory = $false)]
        [bool]$Duplicate,

        [parameter(Mandatory = $false)]
        [string]$FaxPhone,

        [parameter(Mandatory = $false)]
        [string]$FullName,        

        [parameter(Mandatory = $false)]
        [string]$Latitude,

        [parameter(Mandatory = $false)]
        [string]$LatLongError,

        [parameter(Mandatory = $false)]
        [string]$LifeCycleStage,

        [parameter(Mandatory = $false)]
        [string]$LifeCycleStageStatus,        

        [parameter(Mandatory = $false)]
        [string]$Longitude,

        [parameter(Mandatory = $false)]
        [string]$ManagedByGroup,

        [parameter(Mandatory = $false)]
        [string]$Name,        

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$Phone,        

        [parameter(Mandatory = $false)]
        [string]$PhoneTerritory,

        [parameter(Mandatory = $false)]
        [string]$PrimaryLocation,

        [parameter(Mandatory = $false)]
        [string]$State,

        [parameter(Mandatory = $false)]
        [bool]$StockRoom,        

        [parameter(Mandatory = $false)]
        [string]$Street,

        [parameter(Mandatory = $false)]
        [string]$TimeZone,
        
        [parameter(Mandatory = $false)]
        [string]$Zip        
    )
   
    $locationBuilder = $ServiceNowClient.Locations()[$Id] 
    $parameters = $MyInvocation.BoundParameters  
    $location = New-Object -TypeName ServiceNow.Graph.Models.Location
    $location.Id = $Id

    if ($parameters.ContainsKey("City")) {
        $location.City = $City
    }
    if ($parameters.ContainsKey("CmnLocationSource")) {
        $location.CmnLocationSource = $CmnLocationSource
    }
    if ($parameters.ContainsKey("CmnLocationType")) {
        $location.CmnLocationType = $CmnLocationType
    }            
    if ($parameters.ContainsKey("Company")) {
        if ($Company) {
            $location.Company = Get-ReferenceLink $Company
        } else {
            $location.Company = Get-ReferenceLink ""
        }
    }        
    if ($parameters.ContainsKey("Contact")) {
        if ($Contact) {
            $location.Contact = Get-ReferenceLink $Contact
        } else {
            $location.Contact = Get-ReferenceLink ""
        }
    }            
    if ($parameters.ContainsKey("CoordinatesRetrievedOn")) {
        $location.CoordinatesRetrievedOn = $CoordinatesRetrievedOn
    }                 
    if ($parameters.ContainsKey("Country")) {
        $location.Country = $Country
    }                
    if ($parameters.ContainsKey("Duplicate")) {
        $location.Duplicate = $Duplicate
    }                
    if ($parameters.ContainsKey("FaxPhone")) {
        $location.FaxPhone = $FaxPhone
    }                
    if ($parameters.ContainsKey("FullName")) {
        $location.FullName = $FullName
    }                
    if ($parameters.ContainsKey("Latitude")) {
        $location.Latitude = $Latitude
    }                
    if ($parameters.ContainsKey("LatLongError")) {
        $location.LatLongError = $LatLongError
    }          
    if ($parameters.ContainsKey("LifeCycleStage")) {
        if ($LifeCycleStage) {
            $location.LifeCycleStage = Get-ReferenceLink $LifeCycleStage
        } else {
            $location.LifeCycleStage = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("LifeCycleStageStatus")) {
        if ($LifeCycleStageStatus) {
            $location.LifeCycleStageStatus = Get-ReferenceLink $LifeCycleStageStatus
        } else {
            $location.LifeCycleStageStatus = Get-ReferenceLink ""
        }
    }                          
    if ($parameters.ContainsKey("Longitude")) {
        $location.Longitude = $Longitude
    }
    if ($parameters.ContainsKey("ManagedByGroup")) {
        if ($ManagedByGroup) {
            $location.ManagedByGroup = Get-ReferenceLink $ManagedByGroup
        } else {
            $location.ManagedByGroup = Get-ReferenceLink ""
        }
    }            
    if ($parameters.ContainsKey("Parent")) {
        if ($Parent) {
            $location.Parent = Get-ReferenceLink $Parent
        } else {
            $location.Parent = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("Phone")) {
        $location.Phone = $Phone
    }            
    if ($parameters.ContainsKey("PhoneTerritory")) {
        if ($PhoneTerritory) {
            $location.PhoneTerritory = Get-ReferenceLink $PhoneTerritory
        } else {
            $location.PhoneTerritory = Get-ReferenceLink ""
        }
    }                    
    if ($parameters.ContainsKey("PrimaryLocation")) {
        if ($PrimaryLocation) {
            $location.PrimaryLocation = Get-ReferenceLink $PrimaryLocation
        } else {
            $location.PrimaryLocation = Get-ReferenceLink ""
        }
    }                   
    if ($parameters.ContainsKey("State")) {
        $location.State = $State
    }        
    if ($parameters.ContainsKey("StockRoom")) {
        $location.StockRoom = $StockRoom
    }        
    if ($parameters.ContainsKey("Street")) {
        $location.Street = $Street
    }        
    if ($parameters.ContainsKey("TimeZone")) {
        $location.TimeZone = $TimeZone
    }        
    if ($parameters.ContainsKey("Zip")) {
        $location.Zip = $Zip
    }        
    if ($parameters.ContainsKey("Name")) {
        $location.Name = $Name
    }        

    $locationBuilder.Request().UpdateAsync($location).GetAwaiter().GetResult()
      ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowCompany">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.Companies() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowCompany">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [string]$AppleIcon,

        [parameter(Mandatory = $false)]
        [string]$BannerImage,

        [parameter(Mandatory = $false)]
        [string]$BannerImageLight,

        [parameter(Mandatory = $false)]
        [string]$BannerText,

        [parameter(Mandatory = $false)]
        [string]$City,

        [parameter(Mandatory = $false)]
        [string]$Contact,

        [parameter(Mandatory = $false)]
        [string]$CoordinatesRetrievedOn,

        [parameter(Mandatory = $false)]
        [string]$Country,

        [parameter(Mandatory = $false)]
        [bool]$Customer,

        [parameter(Mandatory = $false)]
        [string]$Discount,        

        [parameter(Mandatory = $false)]
        [string]$FaxPhone,

        [parameter(Mandatory = $false)]
        [string]$FiscalYear,

        [parameter(Mandatory = $false)]
        [string]$Latitude,

        [parameter(Mandatory = $false)]
        [string]$LatLongError,        

        [parameter(Mandatory = $false)]
        [string]$Longitude,

        [parameter(Mandatory = $false)]
        [bool]$Manufacturer,

        [parameter(Mandatory = $false)]
        [string]$MarketCap,        

        [parameter(Mandatory = $true)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Notes,        

        [parameter(Mandatory = $false)]
        [int]$NumEmployees,

        [parameter(Mandatory = $false)]
        [string]$PrimaryLocation,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$Phone,        

        [parameter(Mandatory = $false)]
        [bool]$Primary,

        [parameter(Mandatory = $false)]
        [string]$Profits,
        
        [parameter(Mandatory = $false)]
        [bool]$PubliclyTraded,

        [parameter(Mandatory = $false)]
        [string]$RankTier,

        [parameter(Mandatory = $false)]
        [string]$RevenuePerYear,

        [parameter(Mandatory = $false)]
        [string]$State,        

        [parameter(Mandatory = $false)]
        [string]$StockPrice,

        [parameter(Mandatory = $false)]
        [string]$StockSymbol,

        [parameter(Mandatory = $false)]
        [string]$Street,
        
        [parameter(Mandatory = $false)]
        [string]$Theme,

        [parameter(Mandatory = $false)]
        [bool]$Vendor,

        [parameter(Mandatory = $false)]
        [string]$VendorManager,

        [parameter(Mandatory = $false)]
        [string]$VendorType,        

        [parameter(Mandatory = $false)]
        [string]$Website,

        [parameter(Mandatory = $false)]
        [string]$Zip        
    )
    $parameters = $MyInvocation.BoundParameters  
    $company = New-Object -TypeName ServiceNow.Graph.Models.Company
    $company.Name = $Name
    if ($parameters.ContainsKey("AppleIcon")) {
        $company.AppleIcon = $AppleIcon
    }
    if ($parameters.ContainsKey("BannerImage")) {
        $company.BannerImage = $BannerImage
    }
    if ($parameters.ContainsKey("BannerImageLight")) {
        $company.BannerImageLight = $BannerImageLight
    }            
    if ($parameters.ContainsKey("BannerText")) {
        $company.BannerText = $BannerText
    }            
    if ($parameters.ContainsKey("City")) {
        $company.City = $City
    }            
    if ($parameters.ContainsKey("Contact") -and $Contact) {
        $company.Contact = Get-ReferenceLink $Contact
    }        
    if ($parameters.ContainsKey("CoordinatesRetrievedOn")) {
        $company.CoordinatesRetrievedOn = $CoordinatesRetrievedOn
    }                 
    if ($parameters.ContainsKey("Country")) {
        $company.Country = $Country
    }                
    if ($parameters.ContainsKey("Customer")) {
        $company.Customer = $Customer
    }                
    if ($parameters.ContainsKey("FaxPhone")) {
        $company.FaxPhone = $FaxPhone
    }                
    if ($parameters.ContainsKey("Discount")) {
        $company.Discount = $Discount
    }                
    if ($parameters.ContainsKey("FaxPhone")) {
        $company.FaxPhone = $FaxPhone
    }                
    if ($parameters.ContainsKey("FiscalYear")) {
        $company.FiscalYear = $FiscalYear
    }                 
    if ($parameters.ContainsKey("Latitude")) {
        $company.Latitude = $Latitude
    }                
    if ($parameters.ContainsKey("LatLongError")) {
        $company.LatLongError = $LatLongError
    }                
    if ($parameters.ContainsKey("Longitude")) {
        $company.Longitude = $Longitude
    }    
    if ($parameters.ContainsKey("Manufacturer")) {
        $company.Manufacturer = $Manufacturer
    }    
    if ($parameters.ContainsKey("MarketCap")) {
        $company.MarketCap = $MarketCap
    }    
    if ($parameters.ContainsKey("Notes")) {
        $company.Notes = $Notes
    }    
    if ($parameters.ContainsKey("NumEmployees")) {
        $company.NumEmployees = $NumEmployees
    }    
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $company.Parent = Get-ReferenceLink $Parent
    }                
    if ($parameters.ContainsKey("Phone")) {
        $company.Phone = $Phone
    }                
    if ($parameters.ContainsKey("Primary")) {
        $company.Primary = $Primary
    }                
    if ($parameters.ContainsKey("Profits")) {
        $company.Profits = $Profits
    }                
    if ($parameters.ContainsKey("PubliclyTraded")) {
        $company.PubliclyTraded = $PubliclyTraded
    }                
    if ($parameters.ContainsKey("RankTier")) {
        $company.RankTier = $RankTier
    }                
    if ($parameters.ContainsKey("RevenuePerYear")) {
        $company.RevenuePerYear = $RevenuePerYear
    }                
    if ($parameters.ContainsKey("State")) {
        $company.State = $State
    }                
    if ($parameters.ContainsKey("StockPrice")) {
        $company.StockPrice = $StockPrice
    }                
    if ($parameters.ContainsKey("StockSymbol")) {
        $company.StockSymbol = $StockSymbol
    }                
    if ($parameters.ContainsKey("Street")) {
        $company.Street = $Street
    }                
    if ($parameters.ContainsKey("Theme") -and $Theme) {
        $company.Theme = Get-ReferenceLink $Theme
    }                
    if ($parameters.ContainsKey("Vendor")) {
        $company.Vendor = $Vendor
    }                    
    if ($parameters.ContainsKey("VendorManager")) {
        $company.VendorManager = $VendorManager
    }                    
    if ($parameters.ContainsKey("VendorType")) {
        $company.VendorType = $VendorType
    }                    
    if ($parameters.ContainsKey("Website")) {
        $company.Website = $Website
    }                    
    if ($parameters.ContainsKey("Zip")) {
        $company.Zip = $Zip
    }        

    $ServiceNowClient.Companies().Request().AddAsync($company).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowCompany">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [string]$AppleIcon,

        [parameter(Mandatory = $false)]
        [string]$BannerImage,

        [parameter(Mandatory = $false)]
        [string]$BannerImageLight,

        [parameter(Mandatory = $false)]
        [string]$BannerText,

        [parameter(Mandatory = $false)]
        [string]$City,

        [parameter(Mandatory = $false)]
        [string]$Contact,

        [parameter(Mandatory = $false)]
        [string]$CoordinatesRetrievedOn,

        [parameter(Mandatory = $false)]
        [string]$Country,

        [parameter(Mandatory = $false)]
        [bool]$Customer,

        [parameter(Mandatory = $false)]
        [string]$Discount,        

        [parameter(Mandatory = $false)]
        [string]$FaxPhone,

        [parameter(Mandatory = $false)]
        [string]$FiscalYear,

        [parameter(Mandatory = $false)]
        [string]$Latitude,

        [parameter(Mandatory = $false)]
        [string]$LatLongError,        

        [parameter(Mandatory = $false)]
        [string]$Longitude,

        [parameter(Mandatory = $false)]
        [bool]$Manufacturer,

        [parameter(Mandatory = $false)]
        [string]$MarketCap,        

        [parameter(Mandatory = $false)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Notes,        

        [parameter(Mandatory = $false)]
        [int]$NumEmployees,

        [parameter(Mandatory = $false)]
        [string]$PrimaryLocation,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$Phone,        

        [parameter(Mandatory = $false)]
        [bool]$Primary,

        [parameter(Mandatory = $false)]
        [string]$Profits,
        
        [parameter(Mandatory = $false)]
        [bool]$PubliclyTraded,

        [parameter(Mandatory = $false)]
        [string]$RankTier,

        [parameter(Mandatory = $false)]
        [string]$RevenuePerYear,

        [parameter(Mandatory = $false)]
        [string]$State,        

        [parameter(Mandatory = $false)]
        [string]$StockPrice,

        [parameter(Mandatory = $false)]
        [string]$StockSymbol,

        [parameter(Mandatory = $false)]
        [string]$Street,
        
        [parameter(Mandatory = $false)]
        [string]$Theme,

        [parameter(Mandatory = $false)]
        [bool]$Vendor,

        [parameter(Mandatory = $false)]
        [string]$VendorManager,

        [parameter(Mandatory = $false)]
        [string]$VendorType,        

        [parameter(Mandatory = $false)]
        [string]$Website,

        [parameter(Mandatory = $false)]
        [string]$Zip        
    )
   
    $companyBuilder = $ServiceNowClient.Companies()[$Id] 
    $parameters = $MyInvocation.BoundParameters  
    $company = New-Object -TypeName ServiceNow.Graph.Models.Company
    $company.Id = $Id

    if ($parameters.ContainsKey("AppleIcon")) {
        $company.AppleIcon = $AppleIcon
    }
    if ($parameters.ContainsKey("BannerImage")) {
        $company.BannerImage = $BannerImage
    }
    if ($parameters.ContainsKey("BannerImageLight")) {
        $company.BannerImageLight = $BannerImageLight
    }            
    if ($parameters.ContainsKey("BannerText")) {
        $company.BannerText = $BannerText
    }            
    if ($parameters.ContainsKey("City")) {
        $company.City = $City
    }            
    if ($parameters.ContainsKey("Contact")) {
        if($Contact){
            $company.Contact = Get-ReferenceLink $Contact
        } else {
            $company.Contact = Get-ReferenceLink ""
        }
    }        
    if ($parameters.ContainsKey("CoordinatesRetrievedOn")) {
        $company.CoordinatesRetrievedOn = $CoordinatesRetrievedOn
    }                 

    if ($parameters.ContainsKey("Country")) {
        $company.Country = $Country
    }                
    if ($parameters.ContainsKey("Customer")) {
        $company.Customer = $Customer
    }                
    if ($parameters.ContainsKey("FaxPhone")) {
        $company.FaxPhone = $FaxPhone
    }                
    if ($parameters.ContainsKey("Discount")) {
        $company.Discount = $Discount
    }                
    if ($parameters.ContainsKey("FaxPhone")) {
        $company.FaxPhone = $FaxPhone
    }                
    if ($parameters.ContainsKey("FiscalYear")) {
        $company.FiscalYear = $FiscalYear
    }                 
    if ($parameters.ContainsKey("Latitude")) {
        $company.Latitude = $Latitude
    }                
    if ($parameters.ContainsKey("LatLongError")) {
        $company.LatLongError = $LatLongError
    }                
    if ($parameters.ContainsKey("Longitude")) {
        $company.Longitude = $Longitude
    }    
    if ($parameters.ContainsKey("Manufacturer")) {
        $company.Manufacturer = $Manufacturer
    }    
    if ($parameters.ContainsKey("MarketCap")) {
        $company.MarketCap = $MarketCap
    }    
    if ($parameters.ContainsKey("Notes")) {
        $company.Notes = $Notes
    }    
    if ($parameters.ContainsKey("NumEmployees")) {
        $company.NumEmployees = $NumEmployees
    }    
    if ($parameters.ContainsKey("Parent")) {
        if($Parent){
            $company.Parent = Get-ReferenceLink $Parent
        } else {
            $company.Parent = Get-ReferenceLink ""
        }
    }                
    if ($parameters.ContainsKey("Phone")) {
        $company.Phone = $Phone
    }                
    if ($parameters.ContainsKey("Primary")) {
        $company.Primary = $Primary
    }                
    if ($parameters.ContainsKey("Profits")) {
        $company.Profits = $Profits
    }                
    if ($parameters.ContainsKey("PubliclyTraded")) {
        $company.PubliclyTraded = $PubliclyTraded
    }                
    if ($parameters.ContainsKey("RankTier")) {
        $company.RankTier = $RankTier
    }                
    if ($parameters.ContainsKey("RevenuePerYear")) {
        $company.RevenuePerYear = $RevenuePerYear
    }                
    if ($parameters.ContainsKey("State")) {
        $company.State = $State
    }                
    if ($parameters.ContainsKey("StockPrice")) {
        $company.StockPrice = $StockPrice
    }                
    if ($parameters.ContainsKey("StockSymbol")) {
        $company.StockSymbol = $StockSymbol
    }                
    if ($parameters.ContainsKey("Street")) {
        $company.Street = $Street
    }                
    if ($parameters.ContainsKey("Theme")) {
        if ($Theme) {
            $company.Theme = Get-ReferenceLink $Theme    
        }
        else {
            $company.Theme = Get-ReferenceLink ""
        }
    }                
    if ($parameters.ContainsKey("Vendor")) {
        $company.Vendor = $Vendor
    }                    
    if ($parameters.ContainsKey("VendorManager")) {
        $company.VendorManager = $VendorManager
    }                    
    if ($parameters.ContainsKey("VendorType")) {
        $company.VendorType = $VendorType
    }                    
    if ($parameters.ContainsKey("Website")) {
        $company.Website = $Website
    }                    
    if ($parameters.ContainsKey("Zip")) {
        $company.Zip = $Zip
    }        
    if ($parameters.ContainsKey("Name")) {
        $company.Name = $Name
    }        

    $companyBuilder.Request().UpdateAsync($company).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowIncident">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.Incidents() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowIncident">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$CallerId,

        [parameter(Mandatory = $true)]
        [string]$AssignmentGroup,

        [parameter(Mandatory = $true)]
        [string]$ShortDescription,

        [parameter(Mandatory = $true)]
        [string]$Category,
        
        [parameter(Mandatory = $false)]
        [string]$SysDomain,

        [parameter(Mandatory = $false)]
        [bool]$Active,

        [parameter(Mandatory = $false)]
        [string]$ActivityDue,        

        [parameter(Mandatory = $false)]
        [string]$AdditionalAssigneeList,

        [parameter(Mandatory = $false)]
        [string]$Approval,

        [parameter(Mandatory = $false)]
        [string]$AssignedTo,

        [parameter(Mandatory = $false)]
        [string]$BusinessImpact,

        [parameter(Mandatory = $false)]
        [string]$BusinessService,

        [parameter(Mandatory = $false)]
        [string]$Cause,

        [parameter(Mandatory = $false)]
        [string]$CausedBy,

        [parameter(Mandatory = $false)]
        [string]$CloseCode,

        [parameter(Mandatory = $false)]
        [string]$CloseNotes,

        [parameter(Mandatory = $false)]
        [string]$CmdbCi,

        [parameter(Mandatory = $false)]
        [string]$Comments,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$ContactType,

        [parameter(Mandatory = $false)]
        [string]$Contract,

        [parameter(Mandatory = $false)]
        [string]$Description,

        [parameter(Mandatory = $false)]
        [string]$DueDate,        

        [parameter(Mandatory = $false)]
        [string]$ExpectedStart,        

        [parameter(Mandatory = $false)]
        [string]$FollowUp,        

        [parameter(Mandatory = $false)]
        [string]$GroupList,

        [parameter(Mandatory = $false)]
        [int]$Impact,

        [parameter(Mandatory = $false)]
        [int]$IncidentState,

        [parameter(Mandatory = $false)]
        [bool]$Knowledge,

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [int]$Notify,

        [parameter(Mandatory = $false)]
        [string]$OpenedBy,

        [parameter(Mandatory = $false)]
        [string]$OriginId,
        
        [parameter(Mandatory = $false)]
        [string]$OriginTable,

        [parameter(Mandatory = $false)]
        [string]$Parent,
        
        [parameter(Mandatory = $false)]
        [string]$ParentIncident,

        [parameter(Mandatory = $false)]
        [int]$Priority,

        [parameter(Mandatory = $false)]
        [string]$ProblemId,

        [parameter(Mandatory = $false)]
        [string]$Rfc,

        [parameter(Mandatory = $false)]
        [string]$ServiceOffering,

        [parameter(Mandatory = $false)]
        [int]$Severity,

        [parameter(Mandatory = $false)]
        [int]$State,

        [parameter(Mandatory = $false)]
        [string]$SubCategory,

        [parameter(Mandatory = $false)]
        [int]$Urgency,

        [parameter(Mandatory = $false)]
        [string]$WorkNotes
    )
    
    $incidentBuilder = $ServiceNowClient.Incidents()
    $incident = New-Object -TypeName ServiceNow.Graph.Models.Incident
    $parameters = $MyInvocation.BoundParameters  

    if ($parameters.ContainsKey("SysDomain") -and $SysDomain) {
        $incident.SysDomain = Get-ReferenceLink $SysDomain
    }              
    if ($parameters.ContainsKey("Active")) {
        $incident.Active = $Active
    }
    if ($parameters.ContainsKey("ActivityDue")) {
        if ($ActivityDue) {
            $incident.ActivityDue = $ActivityDue
        } 
    }                     
    if ($parameters.ContainsKey("AdditionalAssigneeList")) {
        $incident.AdditionalAssigneeList = $AdditionalAssigneeList
    }    
    if ($parameters.ContainsKey("Approval")) {
        $incident.Approval = $Approval
    }        
    if ($parameters.ContainsKey("AssignedTo") -and $AssignedTo) {
        $incident.AssignedTo = Get-ReferenceLink $AssignedTo
    }          
    if ($parameters.ContainsKey("AssignmentGroup")) {
        $incident.AssignmentGroup = Get-ReferenceLink $AssignmentGroup
    }     
    if ($parameters.ContainsKey("BusinessImpact")) {
        $incident.BusinessImpact = $BusinessImpact
    }          
    if ($parameters.ContainsKey("BusinessService") -and $BusinessService) {
        $incident.BusinessService = Get-ReferenceLink $BusinessService
    }                
    if ($parameters.ContainsKey("CallerId") ) {
        $incident.CallerId = Get-ReferenceLink $CallerId
    }       
    if ($parameters.ContainsKey("Category")) {
        $incident.Category = $Category
    }         
    if ($parameters.ContainsKey("Cause")) {
        $incident.Cause = $Cause
    }          
    if ($parameters.ContainsKey("CausedBy") -and $CausedBy) {
        $incident.CausedBy = Get-ReferenceLink $CausedBy
    }          
    if ($parameters.ContainsKey("CloseCode")) {
        $incident.CloseCode = $CloseCode
    }                     
    if ($parameters.ContainsKey("CloseNotes")) {
        $incident.CloseNotes = $CloseNotes
    }    
    if ($parameters.ContainsKey("CmdbCi") -and $CmdbCi) {
        $incident.CmdbCi = Get-ReferenceLink $CmdbCi
    }          
    if ($parameters.ContainsKey("Comments")) {
        $incident.Comments = $Comments
    }
    if ($parameters.ContainsKey("Company") -and $Company) {
        $incident.Company = Get-ReferenceLink $Company
    }              
    if ($parameters.ContainsKey("ContactType")) {
        $incident.ContactType = $ContactType
    }
    if ($parameters.ContainsKey("Contract") -and $Contract) {
        $incident.Contract = Get-ReferenceLink $Contract
    }                      
    if ($parameters.ContainsKey("Description")) {
        $incident.Description = $Description
    } 
    if ($parameters.ContainsKey("DueDate")) {
        if ($DueDate) {
            $incident.DueDate = $DueDate
        } 
    }                         
    if ($parameters.ContainsKey("ExpectedStart")) {
        if ($ExpectedStart) {
            $incident.ExpectedStart = $ExpectedStart
        }
    }                             
    if ($parameters.ContainsKey("FollowUp")) {
        if ($FollowUp) {
            $incident.FollowUp = $FollowUp
        }
    }                                 
    if ($parameters.ContainsKey("GroupList")) {
        $incident.GroupList = $GroupList
    }              
    if ($parameters.ContainsKey("Impact")) {
        $incident.Impact = $Impact
    } 
    if ($parameters.ContainsKey("IncidentState")) {
        $incident.IncidentState = $IncidentState
    }   
    if ($parameters.ContainsKey("Knowledge")) {
        $incident.Knowledge = $Knowledge
    }                  
    if ($parameters.ContainsKey("Location") -and $Location) {
        $incident.Location = Get-ReferenceLink $Location
    }     
    if ($parameters.ContainsKey("Notify")) {
        $incident.Notify = $Notify
    }              
    if ($parameters.ContainsKey("OpenedBy") -and $OpenedBy) {
        $incident.OpenedBy = Get-ReferenceLink $OpenedBy
    }     
    if ($parameters.ContainsKey("OriginId") -and $OriginId) {
        $incident.OriginId = Get-ReferenceLink $OriginId
    }  
    if ($parameters.ContainsKey("OriginTable")) {
        $incident.OriginTable = $OriginTable
    }
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $incident.Parent = Get-ReferenceLink $Parent
    }                
    if ($parameters.ContainsKey("ParentIncident") -and $ParentIncident) {
        $incident.ParentIncident = Get-ReferenceLink $ParentIncident
    }                                                                     
    if ($parameters.ContainsKey("Priority")) {
        $incident.Priority = $Priority
    }       
    if ($parameters.ContainsKey("ProblemId") -and $ProblemId) {
        $incident.ProblemId = Get-ReferenceLink $ProblemId
    }          
    if ($parameters.ContainsKey("Rfc") -and $Rfc) {
        $incident.Rfc = Get-ReferenceLink $Rfc
    }     
    if ($parameters.ContainsKey("ServiceOffering") -and $ServiceOffering) {
        $incident.ServiceOffering = Get-ReferenceLink $ServiceOffering
    } 
    if ($parameters.ContainsKey("Severity")) {
        $incident.Severity = $Severity
    }                                                   
    if ($parameters.ContainsKey("SubCategory")) {
        $incident.SubCategory = $SubCategory
    }                    
    if ($parameters.ContainsKey("ShortDescription")) {
        $incident.ShortDescription = $ShortDescription
    }
    if ($parameters.ContainsKey("State")) {
        $incident.State = $State
    }   
    if ($parameters.ContainsKey("Urgency")) {
        $incident.Urgency = $Urgency
    }   
    if ($parameters.ContainsKey("WorkNotes")) {
        $incident.WorkNotes = $WorkNotes
    }   

    $incidentBuilder.Request().AddAsync($incident).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowIncident">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [bool]$Active,

        [parameter(Mandatory = $false)]
        [string]$ActivityDue,        

        [parameter(Mandatory = $false)]
        [string]$AdditionalAssigneeList,

        [parameter(Mandatory = $false)]
        [string]$AssignedTo,

        [parameter(Mandatory = $false)]
        [string]$AssignmentGroup,

        [parameter(Mandatory = $false)]
        [string]$BusinessImpact,

        [parameter(Mandatory = $false)]
        [string]$BusinessService,

        [parameter(Mandatory = $false)]
        [string]$Category,

        [parameter(Mandatory = $false)]
        [string]$Cause,

        [parameter(Mandatory = $false)]
        [string]$CausedBy,

        [parameter(Mandatory = $false)]
        [string]$CloseCode,

        [parameter(Mandatory = $false)]
        [string]$CloseNotes,

        [parameter(Mandatory = $false)]
        [string]$CmdbCi,

        [parameter(Mandatory = $false)]
        [string]$Comments,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$ContactType,

        [parameter(Mandatory = $false)]
        [string]$Contract,

        [parameter(Mandatory = $false)]
        [string]$Description,

        [parameter(Mandatory = $false)]
        [string]$DueDate,        

        [parameter(Mandatory = $false)]
        [string]$ExpectedStart,        

        [parameter(Mandatory = $false)]
        [string]$FollowUp,        

        [parameter(Mandatory = $false)]
        [string]$GroupList,

        [parameter(Mandatory = $false)]
        [int]$Impact,

        [parameter(Mandatory = $false)]
        [int]$IncidentState,

        [parameter(Mandatory = $false)]
        [bool]$Knowledge,

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [int]$Notify,

        [parameter(Mandatory = $false)]
        [string]$OriginId,
        
        [parameter(Mandatory = $false)]
        [string]$OriginTable,

        [parameter(Mandatory = $false)]
        [string]$Parent,
        
        [parameter(Mandatory = $false)]
        [string]$ParentIncident,

        [parameter(Mandatory = $false)]
        [int]$Priority,

        [parameter(Mandatory = $false)]
        [string]$ProblemId,

        [parameter(Mandatory = $false)]
        [string]$Rfc,

        [parameter(Mandatory = $false)]
        [string]$ServiceOffering,

        [parameter(Mandatory = $false)]
        [int]$Severity,

        [parameter(Mandatory = $false)]
        [string]$ShortDescription,

        [parameter(Mandatory = $false)]
        [int]$State,

        [parameter(Mandatory = $false)]
        [string]$SubCategory,

        [parameter(Mandatory = $false)]
        [int]$Urgency,

        [parameter(Mandatory = $false)]
        [string]$WorkNotes
    )
    
    $incidentBuilder = $ServiceNowClient.Incidents()[$Id] 
    $incident = New-Object -TypeName ServiceNow.Graph.Models.Incident
    $parameters = $MyInvocation.BoundParameters  
    $incident.Id = $Id

    if ($parameters.ContainsKey("Active")) {
        $incident.Active = $Active
    }
    if ($parameters.ContainsKey("ActivityDue")) {
            $incident.ActivityDue = $ActivityDue
    }                         
    if ($parameters.ContainsKey("AdditionalAssigneeList")) {
        $incident.AdditionalAssigneeList = $AdditionalAssigneeList
    }    
    if ($parameters.ContainsKey("Approval")) {
        $incident.Approval = $Approval
    }        
    if ($parameters.ContainsKey("AssignedTo")) {
        if ($AssignedTo) {
            $incident.AssignedTo = Get-ReferenceLink $AssignedTo
        } else {
            $incident.AssignedTo = Get-ReferenceLink ""
        }
    }          
    if ($parameters.ContainsKey("AssignmentGroup")) {
        if ($AssignmentGroup) {
            $incident.AssignmentGroup = Get-ReferenceLink $AssignmentGroup
        } else {
            $incident.AssignmentGroup = Get-ReferenceLink ""
        }
    }              
    if ($parameters.ContainsKey("BusinessImpact")) {
        if ($BusinessImpact) {
            $incident.BusinessImpact = Get-ReferenceLink $BusinessImpact
        } else {
            $incident.BusinessImpact = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("BusinessService")) {
        if ($BusinessService) {
            $incident.BusinessService = Get-ReferenceLink $BusinessService
        } else {
            $incident.BusinessService = Get-ReferenceLink ""
        }
    }                      
    if ($parameters.ContainsKey("Category")) {
        $incident.Category = $Category
    }         
    if ($parameters.ContainsKey("Cause")) {
        $incident.Cause = $Cause
    }          
    if ($parameters.ContainsKey("CausedBy")) {
        if($CausedBy){
            $incident.CausedBy = Get-ReferenceLink $CausedBy
        } else {
            $incident.CausedBy = Get-ReferenceLink ""
        }
    }          
    if ($parameters.ContainsKey("CloseCode")) {
        $incident.CloseCode = $CloseCode
    }                     
    if ($parameters.ContainsKey("CloseNotes")) {
        $incident.CloseNotes = $CloseNotes
    }    
    if ($parameters.ContainsKey("CmdbCi")) {
        if ($CmdbCi) {
            $incident.CmdbCi = Get-ReferenceLink $CmdbCi
        } else {
            $incident.CmdbCi = Get-ReferenceLink ""
        }
    }                          
    if ($parameters.ContainsKey("Comments")) {
        $incident.Comments = $Comments
    }
    if ($parameters.ContainsKey("Company")) {
        if ($Company) {
            $incident.Company = Get-ReferenceLink $Company
        } else {
            $incident.Company = Get-ReferenceLink ""
        }
    }                              
    if ($parameters.ContainsKey("ContactType")) {
        $incident.ContactType = $ContactType
    }
    if ($parameters.ContainsKey("Contract")) {
        if ($Contract) {
            $incident.Contract = Get-ReferenceLink $Contract
        } else {
            $incident.Contract = Get-ReferenceLink ""
        }
    }                                  
    if ($parameters.ContainsKey("Description")) {
        $incident.Description = $Description
    } 
    if ($parameters.ContainsKey("DueDate")) {
            $incident.DueDate = $DueDate
    }                             
    if ($parameters.ContainsKey("ExpectedStart")) {
            $incident.ExpectedStart = $ExpectedStart
    }                             
    if ($parameters.ContainsKey("FollowUp")) {
            $incident.FollowUp = $FollowUp
    }                             
    if ($parameters.ContainsKey("GroupList")) {
        $incident.GroupList = $GroupList
    }              
    if ($parameters.ContainsKey("Impact")) {
        $incident.Impact = $Impact
    } 
    if ($parameters.ContainsKey("IncidentState")) {
        $incident.IncidentState = $IncidentState
    }   
    if ($parameters.ContainsKey("Knowledge")) {
        $incident.Knowledge = $Knowledge
    }             
    if ($parameters.ContainsKey("Location")) {
        if ($Location) {
            $incident.Location = Get-ReferenceLink $Location
        } else {
            $incident.Location = Get-ReferenceLink ""
        }
    }                                           
    if ($parameters.ContainsKey("Notify")) {
        $incident.Notify = $Notify
    }         
    if ($parameters.ContainsKey("OriginId")) {
        if ($OriginId) {
            $incident.OriginId = Get-ReferenceLink $OriginId
        } else {
            $incident.OriginId = Get-ReferenceLink ""
        }
    }                                                    
    if ($parameters.ContainsKey("OriginTable")) {
        $incident.OriginTable = $OriginTable
    }
    if ($parameters.ContainsKey("Parent")) {
        if ($Parent) {
            $incident.Parent = Get-ReferenceLink $Parent
        } else {
            $incident.Parent = Get-ReferenceLink ""
        }
    }                                                        
    if ($parameters.ContainsKey("ParentIncident")) {
        if ($ParentIncident) {
            $incident.ParentIncident = Get-ReferenceLink $ParentIncident
        } else {
            $incident.ParentIncident = Get-ReferenceLink ""
        }
    }                                                            
    if ($parameters.ContainsKey("Priority")) {
        $incident.Priority = $Priority
    }       
    if ($parameters.ContainsKey("ProblemId")) {
        if ($ProblemId) {
            $incident.ProblemId = Get-ReferenceLink $ProblemId
        } else {
            $incident.ProblemId = Get-ReferenceLink ""
        }
    }                                                                
    if ($parameters.ContainsKey("Rfc")) {
        if ($Rfc) {
            $incident.Rfc = Get-ReferenceLink $Rfc
        } else {
            $incident.Rfc = Get-ReferenceLink ""
        }
    }                                                                    
    if ($parameters.ContainsKey("ServiceOffering")) {
        if ($ServiceOffering) {
            $incident.ServiceOffering = Get-ReferenceLink $ServiceOffering
        } else {
            $incident.ServiceOffering = Get-ReferenceLink ""
        }
    }                                                                        
    if ($parameters.ContainsKey("Severity")) {
        $incident.Severity = $Severity
    }                                                   
    if ($parameters.ContainsKey("SubCategory")) {
        $incident.SubCategory = $SubCategory
    }                    
    if ($parameters.ContainsKey("ShortDescription")) {
        $incident.ShortDescription = $ShortDescription
    }
    if ($parameters.ContainsKey("State")) {
        $incident.State = $State
    }   
    if ($parameters.ContainsKey("Urgency")) {
        $incident.Urgency = $Urgency
    }   
    if ($parameters.ContainsKey("WorkNotes")) {
        $incident.WorkNotes = $WorkNotes
    }   
    $incidentBuilder.Request().UpdateAsync($incident).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowVariable">
        <![CDATA[
        param (
         [parameter(Mandatory = $false)]
          [String]$Id,
  
          [parameter(Mandatory = $false)]
          [String]$Filter,
  
          [parameter(Mandatory = $false)]
          [String]$Select,
  
          [parameter(Mandatory = $false)]
          [String]$OrderBy
      )
      Get-Entity -CollectionBuilder $ServiceNowClient.Variables() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowLiveProfile">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
    
        Get-Entity -CollectionBuilder $ServiceNowClient.LiveProfiles() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowLiveProfile">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Document,

        [parameter(Mandatory = $false)]
        [string]$Image,

        [parameter(Mandatory = $false)]
        [bool]$JoinedFeed,

        [parameter(Mandatory = $true)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Photo,

        [parameter(Mandatory = $false)]
        [string]$ShortDescription,

        [parameter(Mandatory = $false)]
        [string]$Status,

        [parameter(Mandatory = $false)]
        [string]$SysDomain,
        
        [parameter(Mandatory = $true)]
        [string]$Table,
        
        [parameter(Mandatory = $true)]
        [string]$Type
    )
    
    $profileRequestBuilder = $ServiceNowClient.LiveProfiles()
    $liveProfile = New-Object -TypeName ServiceNow.Graph.Models.LiveProfile
    $parameters = $MyInvocation.BoundParameters  

    $liveProfile.Document = Get-ReferenceLink $Document
    $liveProfile.Name = $Name
    $liveProfile.Table = $Table
    $liveProfile.Type = $Type

    if ($parameters.ContainsKey("Image")) {
        $liveProfile.Image = $Image
    }
    if ($parameters.ContainsKey("JoinedFeed")) {
        $liveProfile.JoinedFeed = $JoinedFeed
    }    
    if ($parameters.ContainsKey("Photo")) {
        $liveProfile.Photo = $Photo
    }
    if ($parameters.ContainsKey("ShortDescription")) {
        $liveProfile.ShortDescription = $ShortDescription
    } 
    if ($parameters.ContainsKey("Status")) {
        $liveProfile.Status = $Status
    } 
    if ($parameters.ContainsKey("SysDomain")) {
        $liveProfile.SysDomain = Get-ReferenceLink $SysDomain
    } 

    $profileRequestBuilder.Request().AddAsync($liveProfile).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowLiveProfile">
        <![CDATA[
    param (
      [parameter(Mandatory = $true)]
      [string]$Id,

      [parameter(Mandatory = $false)]
      [string]$Image,

      [parameter(Mandatory = $false)]
      [bool]$JoinedFeed,

      [parameter(Mandatory = $false)]
      [string]$Name,

      [parameter(Mandatory = $false)]
      [string]$Photo,

      [parameter(Mandatory = $false)]
      [string]$ShortDescription,

      [parameter(Mandatory = $false)]
      [string]$Status
  )
  $profileRequestBuilder = $ServiceNowClient.LiveProfiles()[$Id]
  $liveProfile = New-Object -TypeName ServiceNow.Graph.Models.LiveProfile
  $parameters = $MyInvocation.BoundParameters
  $liveProfile.Id = $Id
  if($parameters.ContainsKey("Image"))
  {
	 $liveProfile.Image = $Image
  }
  if($parameters.ContainsKey("JoinedFeed"))
  {
	 $liveProfile.JoinedFeed = $JoinedFeed
  }
  if($parameters.ContainsKey("Name"))
  {
	 $liveProfile.Name = $Name
  }
  if($parameters.ContainsKey("Photo"))
  {
	 $liveProfile.Photo = $Photo
  }
 
  if($parameters.ContainsKey("ShortDescription"))
  {
	 $liveProfile.ShortDescription = $ShortDescription
  }
    if($parameters.ContainsKey("Status"))
  {
	 $liveProfile.Status = $Status
  }
	 

  $profileRequestBuilder.Request().UpdateAsync($liveProfile).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowServiceCatalog">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
      
        Get-Entity -CollectionBuilder $ServiceNowClient.ServiceCatalogs() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>




      <CustomCommand Name="Get-SnowTask">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
    Get-Entity -CollectionBuilder $ServiceNowClient.Tasks() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowJournalFields">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [String]$Id,

        [parameter(Mandatory = $true)]
        [String]$Select,

        [parameter(Mandatory = $true)]
        [String]$Table
    )
        $params = @{sysparm_display_value = 'true'}
        switch ($Table.ToLower()) {
            "sc_request" { $builder = $ServiceNowClient.CatalogRequests() }
            "sc_req_item" {$builder = $ServiceNowClient.RequestItems()}
            "sc_task" {$builder = $ServiceNowClient.CatalogTasks()}
            "incident" {$builder = $ServiceNowClient.Incidents()}
        }
        Get-Entity -CollectionBuilder $builder -Id $Id  -Select $Select  -QueryParams $params
        ]]>
      </CustomCommand>



      <CustomCommand Name="Get-SnowCatalogItem">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
    Get-Entity -CollectionBuilder $ServiceNowClient.CatalogItems() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-ReferenceLink">
        <![CDATA[
        param (
            [Parameter(Position=0)]
            [string]$Value,

            [parameter(Mandatory=$false, Position=1)]
            [string]$Link
        )
        $refLink = New-Object -TypeName ServiceNow.Graph.Models.ReferenceLink
        $refLink.Value = $Value
        
        if(-not [string]::IsNullOrEmpty($Link)) {
            $refLink.Link = $Link
        }
        $refLink
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-Entity">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        $CollectionBuilder,

        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy,

        [parameter(Mandatory = $false)]
        [hashtable]$QueryParams=@{}                
    )
    $params = New-Object -TypeName System.Collections.Generic.List[ServiceNow.Graph.Requests.Options.QueryOption]
    foreach ($queryParam in $QueryParams.GetEnumerator()) {
        $queryOption = New-Object -TypeName ServiceNow.Graph.Requests.Options.QueryOption -ArgumentList $queryParam.Key, $queryParam.Value
        $params.Add($queryOption) | Out-Null
    }


    $outcome = $null
    if ($Id) {
        $outcome = $CollectionBuilder[$Id].Request($params).Select($Select).GetAsync().GetAwaiter().GetResult()   
    }
    else {
        $request = $CollectionBuilder.Request()
        if ($filter) {
            $request = $request.Filter($Filter)
        }
        if ($Select) {
            $request = $request.Select($Select)                
        }
        if ($OrderBy) {
            $request = $request.OrderBy($OrderBy)
        }
        $page = $request.Top($Global:PageSize).GetAsync().GetAwaiter().GetResult()
        if ($page -and $page.CurrentPage) {
            $outcome = $page.CurrentPage
            $nextPageRequest = $page.NextPageRequest
            while ($null -ne $nextPageRequest) {
                $nextPage = $nextPageRequest.GetAsync().GetAwaiter().GetResult()
                if ($null -ne $nextPage -and $nextPage.CurrentPage.Count -ne 0) {
                    $outcome.AddRange($nextPage.CurrentPage)
                }
                $nextPageRequest = $nextPage.NextPageRequest
            }
        }
    }

    $outcome    
            ]]>
      </CustomCommand>




      <CustomCommand Name="Get-SnowOrderGuide">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.OrderGuides() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowCatalogOption">
        <![CDATA[
        param (
          [parameter(Mandatory = $false)]
          [String]$Id,
  
          [parameter(Mandatory = $false)]
          [String]$Filter,
  
          [parameter(Mandatory = $false)]
          [String]$Select,
  
          [parameter(Mandatory = $false)]
          [String]$OrderBy
      )
      Get-Entity -CollectionBuilder $ServiceNowClient.CatalogOptions() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowCatalogOption">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [string]$CartItem,

        [parameter(Mandatory = $true)]
        [string]$ItemOptionNew,

        [parameter(Mandatory = $false)]
        [int]$Order,
        
        [parameter(Mandatory = $false)]
        [string]$ScCatItemOption,

        [parameter(Mandatory = $false)]
        [string]$Value
    )
        
    $catalogOptionsRequestBuilder = $ServiceNowClient.CatalogOptions()
    $option = New-Object -TypeName ServiceNow.Graph.Models.CatalogOption
    $parameters = $MyInvocation.BoundParameters  
            
    $option.ItemOptionNew =  Get-ReferenceLink $ItemOptionNew

    if ($parameters.ContainsKey("CartItem") -and $CartItem) {
        $option.CartItem = Get-ReferenceLink $CartItem
    }          
    if ($parameters.ContainsKey("Order")) {
        $option.Order = $Order
    }          
    if ($parameters.ContainsKey("ScCatItemOption") -and $ScCatItemOption) {
        $option.ScCatItemOption = Get-ReferenceLink $ScCatItemOption
    }          

    if ($parameters.ContainsKey("Value")) {
        $option.Value = $Value
    } 

    $catalogOptionsRequestBuilder.Request().AddAsync($option).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowCatalogOption">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [string]$CartItem,

        [parameter(Mandatory = $false)]
        [string]$ScCatItemOption,

        [parameter(Mandatory = $false)]
        [string]$Value
    )
        
    $catalogOptionsRequestBuilder = $ServiceNowClient.CatalogOptions()[$Id] 
    $option = New-Object -TypeName ServiceNow.Graph.Models.CatalogOption
    $parameters = $MyInvocation.BoundParameters  
    $option.Id = $Id
            
    if ($parameters.ContainsKey("Value")) {
        $option.Value = $Value
    } 
    
    if ($parameters.ContainsKey("ScCatItemOption")) {
        if ($ScCatItemOption) {
            $option.ScCatItemOption = Get-ReferenceLink $ScCatItemOption
        } else {
            $option.ScCatItemOption = Get-ReferenceLink ""
        }
    }                                                                            

    if ($parameters.ContainsKey("CartItem")) {
        if ($CartItem) {
            $option.CartItem = Get-ReferenceLink $CartItem
        } else {
            $option.CartItem = Get-ReferenceLink ""
        }
    }                                                                            

    $catalogOptionsRequestBuilder.Request().UpdateAsync($option).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowVariableOwnership">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.VariableOwnerships() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowVariableOwnership">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$RequestItem,

        [parameter(Mandatory = $true)]
        [string]$ScItemOption

    )
        
    $variableOwnershipBuilder = $ServiceNowClient.VariableOwnerships()
    $variableOwnership = New-Object -TypeName ServiceNow.Graph.Models.CatalogItemOptionMtom
            
    $variableOwnership.RequestItem =  Get-ReferenceLink $RequestItem
    $variableOwnership.ScItemOption =  Get-ReferenceLink $ScItemOption

    $variableOwnershipBuilder.Request().AddAsync($variableOwnership).GetAwaiter().GetResult()
        ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowCatalogRequest">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.CatalogRequests() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy     
          ]]>
      </CustomCommand>

    <CustomCommand Name="New-SnowCatalogRequest">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [bool]$Active,

        [parameter(Mandatory = $false)]
        [string]$ActivityDue,

        [parameter(Mandatory = $false)]
        [string]$AdditionalAssigneeList,

        [parameter(Mandatory = $false)]
        [string]$Approval,

        [parameter(Mandatory = $false)]
        [string]$AssignedTo,

        [parameter(Mandatory = $false)]
        [string]$AssignmentGroup,

        [parameter(Mandatory = $false)]
        [string]$BusinessService,

        [parameter(Mandatory = $false)]
        [string]$ClosedBy,

        [parameter(Mandatory = $false)]
        [string]$CloseNotes,

        [parameter(Mandatory = $false)]
        [string]$CmdbCi,

        [parameter(Mandatory = $false)]
        [string]$Comments,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$ContactType,

        [parameter(Mandatory = $false)]
        [string]$Contract,

        [parameter(Mandatory = $false)]
        [string]$CorrelationDisplay,

        [parameter(Mandatory = $false)]
        [string]$CorrelationId,

        [parameter(Mandatory = $false)]
        [string]$DeliveryAddress,        

        [parameter(Mandatory = $false)]
        [string]$Description,        

        [parameter(Mandatory = $false)]
        [string]$DueDate,

        [parameter(Mandatory = $false)]
        [string]$ExpectedStart,

        [parameter(Mandatory = $false)]
        [string]$FollowUp,

        [parameter(Mandatory = $false)]
        [string]$GroupList,

        [parameter(Mandatory = $false)]
        [int]$Impact,

        [parameter(Mandatory = $false)]
        [bool]$Knowledge,        

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$OpenedBy,

        [parameter(Mandatory = $false)]
        [string]$Order,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$ParentInteraction,

        [parameter(Mandatory = $false)]
        [int]$Priority,

        [parameter(Mandatory = $false)]
        [string]$RequestedDate,

        [parameter(Mandatory = $false)]
        [string]$RequestedFor,

        [parameter(Mandatory = $false)]
        [string]$RequestState,

        [parameter(Mandatory = $false)]
        [string]$ServiceOffering,

        [parameter(Mandatory = $false)]
        [string]$ShortDescription,

        [parameter(Mandatory = $false)]
        [string]$SpecialInstructions,

        [parameter(Mandatory = $false)]
        [int]$State,

        [parameter(Mandatory = $false)]
        [string]$SysDomain,

        [parameter(Mandatory = $false)]
        [int]$Urgency,

        [parameter(Mandatory = $false)]
        [string]$UserInput,

        [parameter(Mandatory = $false)]
        [string]$WatchList,        

        [parameter(Mandatory = $false)]
        [string]$WorkNotes,

        [parameter(Mandatory = $false)]
        [string]$WorkNotesList        
    )
    
    $requestBuilder = $ServiceNowClient.CatalogRequests()
    $request = New-Object -TypeName ServiceNow.Graph.Models.CatalogRequest
    $parameters = $MyInvocation.BoundParameters  

    if ($parameters.ContainsKey("Active")) {
        $request.Active = $Active
    }
    if ($parameters.ContainsKey("ActivityDue")) {
        $request.ActivityDue = $ActivityDue
    }                                 
    if ($parameters.ContainsKey("AdditionalAssigneeList")) {
        $request.AdditionalAssigneeList = $AdditionalAssigneeList
    } 
    if ($parameters.ContainsKey("Approval")) {
        $request.Approval = $Approval
    } 
    if ($parameters.ContainsKey("AssignedTo") -and $AssignedTo) {
        $request.AssignedTo = Get-ReferenceLink $AssignedTo
    }                  
    if ($parameters.ContainsKey("AssignmentGroup") -and $AssignmentGroup) {
        $request.AssignmentGroup = Get-ReferenceLink $AssignmentGroup
    }     
    if ($parameters.ContainsKey("BusinessService") -and $BusinessService) {
        $request.BusinessService = Get-ReferenceLink $BusinessService
    }              
    if ($parameters.ContainsKey("ClosedBy") -and $ClosedBy) {
        $request.ClosedBy = Get-ReferenceLink $ClosedBy
    }              
    if ($parameters.ContainsKey("CloseNotes")) {
        $request.CloseNotes = $CloseNotes
    }     
    if ($parameters.ContainsKey("CmdbCi") -and $CmdbCi) {
        $request.CmdbCi = Get-ReferenceLink $CmdbCi
    }                  
    if ($parameters.ContainsKey("Comments")) {
        $request.Comments = $Comments
    }
    if ($parameters.ContainsKey("Company") -and $Company) {
        $request.Company = Get-ReferenceLink $Company
    }    
    if ($parameters.ContainsKey("ContactType")) {
        $request.ContactType = $ContactType
    }         
    if ($parameters.ContainsKey("Contract") -and $Contract) {
        $request.Contract = Get-ReferenceLink $Contract
    }         
    if ($parameters.ContainsKey("CorrelationDisplay")) {
        $request.CorrelationDisplay = $CorrelationDisplay
    }         
    if ($parameters.ContainsKey("CorrelationId")) {
        $request.CorrelationId = $CorrelationId
    }                         
    if ($parameters.ContainsKey("DeliveryAddress")) {
        $request.DeliveryAddress = $DeliveryAddress
    }        
    if ($parameters.ContainsKey("Description")) {
        $request.Description = $Description
    }     
    if ($parameters.ContainsKey("DueDate")) {
        $request.DueDate = $DueDate
    }                                             
    if ($parameters.ContainsKey("ExpectedStart")) {
        $request.ExpectedStart = $ExpectedStart
    }                                             
    if ($parameters.ContainsKey("FollowUp")) {
        $request.FollowUp = $FollowUp
    }                                             
    if ($parameters.ContainsKey("GroupList")) {
        $request.GroupList = $GroupList
    }                                             
    if ($parameters.ContainsKey("Impact")) {
        $request.Impact = $Impact
    }    
    if ($parameters.ContainsKey("Knowledge")) {
        $request.Knowledge = $Knowledge
    }
    if ($parameters.ContainsKey("Location") -and $Location) {
        $request.Location = Get-ReferenceLink $Location
    }    
    if ($parameters.ContainsKey("OpenedBy") -and $OpenedBy) {
        $request.OpenedBy = Get-ReferenceLink $OpenedBy
    }
    if ($parameters.ContainsKey("Order")) {
        $request.Order = $Order
    }
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $request.Parent = Get-ReferenceLink $Parent
    }            
    if ($parameters.ContainsKey("ParentInteraction")) {
        $request.ParentInteraction = Get-ReferenceLink $ParentInteraction
    }
    if ($parameters.ContainsKey("Priority")) {
        $request.Priority = $Priority
    }
    if ($parameters.ContainsKey("RequestedDate")) {
        $request.RequestedDate = $RequestedDate
    }
    if ($parameters.ContainsKey("RequestedFor") -and $RequestedFor) {
        $request.RequestedFor = Get-ReferenceLink $RequestedFor
    }         
    if ($parameters.ContainsKey("RequestState")) {
        $request.RequestState = $RequestState
    }                 
    if ($parameters.ContainsKey("ServiceOffering") -and $ServiceOffering) {
        $request.ServiceOffering = Get-ReferenceLink $ServiceOffering
    }          
    if ($parameters.ContainsKey("ShortDescription")) {
        $request.ShortDescription = $ShortDescription
    }
    if ($parameters.ContainsKey("SpecialInstructions")) {
        $request.SpecialInstructions = $SpecialInstructions
    }             
    if ($parameters.ContainsKey("State")) {
        $request.State = $State
    }   
    if ($parameters.ContainsKey("SysDomain") -and $SysDomain) {
        $request.SysDomain = Get-ReferenceLink $SysDomain
    }          
    if ($parameters.ContainsKey("Urgency")) {
        $request.Urgency = $Urgency
    }
    if ($parameters.ContainsKey("UserInput")) {
        $request.UserInput = $UserInput
    }             
    if ($parameters.ContainsKey("WatchList")) {
        $request.WatchList = $WatchList
    }             
    if ($parameters.ContainsKey("WorkNotes")) {
        $request.WorkNotes = $WorkNotes
    }             
    if ($parameters.ContainsKey("WorkNotesList")) {
        $request.WorkNotesList = $WorkNotesList
    }             

    $requestBuilder.Request().AddAsync($request).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowCatalogRequest">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [bool]$Active,

        [parameter(Mandatory = $false)]
        [string]$ActivityDue,

        [parameter(Mandatory = $false)]
        [string]$AdditionalAssigneeList,

        [parameter(Mandatory = $false)]
        [string]$Approval,

        [parameter(Mandatory = $false)]
        [string]$AssignedTo,

        [parameter(Mandatory = $false)]
        [string]$AssignmentGroup,

        [parameter(Mandatory = $false)]
        [string]$BusinessService,

        [parameter(Mandatory = $false)]
        [string]$ClosedBy,

        [parameter(Mandatory = $false)]
        [string]$CloseNotes,

        [parameter(Mandatory = $false)]
        [string]$CmdbCi,

        [parameter(Mandatory = $false)]
        [string]$Comments,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$ContactType,

        [parameter(Mandatory = $false)]
        [string]$Contract,

        [parameter(Mandatory = $false)]
        [string]$CorrelationDisplay,

        [parameter(Mandatory = $false)]
        [string]$CorrelationId,

        [parameter(Mandatory = $false)]
        [string]$DeliveryAddress,        

        [parameter(Mandatory = $false)]
        [string]$Description,        

        [parameter(Mandatory = $false)]
        [string]$DueDate,

        [parameter(Mandatory = $false)]
        [string]$ExpectedStart,

        [parameter(Mandatory = $false)]
        [string]$FollowUp,

        [parameter(Mandatory = $false)]
        [string]$GroupList,

        [parameter(Mandatory = $false)]
        [int]$Impact,

        [parameter(Mandatory = $false)]
        [bool]$Knowledge,        

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$OpenedBy,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$ParentInteraction,

        [parameter(Mandatory = $false)]
        [int]$Priority,

        [parameter(Mandatory = $false)]
        [string]$RequestedDate,

        [parameter(Mandatory = $false)]
        [string]$RequestedFor,

        [parameter(Mandatory = $false)]
        [string]$RequestState,

        [parameter(Mandatory = $false)]
        [string]$ServiceOffering,

        [parameter(Mandatory = $false)]
        [string]$ShortDescription,

        [parameter(Mandatory = $false)]
        [string]$SpecialInstructions,

        [parameter(Mandatory = $false)]
        [int]$State,

        [parameter(Mandatory = $false)]
        [int]$Urgency,

        [parameter(Mandatory = $false)]
        [string]$UserInput,

        [parameter(Mandatory = $false)]
        [string]$WatchList,        

        [parameter(Mandatory = $false)]
        [string]$WorkNotes,

        [parameter(Mandatory = $false)]
        [string]$WorkNotesList        
    )
    
    $requestBuilder = $ServiceNowClient.CatalogRequests()[$Id] 
    $request = New-Object -TypeName ServiceNow.Graph.Models.CatalogRequest
    $parameters = $MyInvocation.BoundParameters  
    $request.Id = $Id

    if ($parameters.ContainsKey("Active")) {
        $request.Active = $Active
    }
    if ($parameters.ContainsKey("ActivityDue")) {
        $request.ActivityDue = $ActivityDue
    }                                 
    if ($parameters.ContainsKey("AdditionalAssigneeList")) {
        $request.AdditionalAssigneeList = $AdditionalAssigneeList
    } 
    if ($parameters.ContainsKey("Approval")) {
        $request.Approval = $Approval
    } 
    if ($parameters.ContainsKey("AssignedTo") ) {
        if ($AssignedTo) {
            $request.AssignedTo = Get-ReferenceLink $AssignedTo
        }
        else {
            $request.AssignedTo = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("AssignmentGroup")) {
        if ($AssignmentGroup) {
            $request.AssignmentGroup = Get-ReferenceLink $AssignmentGroup
        }
        else {
            $request.AssignmentGroup = Get-ReferenceLink ""
        }
    }     
    if ($parameters.ContainsKey("BusinessService")) {
        if ($BusinessService) {
            $request.BusinessService = Get-ReferenceLink $BusinessService
        }
        else {
            $request.BusinessService = Get-ReferenceLink ""
        }
    }              
    if ($parameters.ContainsKey("ClosedBy")) {
        if ($ClosedBy) {
            $request.ClosedBy = Get-ReferenceLink $ClosedBy
        }
        else {
            $request.ClosedBy = Get-ReferenceLink ""
        }
    }              
    if ($parameters.ContainsKey("CloseNotes")) {
        $request.CloseNotes = $CloseNotes
    }     
    if ($parameters.ContainsKey("CmdbCi")) {
        if ($CmdbCi) {
            $request.CmdbCi = Get-ReferenceLink $CmdbCi
        }
        else {
            $request.CmdbCi = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("Comments")) {
        $request.Comments = $Comments
    }
    if ($parameters.ContainsKey("Company")) {
        if ($Company) {
            $request.Company = Get-ReferenceLink $Company
        }
        else {
            $request.Company = Get-ReferenceLink ""
        }
    }    
    if ($parameters.ContainsKey("ContactType")) {
        $request.ContactType = $ContactType
    }         
    if ($parameters.ContainsKey("Contract")) {
        if ($Contract) {
            $request.Contract = Get-ReferenceLink $Contract
        }
        else {
            $request.Contract = Get-ReferenceLink ""
        }
    }         
    if ($parameters.ContainsKey("CorrelationDisplay")) {
        $request.CorrelationDisplay = $CorrelationDisplay
    }         
    if ($parameters.ContainsKey("CorrelationId")) {
        $request.CorrelationId = $CorrelationId
    }                         
    if ($parameters.ContainsKey("DeliveryAddress")) {
        $request.DeliveryAddress = $DeliveryAddress
    }        
    if ($parameters.ContainsKey("Description")) {
        $request.Description = $Description
    }     
    if ($parameters.ContainsKey("DueDate")) {
        $request.DueDate = $DueDate
    }                                             
    if ($parameters.ContainsKey("ExpectedStart")) {
        $request.ExpectedStart = $ExpectedStart
    }                                             
    if ($parameters.ContainsKey("FollowUp")) {
        $request.FollowUp = $FollowUp
    }   
    if ($parameters.ContainsKey("GroupList")) {
        $request.GroupList = $GroupList
    }                                                                                           
    if ($parameters.ContainsKey("Impact")) {
        $request.Impact = $Impact
    }    
    if ($parameters.ContainsKey("Knowledge")) {
        $request.Knowledge = $Knowledge
    }
    if ($parameters.ContainsKey("Location")) {
        if ($Location) {
            $request.Location = Get-ReferenceLink $Location
        }
        else {
            $request.Location = Get-ReferenceLink ""
        }
    }    
    if ($parameters.ContainsKey("OpenedBy")) {
        if ($OpenedBy) {
            $request.OpenedBy = Get-ReferenceLink $OpenedBy
        }
        else {
            $request.OpenedBy = Get-ReferenceLink ""
        }
    }

    if ($parameters.ContainsKey("Parent")) {
        if ($Parent) {
            $request.Parent = Get-ReferenceLink $Parent
        }
        else {
            $request.Parent = Get-ReferenceLink ""
        }
    }            
    if ($parameters.ContainsKey("ParentInteraction")) {
        if ($ParentInteraction) {
            $request.ParentInteraction = Get-ReferenceLink $ParentInteraction
        }
        else {
            $request.ParentInteraction = Get-ReferenceLink ""
        }
    }
    if ($parameters.ContainsKey("Priority")) {
        $request.Priority = $Priority
    }
    if ($parameters.ContainsKey("RequestedDate")) {
        $request.RequestedDate = $RequestedDate
    }
    if ($parameters.ContainsKey("RequestedFor")) {
        if ($RequestedFor) {
            $request.RequestedFor = Get-ReferenceLink $RequestedFor
        }
        else {
            $request.RequestedFor = Get-ReferenceLink ""
        }
    }         
    if ($parameters.ContainsKey("RequestState")) {
        $request.RequestState = $RequestState
    }                 
    if ($parameters.ContainsKey("ServiceOffering")) {
        if ($ServiceOffering) {
            $request.ServiceOffering = Get-ReferenceLink $ServiceOffering
        }
        else {
            $request.ServiceOffering = Get-ReferenceLink ""
        }
    }          
    if ($parameters.ContainsKey("ShortDescription")) {
        $request.ShortDescription = $ShortDescription
    }
    if ($parameters.ContainsKey("SpecialInstructions")) {
        $request.SpecialInstructions = $SpecialInstructions
    }             
    if ($parameters.ContainsKey("State")) {
        $request.State = $State
    }   
    if ($parameters.ContainsKey("Urgency")) {
        $request.Urgency = $Urgency
    }
    if ($parameters.ContainsKey("UserInput")) {
        $request.UserInput = $UserInput
    }             
    if ($parameters.ContainsKey("WatchList")) {
        $request.WatchList = $WatchList
    }             
    if ($parameters.ContainsKey("WorkNotes")) {
        $request.WorkNotes = $WorkNotes
    }             
    if ($parameters.ContainsKey("WorkNotesList")) {
        $request.WorkNotesList = $WorkNotesList
    }             

    $requestBuilder.Request().UpdateAsync($request).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      
      <CustomCommand Name="Get-SnowRequestItem">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.RequestItems() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy    
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowRequestItem">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [bool]$Active,

        [parameter(Mandatory = $false)]
        [string]$ActivityDue,

        [parameter(Mandatory = $false)]
        [string]$AdditionalAssigneeList,

        [parameter(Mandatory = $false)]
        [string]$Approval,

        [parameter(Mandatory = $false)]
        [string]$AssignedTo,

        [parameter(Mandatory = $false)]
        [string]$AssignmentGroup,

        [parameter(Mandatory = $false)]
        [string]$BusinessService,

        [parameter(Mandatory = $false)]
        [string]$CatItem,

        [parameter(Mandatory = $false)]
        [string]$ClosedBy,

        [parameter(Mandatory = $false)]
        [string]$CloseNotes,

        [parameter(Mandatory = $false)]
        [string]$CmdbCi,

        [parameter(Mandatory = $false)]
        [string]$Comments,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$ConfigurationItem,

        [parameter(Mandatory = $false)]
        [string]$ContactType,

        [parameter(Mandatory = $false)]
        [string]$Contract,

        [parameter(Mandatory = $false)]
        [string]$CorrelationDisplay,

        [parameter(Mandatory = $false)]
        [string]$CorrelationId,

        [parameter(Mandatory = $false)]
        [string]$Description,        

        [parameter(Mandatory = $false)]
        [string]$DueDate,

        [parameter(Mandatory = $false)]
        [string]$ExpectedStart,

        [parameter(Mandatory = $false)]
        [string]$FollowUp,

        [parameter(Mandatory = $false)]
        [string]$GroupList,

        [parameter(Mandatory = $false)]
        [int]$Impact,

        [parameter(Mandatory = $false)]
        [bool]$Knowledge,        

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$OpenedBy,

        [parameter(Mandatory = $false)]
        [string]$Order,

        [parameter(Mandatory = $false)]
        [string]$OrderGuide,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [int]$Priority,

        [parameter(Mandatory = $false)]
        [string]$Request,

        [parameter(Mandatory = $false)]
        [string]$RequestedFor,

        [parameter(Mandatory = $false)]
        [string]$ScCatalog,

        [parameter(Mandatory = $false)]
        [string]$ServiceOffering,
        
        [parameter(Mandatory = $false)]
        [string]$ShortDescription,

        [parameter(Mandatory = $false)]
        [int]$State,

        [parameter(Mandatory = $false)]
        [string]$SysDomain,

        [parameter(Mandatory = $false)]
        [int]$Urgency,

        [parameter(Mandatory = $false)]
        [string]$UserInput,

        [parameter(Mandatory = $false)]
        [string]$WatchList,        

        [parameter(Mandatory = $false)]
        [string]$WorkNotes,

        [parameter(Mandatory = $false)]
        [string]$WorkNotesList        
    )
    
    $requestItemBuilder = $ServiceNowClient.RequestItems()
    $requestItem = New-Object -TypeName ServiceNow.Graph.Models.RequestItem
    $parameters = $MyInvocation.BoundParameters  

    if ($parameters.ContainsKey("Active")) {
        $requestItem.Active = $Active
    }
    if ($parameters.ContainsKey("ActivityDue")) {
        $requestItem.ActivityDue = $ActivityDue
    }                                 
    if ($parameters.ContainsKey("AdditionalAssigneeList")) {
        $requestItem.AdditionalAssigneeList = $AdditionalAssigneeList
    } 
    if ($parameters.ContainsKey("Approval")) {
        $requestItem.Approval = $Approval
    } 
    if ($parameters.ContainsKey("AssignedTo") -and $AssignedTo) {
        $requestItem.AssignedTo = Get-ReferenceLink $AssignedTo
    }                  
    if ($parameters.ContainsKey("AssignmentGroup") -and $AssignmentGroup) {
        $requestItem.AssignmentGroup = Get-ReferenceLink $AssignmentGroup
    }     
    if ($parameters.ContainsKey("BusinessService") -and $BusinessService) {
        $requestItem.BusinessService = Get-ReferenceLink $BusinessService
    }              
    if ($parameters.ContainsKey("CatItem") -and $CatItem) {
        $requestItem.CatItem = Get-ReferenceLink $CatItem
    }              
    if ($parameters.ContainsKey("ClosedBy") -and $ClosedBy) {
        $requestItem.ClosedBy = Get-ReferenceLink $ClosedBy
    }              
    if ($parameters.ContainsKey("CloseNotes")) {
        $requestItem.CloseNotes = $CloseNotes
    }     
    if ($parameters.ContainsKey("CmdbCi") -and $CmdbCi) {
        $requestItem.CmdbCi = Get-ReferenceLink $CmdbCi
    }                  
    if ($parameters.ContainsKey("Comments")) {
        $requestItem.Comments = $Comments
    }
    if ($parameters.ContainsKey("Company") -and $Company) {
        $requestItem.Company = Get-ReferenceLink $Company
    }    
    if ($parameters.ContainsKey("ConfigurationItem") -and $ConfigurationItem) {
        $requestItem.ConfigurationItem = Get-ReferenceLink $ConfigurationItem
    }    
    if ($parameters.ContainsKey("ContactType")) {
        $requestItem.ContactType = $ContactType
    }         
    if ($parameters.ContainsKey("Contract") -and $Contract) {
        $requestItem.Contract = Get-ReferenceLink $Contract
    }         
    if ($parameters.ContainsKey("CorrelationDisplay")) {
        $requestItem.CorrelationDisplay = $CorrelationDisplay
    }         
    if ($parameters.ContainsKey("CorrelationId")) {
        $requestItem.CorrelationId = $CorrelationId
    }                         
    if ($parameters.ContainsKey("Description")) {
        $requestItem.Description = $Description
    }     
    if ($parameters.ContainsKey("DueDate")) {
        $requestItem.DueDate = $DueDate
    }                                             
    if ($parameters.ContainsKey("ExpectedStart")) {
        $requestItem.ExpectedStart = $ExpectedStart
    }                                             
    if ($parameters.ContainsKey("FollowUp")) {
        $requestItem.FollowUp = $FollowUp
    }                                             
    if ($parameters.ContainsKey("GroupList")) {
        $requestItem.GroupList = $GroupList
    }                                             
    if ($parameters.ContainsKey("Impact")) {
        $requestItem.Impact = $Impact
    }    
    if ($parameters.ContainsKey("Knowledge")) {
        $requestItem.Knowledge = $Knowledge
    }
    if ($parameters.ContainsKey("Location") -and $Location) {
        $requestItem.Location = Get-ReferenceLink $Location
    }    
    if ($parameters.ContainsKey("OpenedBy") -and $OpenedBy) {
        $requestItem.OpenedBy = Get-ReferenceLink $OpenedBy
    }
    if ($parameters.ContainsKey("Order")) {
        $requestItem.Order = $Order
    }
    if ($parameters.ContainsKey("OrderGuide") -and $OrderGuide) {
        $requestItem.OrderGuide = Get-ReferenceLink $OrderGuide
    }            
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $requestItem.Parent = Get-ReferenceLink $Parent
    }            
    if ($parameters.ContainsKey("Priority")) {
        $requestItem.Priority = $Priority
    }
    if ($parameters.ContainsKey("RequestedFor") -and $RequestedFor) {
        $requestItem.RequestedFor = Get-ReferenceLink $RequestedFor
    }         
    if ($parameters.ContainsKey("ScCatalog") -and $ScCatalog) {
        $requestItem.ScCatalog = Get-ReferenceLink $ScCatalog
    }          
    if ($parameters.ContainsKey("ServiceOffering") -and $ServiceOffering) {
        $requestItem.ServiceOffering = Get-ReferenceLink $ServiceOffering
    }          
    if ($parameters.ContainsKey("ShortDescription")) {
        $requestItem.ShortDescription = $ShortDescription
    }
    if ($parameters.ContainsKey("State")) {
        $requestItem.State = $State
    }   
    if ($parameters.ContainsKey("SysDomain") -and $SysDomain) {
        $requestItem.SysDomain = Get-ReferenceLink $SysDomain
    }          
    if ($parameters.ContainsKey("Urgency")) {
        $requestItem.Urgency = $Urgency
    }
    if ($parameters.ContainsKey("UserInput")) {
        $requestItem.UserInput = $UserInput
    }             
    if ($parameters.ContainsKey("WatchList")) {
        $requestItem.WatchList = $WatchList
    }             
    if ($parameters.ContainsKey("WorkNotes")) {
        $requestItem.WorkNotes = $WorkNotes
    }             
    if ($parameters.ContainsKey("WorkNotesList")) {
        $requestItem.WorkNotesList = $WorkNotesList
    }             

    $requestItemBuilder.Request().AddAsync($requestItem).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowRequestItem">
        <![CDATA[
    param (
        [Parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [bool]$Active,

        [parameter(Mandatory = $false)]
        [string]$ActivityDue,

        [parameter(Mandatory = $false)]
        [string]$AdditionalAssigneeList,

        [parameter(Mandatory = $false)]
        [string]$Approval,

        [parameter(Mandatory = $false)]
        [string]$AssignedTo,

        [parameter(Mandatory = $false)]
        [string]$AssignmentGroup,

        [parameter(Mandatory = $false)]
        [string]$BusinessService,

        [parameter(Mandatory = $false)]
        [string]$ClosedBy,

        [parameter(Mandatory = $false)]
        [string]$CloseNotes,

        [parameter(Mandatory = $false)]
        [string]$CmdbCi,

        [parameter(Mandatory = $false)]
        [string]$Comments,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$ConfigurationItem,

        [parameter(Mandatory = $false)]
        [string]$ContactType,

        [parameter(Mandatory = $false)]
        [string]$Contract,

        [parameter(Mandatory = $false)]
        [string]$CorrelationDisplay,

        [parameter(Mandatory = $false)]
        [string]$CorrelationId,

        [parameter(Mandatory = $false)]
        [string]$Description,        

        [parameter(Mandatory = $false)]
        [string]$DueDate,

        [parameter(Mandatory = $false)]
        [string]$ExpectedStart,

        [parameter(Mandatory = $false)]
        [string]$FollowUp,

        [parameter(Mandatory = $false)]
        [string]$GroupList,

        [parameter(Mandatory = $false)]
        [int]$Impact,

        [parameter(Mandatory = $false)]
        [bool]$Knowledge,        

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$OpenedBy,

        [parameter(Mandatory = $false)]
        [string]$OrderGuide,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [int]$Priority,

        [parameter(Mandatory = $false)]
        [string]$RequestedFor,

        [parameter(Mandatory = $false)]
        [string]$ServiceOffering,
        
        [parameter(Mandatory = $false)]
        [string]$ShortDescription,

        [parameter(Mandatory = $false)]
        [int]$State,

        [parameter(Mandatory = $false)]
        [int]$Urgency,

        [parameter(Mandatory = $false)]
        [string]$UserInput,

        [parameter(Mandatory = $false)]
        [string]$WatchList,        

        [parameter(Mandatory = $false)]
        [string]$WorkNotes,

        [parameter(Mandatory = $false)]
        [string]$WorkNotesList        
    )

    
    $requestItemsBuilder = $ServiceNowClient.RequestItems()[$Id] 
    $requestItem = New-Object -TypeName ServiceNow.Graph.Models.RequestItem
    $parameters = $MyInvocation.BoundParameters  
    $requestItem.Id = $Id


    if ($parameters.ContainsKey("Active")) {
        $requestItem.Active = $Active
    }
    if ($parameters.ContainsKey("ActivityDue")) {
        $requestItem.ActivityDue = $ActivityDue
    }                                 
    if ($parameters.ContainsKey("AdditionalAssigneeList")) {
        $requestItem.AdditionalAssigneeList = $AdditionalAssigneeList
    } 
    if ($parameters.ContainsKey("Approval")) {
        $requestItem.Approval = $Approval
    } 
    if ($parameters.ContainsKey("AssignedTo")) {
        if ($AssignedTo) {
            $requestItem.AssignedTo = Get-ReferenceLink $AssignedTo
        }
        else {
            $requestItem.AssignedTo = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("AssignmentGroup")) {
        if ($AssignmentGroup) {
            $requestItem.AssignmentGroup = Get-ReferenceLink $AssignmentGroup
        }
        else {
            $requestItem.AssignmentGroup = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("BusinessService")) {
        if ($BusinessService) {
            $requestItem.BusinessService = Get-ReferenceLink $BusinessService
        }
        else {
            $requestItem.BusinessService = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ClosedBy")) {
        if ($ClosedBy) {
            $requestItem.ClosedBy = Get-ReferenceLink $ClosedBy
        }
        else {
            $requestItem.ClosedBy = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("CloseNotes")) {
        $requestItem.CloseNotes = $CloseNotes
    }     
    if ($parameters.ContainsKey("CmdbCi")) {
        if ($CmdbCi) {
            $requestItem.CmdbCi = Get-ReferenceLink $CmdbCi
        }
        else {
            $requestItem.CmdbCi = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("Comments")) {
        $requestItem.Comments = $Comments
    }
    if ($parameters.ContainsKey("Company")) {
        if ($Company) {
            $requestItem.Company = Get-ReferenceLink $Company
        }
        else {
            $requestItem.Company = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ConfigurationItem")) {
        if ($ConfigurationItem) {
            $requestItem.ConfigurationItem = Get-ReferenceLink $ConfigurationItem
        }
        else {
            $requestItem.ConfigurationItem = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ContactType")) {
        $requestItem.ContactType = $ContactType
    }         
    if ($parameters.ContainsKey("Contract")) {
        if ($Contract) {
            $requestItem.Contract = Get-ReferenceLink $Contract
        }
        else {
            $requestItem.Contract = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("CorrelationDisplay")) {
        $requestItem.CorrelationDisplay = $CorrelationDisplay
    }         
    if ($parameters.ContainsKey("CorrelationId")) {
        $requestItem.CorrelationId = $CorrelationId
    }                         
    if ($parameters.ContainsKey("Description")) {
        $requestItem.Description = $Description
    }     
    if ($parameters.ContainsKey("DueDate")) {
        $requestItem.DueDate = $DueDate
    }                                             
    if ($parameters.ContainsKey("ExpectedStart")) {
        $requestItem.ExpectedStart = $ExpectedStart
    }                                             
    if ($parameters.ContainsKey("FollowUp")) {
        $requestItem.FollowUp = $FollowUp
    }                                             
    if ($parameters.ContainsKey("GroupList")) {
        $requestItem.GroupList = $GroupList
    }                                             
    if ($parameters.ContainsKey("Impact")) {
        $requestItem.Impact = $Impact
    }    
    if ($parameters.ContainsKey("Knowledge")) {
        $requestItem.Knowledge = $Knowledge
    }
    if ($parameters.ContainsKey("Location")) {
        if ($Location) {
            $requestItem.Location = Get-ReferenceLink $Location
        }
        else {
            $requestItem.Location = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("OpenedBy")) {
        if ($OpenedBy) {
            $requestItem.OpenedBy = Get-ReferenceLink $OpenedBy
        }
        else {
            $requestItem.OpenedBy = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("OrderGuide")) {
        if ($OrderGuide) {
            $requestItem.OrderGuide = Get-ReferenceLink $OrderGuide
        }
        else {
            $requestItem.OrderGuide = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("Parent")) {
        if ($Parent) {
            $requestItem.Parent = Get-ReferenceLink $Parent
        }
        else {
            $requestItem.Parent = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("Priority")) {
        $requestItem.Priority = $Priority
    }
    if ($parameters.ContainsKey("RequestedFor")) {
        if ($RequestedFor) {
            $requestItem.RequestedFor = Get-ReferenceLink $RequestedFor
        }
        else {
            $requestItem.RequestedFor = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ServiceOffering")) {
        if ($ServiceOffering) {
            $requestItem.ServiceOffering = Get-ReferenceLink $ServiceOffering
        }
        else {
            $requestItem.ServiceOffering = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ShortDescription")) {
        $requestItem.ShortDescription = $ShortDescription
    }
    if ($parameters.ContainsKey("State")) {
        $requestItem.State = $State
    }   
    if ($parameters.ContainsKey("Urgency")) {
        $requestItem.Urgency = $Urgency
    }
    if ($parameters.ContainsKey("UserInput")) {
        $requestItem.UserInput = $UserInput
    }             
    if ($parameters.ContainsKey("WatchList")) {
        $requestItem.WatchList = $WatchList
    }             
    if ($parameters.ContainsKey("WorkNotes")) {
        $requestItem.WorkNotes = $WorkNotes
    }             
    if ($parameters.ContainsKey("WorkNotesList")) {
        $requestItem.WorkNotesList = $WorkNotesList
    }             
        
    $requestItemsBuilder.Request().UpdateAsync($requestItem).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowCatalogTask">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.CatalogTasks() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy     
          ]]>
      </CustomCommand>

      

      <CustomCommand Name="New-SnowCatalogTask">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [bool]$Active,

        [parameter(Mandatory = $false)]
        [string]$ActivityDue,

        [parameter(Mandatory = $false)]
        [string]$AdditionalAssigneeList,

        [parameter(Mandatory = $false)]
        [string]$Approval,

        [parameter(Mandatory = $false)]
        [string]$AssignedTo,

        [parameter(Mandatory = $false)]
        [string]$AssignmentGroup,

        [parameter(Mandatory = $false)]
        [string]$BusinessService,

        [parameter(Mandatory = $false)]
        [string]$ClosedBy,

        [parameter(Mandatory = $false)]
        [string]$CloseNotes,

        [parameter(Mandatory = $false)]
        [string]$CmdbCi,

        [parameter(Mandatory = $false)]
        [string]$Comments,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$ContactType,

        [parameter(Mandatory = $false)]
        [string]$Contract,

        [parameter(Mandatory = $false)]
        [string]$CorrelationDisplay,

        [parameter(Mandatory = $false)]
        [string]$CorrelationId,

        [parameter(Mandatory = $false)]
        [string]$Description,        

        [parameter(Mandatory = $false)]
        [string]$DueDate,

        [parameter(Mandatory = $false)]
        [string]$ExpectedStart,

        [parameter(Mandatory = $false)]
        [string]$FollowUp,

        [parameter(Mandatory = $false)]
        [string]$GroupList,

        [parameter(Mandatory = $false)]
        [int]$Impact,

        [parameter(Mandatory = $false)]
        [bool]$Knowledge,        

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$OpenedBy,

        [parameter(Mandatory = $false)]
        [string]$Order,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [int]$Priority,

        [parameter(Mandatory = $true)]
        [string]$Request,

        [parameter(Mandatory = $false)]
        [string]$RequestItem,

        [parameter(Mandatory = $false)]
        [string]$ScCatalog,

        [parameter(Mandatory = $false)]
        [string]$ServiceOffering,
        
        [parameter(Mandatory = $false)]
        [string]$ShortDescription,

        [parameter(Mandatory = $false)]
        [int]$State,

        [parameter(Mandatory = $false)]
        [string]$SysDomain,

        [parameter(Mandatory = $false)]
        [int]$Urgency,

        [parameter(Mandatory = $false)]
        [string]$UserInput,

        [parameter(Mandatory = $false)]
        [string]$WatchList,        

        [parameter(Mandatory = $false)]
        [string]$WorkNotes,

        [parameter(Mandatory = $false)]
        [string]$WorkNotesList        
    )
    
    $catalogTaskBuilder = $ServiceNowClient.RequestItems()
    $task = New-Object -TypeName ServiceNow.Graph.Models.CatalogTask
    $parameters = $MyInvocation.BoundParameters  

    if ($parameters.ContainsKey("Active")) {
        $task.Active = $Active
    }
    if ($parameters.ContainsKey("ActivityDue")) {
        $task.ActivityDue = $ActivityDue
    }                                 
    if ($parameters.ContainsKey("AdditionalAssigneeList")) {
        $task.AdditionalAssigneeList = $AdditionalAssigneeList
    } 
    if ($parameters.ContainsKey("Approval")) {
        $task.Approval = $Approval
    } 
    if ($parameters.ContainsKey("AssignedTo") -and $AssignedTo) {
        $task.AssignedTo = Get-ReferenceLink $AssignedTo
    }                  
    if ($parameters.ContainsKey("AssignmentGroup") -and $AssignmentGroup) {
        $task.AssignmentGroup = Get-ReferenceLink $AssignmentGroup
    }     
    if ($parameters.ContainsKey("BusinessService") -and $BusinessService) {
        $task.BusinessService = Get-ReferenceLink $BusinessService
    }              
    if ($parameters.ContainsKey("ClosedBy") -and $ClosedBy) {
        $task.ClosedBy = Get-ReferenceLink $ClosedBy
    }              
    if ($parameters.ContainsKey("CloseNotes")) {
        $task.CloseNotes = $CloseNotes
    }     
    if ($parameters.ContainsKey("CmdbCi") -and $CmdbCi) {
        $task.CmdbCi = Get-ReferenceLink $CmdbCi
    }                  
    if ($parameters.ContainsKey("Comments")) {
        $task.Comments = $Comments
    }
    if ($parameters.ContainsKey("Company") -and $Company) {
        $task.Company = Get-ReferenceLink $Company
    }    
    if ($parameters.ContainsKey("ContactType")) {
        $task.ContactType = $ContactType
    }         
    if ($parameters.ContainsKey("Contract") -and $Contract) {
        $task.Contract = Get-ReferenceLink $Contract
    }         
    if ($parameters.ContainsKey("CorrelationDisplay")) {
        $task.CorrelationDisplay = $CorrelationDisplay
    }         
    if ($parameters.ContainsKey("CorrelationId")) {
        $task.CorrelationId = $CorrelationId
    }                         
    if ($parameters.ContainsKey("Description")) {
        $task.Description = $Description
    }     
    if ($parameters.ContainsKey("DueDate")) {
        $task.DueDate = $DueDate
    }                                             
    if ($parameters.ContainsKey("ExpectedStart")) {
        $task.ExpectedStart = $ExpectedStart
    }                                             
    if ($parameters.ContainsKey("FollowUp")) {
        $task.FollowUp = $FollowUp
    }                                             
    if ($parameters.ContainsKey("GroupList")) {
        $task.GroupList = $GroupList
    }                                             
    if ($parameters.ContainsKey("Impact")) {
        $task.Impact = $Impact
    }    
    if ($parameters.ContainsKey("Knowledge")) {
        $task.Knowledge = $Knowledge
    }
    if ($parameters.ContainsKey("Location") -and $Location) {
        $task.Location = Get-ReferenceLink $Location
    }    
    if ($parameters.ContainsKey("OpenedBy") -and $OpenedBy) {
        $task.OpenedBy = Get-ReferenceLink $OpenedBy
    }
    if ($parameters.ContainsKey("Order")) {
        $task.Order = $Order
    }
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $task.Parent = Get-ReferenceLink $Parent
    }            
    if ($parameters.ContainsKey("Priority")) {
        $task.Priority = $Priority
    }
    if ($parameters.ContainsKey("Request") -and $Request) {
        $task.Request = Get-ReferenceLink $Request
    }          
    if ($parameters.ContainsKey("RequestItem") -and $RequestItem) {
        $task.RequestItem = Get-ReferenceLink $RequestItem
    }          
    if ($parameters.ContainsKey("ScCatalog") -and $ScCatalog) {
        $task.ScCatalog = Get-ReferenceLink $ScCatalog
    }          
    if ($parameters.ContainsKey("ServiceOffering") -and $ServiceOffering) {
        $task.ServiceOffering = Get-ReferenceLink $ServiceOffering
    }          
    if ($parameters.ContainsKey("ShortDescription")) {
        $task.ShortDescription = $ShortDescription
    }
    if ($parameters.ContainsKey("State")) {
        $task.State = $State
    }   
    if ($parameters.ContainsKey("SysDomain") -and $SysDomain) {
        $task.SysDomain = Get-ReferenceLink $SysDomain
    }          
    if ($parameters.ContainsKey("Urgency")) {
        $task.Urgency = $Urgency
    }
    if ($parameters.ContainsKey("UserInput")) {
        $task.UserInput = $UserInput
    }             
    if ($parameters.ContainsKey("WatchList")) {
        $task.WatchList = $WatchList
    }             
    if ($parameters.ContainsKey("WorkNotes")) {
        $task.WorkNotes = $WorkNotes
    }             
    if ($parameters.ContainsKey("WorkNotesList")) {
        $task.WorkNotesList = $WorkNotesList
    }             

    $catalogTaskBuilder.Request().AddAsync($task).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

<CustomCommand Name="Set-SnowCatalogTask">
        <![CDATA[
    param (
        [Parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [bool]$Active,

        [parameter(Mandatory = $false)]
        [string]$ActivityDue,

        [parameter(Mandatory = $false)]
        [string]$AdditionalAssigneeList,

        [parameter(Mandatory = $false)]
        [string]$Approval,

        [parameter(Mandatory = $false)]
        [string]$AssignedTo,

        [parameter(Mandatory = $false)]
        [string]$AssignmentGroup,

        [parameter(Mandatory = $false)]
        [string]$BusinessService,

        [parameter(Mandatory = $false)]
        [string]$ClosedBy,

        [parameter(Mandatory = $false)]
        [string]$CloseNotes,

        [parameter(Mandatory = $false)]
        [string]$CmdbCi,

        [parameter(Mandatory = $false)]
        [string]$Comments,

        [parameter(Mandatory = $false)]
        [string]$Company,

        [parameter(Mandatory = $false)]
        [string]$ContactType,

        [parameter(Mandatory = $false)]
        [string]$Contract,

        [parameter(Mandatory = $false)]
        [string]$CorrelationDisplay,

        [parameter(Mandatory = $false)]
        [string]$CorrelationId,

        [parameter(Mandatory = $false)]
        [string]$Description,        

        [parameter(Mandatory = $false)]
        [string]$DueDate,

        [parameter(Mandatory = $false)]
        [string]$ExpectedStart,

        [parameter(Mandatory = $false)]
        [string]$FollowUp,

        [parameter(Mandatory = $false)]
        [string]$GroupList,

        [parameter(Mandatory = $false)]
        [int]$Impact,

        [parameter(Mandatory = $false)]
        [bool]$Knowledge,        

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$OpenedBy,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [int]$Priority,

        [parameter(Mandatory = $true)]
        [string]$Request,

        [parameter(Mandatory = $false)]
        [string]$RequestItem,

        [parameter(Mandatory = $false)]
        [string]$ScCatalog,

        [parameter(Mandatory = $false)]
        [string]$ServiceOffering,
        
        [parameter(Mandatory = $false)]
        [string]$ShortDescription,

        [parameter(Mandatory = $false)]
        [int]$State,

        [parameter(Mandatory = $false)]
        [int]$Urgency,

        [parameter(Mandatory = $false)]
        [string]$UserInput,

        [parameter(Mandatory = $false)]
        [string]$WatchList,        

        [parameter(Mandatory = $false)]
        [string]$WorkNotes,

        [parameter(Mandatory = $false)]
        [string]$WorkNotesList        
    )
    $catalogTaskBuilder = $ServiceNowClient.RequestItems()[$Id] 
    $task = New-Object -TypeName ServiceNow.Graph.Models.CatalogTask
    $parameters = $MyInvocation.BoundParameters  
    $task.Id = $Id


    if ($parameters.ContainsKey("Active")) {
        $task.Active = $Active
    }
    if ($parameters.ContainsKey("ActivityDue")) {
        $task.ActivityDue = $ActivityDue
    }                                 
    if ($parameters.ContainsKey("AdditionalAssigneeList")) {
        $task.AdditionalAssigneeList = $AdditionalAssigneeList
    } 
    if ($parameters.ContainsKey("Approval")) {
        $task.Approval = $Approval
    } 
    if ($parameters.ContainsKey("AssignedTo")) {
        if ($AssignedTo) {
            $task.AssignedTo = Get-ReferenceLink $AssignedTo
        }
        else {
            $task.AssignedTo = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("AssignmentGroup")) {
        if ($AssignmentGroup) {
            $task.AssignmentGroup = Get-ReferenceLink $AssignmentGroup
        }
        else {
            $task.AssignmentGroup = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("BusinessService")) {
        if ($BusinessService) {
            $task.BusinessService = Get-ReferenceLink $BusinessService
        }
        else {
            $task.BusinessService = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ClosedBy")) {
        if ($ClosedBy) {
            $task.ClosedBy = Get-ReferenceLink $ClosedBy
        }
        else {
            $task.ClosedBy = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("CloseNotes")) {
        $task.CloseNotes = $CloseNotes
    }     
    if ($parameters.ContainsKey("CmdbCi")) {
        if ($CmdbCi) {
            $task.CmdbCi = Get-ReferenceLink $CmdbCi
        }
        else {
            $task.CmdbCi = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("Comments")) {
        $task.Comments = $Comments
    }
    if ($parameters.ContainsKey("Company")) {
        if ($Company) {
            $task.Company = Get-ReferenceLink $Company
        }
        else {
            $task.Company = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ContactType")) {
        $task.ContactType = $ContactType
    }         
    if ($parameters.ContainsKey("Contract")) {
        if ($Contract) {
            $task.Contract = Get-ReferenceLink $Contract
        }
        else {
            $task.Contract = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("CorrelationDisplay")) {
        $task.CorrelationDisplay = $CorrelationDisplay
    }         
    if ($parameters.ContainsKey("CorrelationId")) {
        $task.CorrelationId = $CorrelationId
    }                         
    if ($parameters.ContainsKey("Description")) {
        $task.Description = $Description
    }     
    if ($parameters.ContainsKey("DueDate")) {
        $task.DueDate = $DueDate
    }                                             
    if ($parameters.ContainsKey("ExpectedStart")) {
        $task.ExpectedStart = $ExpectedStart
    }                                             
    if ($parameters.ContainsKey("FollowUp")) {
        $task.FollowUp = $FollowUp
    }                                             
    if ($parameters.ContainsKey("GroupList")) {
        $task.GroupList = $GroupList
    }                                             
    if ($parameters.ContainsKey("Impact")) {
        $task.Impact = $Impact
    }    
    if ($parameters.ContainsKey("Knowledge")) {
        $task.Knowledge = $Knowledge
    }
    if ($parameters.ContainsKey("Location")) {
        if ($Location) {
            $task.Location = Get-ReferenceLink $Location
        }
        else {
            $task.Location = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("OpenedBy")) {
        if ($OpenedBy) {
            $task.OpenedBy = Get-ReferenceLink $OpenedBy
        }
        else {
            $task.OpenedBy = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("Parent")) {
        if ($Parent) {
            $task.Parent = Get-ReferenceLink $Parent
        }
        else {
            $task.Parent = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("Priority")) {
        $task.Priority = $Priority
    }
    if ($parameters.ContainsKey("Request")) {
        if ($Request) {
            $task.Request = Get-ReferenceLink $Request
        }
        else {
            $task.Request = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("RequestItem")) {
        if ($RequestItem) {
            $task.RequestItem = Get-ReferenceLink $RequestItem
        }
        else {
            $task.RequestItem = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ScCatalog")) {
        if ($ScCatalog) {
            $task.ScCatalog = Get-ReferenceLink $ScCatalog
        }
        else {
            $task.ScCatalog = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ServiceOffering")) {
        if ($ServiceOffering) {
            $task.ServiceOffering = Get-ReferenceLink $ServiceOffering
        }
        else {
            $task.ServiceOffering = Get-ReferenceLink ""
        }
    }                  
    if ($parameters.ContainsKey("ShortDescription")) {
        $task.ShortDescription = $ShortDescription
    }
    if ($parameters.ContainsKey("State")) {
        $task.State = $State
    }   
    if ($parameters.ContainsKey("Urgency")) {
        $task.Urgency = $Urgency
    }
    if ($parameters.ContainsKey("UserInput")) {
        $task.UserInput = $UserInput
    }             
    if ($parameters.ContainsKey("WatchList")) {
        $task.WatchList = $WatchList
    }             
    if ($parameters.ContainsKey("WorkNotes")) {
        $task.WorkNotes = $WorkNotes
    }             
    if ($parameters.ContainsKey("WorkNotesList")) {
        $task.WorkNotesList = $WorkNotesList
    }             
        
    $catalogTaskBuilder.Request().UpdateAsync($task).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowAttachment">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter=""        

    )
    $collectionBuilder = $ServiceNowClient.Attachments()        
    $outcome = $null
    if ($Id) {
        $outcome = $collectionBuilder[$Id].Request().GetAsync().GetAwaiter().GetResult()    
    }
    else {
        $page = $collectionBuilder.Request().Filter($Filter).Top($Global:PageSize).GetAsync().GetAwaiter().GetResult()
        if ($page -and $page.CurrentPage) {
            $outcome = [System.Collections.Generic.List[ServiceNow.Graph.Models.Attachment]]$page.CurrentPage
            $nextPageRequest = $page.NextPageRequest
            while ($null -ne $nextPageRequest) {
                $nextPage = $nextPageRequest.GetAsync().GetAwaiter().GetResult()
                if ($null -ne $nextPage -and $nextPage.CurrentPage.Count -ne 0) {
                    $outcome.AddRange($nextPage.CurrentPage)
                }
                $nextPageRequest = $nextPage.NextPageRequest
            }
        }
    }
      $outcome
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowAttachment">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$FileName,

        [parameter(Mandatory = $true)]
        [string]$TableName,

        [parameter(Mandatory = $true)]
        [string]$TableSysId,
            
        [parameter(Mandatory = $true)]
        [string]$ContentType,

        [parameter(Mandatory = $true)]
        [string]$Image
    )
    
    $attachmentRequestBuilder = $ServiceNowClient.Attachments()
    $attachment = New-Object -TypeName ServiceNow.Graph.Models.Attachment

    $attachment.FileName = $FileName
    $attachment.TableName = $TableName
    $attachment.TableSysId = $TableSysId
    $attachment.ContentType = $ContentType
    $attachment.Image = $Image

    $attachmentRequestBuilder.Request().AddAsync($attachment).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

      <CustomCommand Name="Remove-SnowAttachment">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id
    )
    
    $ServiceNowClient.Attachments()[$id].Request().DeleteAsync().GetAwaiter().GetResult() | Out-Null
          ]]>
      </CustomCommand>


      <CustomCommand Name="Set-SnowUserPassword">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [String]$Id,

        [parameter(Mandatory = $true)]
        [securestring]$Password
    )
        $QueryParams = @{sysparm_input_display_value = 'true'}
        $params = New-Object -TypeName System.Collections.Generic.List[ServiceNow.Graph.Requests.Options.QueryOption]
        foreach ($queryParam in $QueryParams.GetEnumerator()) {
            $queryOption = New-Object -TypeName ServiceNow.Graph.Requests.Options.QueryOption -ArgumentList $queryParam.Key, $queryParam.Value
            $params.Add($queryOption) | Out-Null
        }
        $userRequestBuilder = $ServiceNowClient.Users()[$Id] 
        $userUpdate = New-Object -TypeName ServiceNow.Graph.Models.User
        $userUpdate.Id = $Id
        $plainPW = ""
        $ptr = [System.IntPtr]::Zero
        try {
            $ptr = [System.IntPtr]::Zero    
            $ptr = [System.Runtime.InteropServices.Marshal]::SecureStringToGlobalAllocUnicode($Password)
            $plainPW = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($ptr)
        }
        finally {
            [System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode($ptr)
        }        
        $userUpdate.UserPassword = $plainPW
        
        $userRequestBuilder.Request($params).UpdateAsync($userUpdate).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>



            <CustomCommand Name="Get-SnowUser">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.Users() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowUser">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [bool]$Active,            

        [parameter(Mandatory = $false)]
        [string]$Avatar,

        [parameter(Mandatory = $false)]
        [string]$Building,

        [parameter(Mandatory = $false)]
        [int]$CalendarIntegration,
        
        [parameter(Mandatory = $false)]
        [string]$City,
        
        [parameter(Mandatory = $false)]
        [string]$Company,
        
        [parameter(Mandatory = $false)]
        [string]$CostCenter,

        [parameter(Mandatory = $false)]
        [string]$Country,

        [parameter(Mandatory = $false)]
        [string]$DateFormat,

        [parameter(Mandatory = $false)]
        [string]$Department,

        [parameter(Mandatory = $false)]
        [string]$EduStatus,

        [parameter(Mandatory = $false)]
        [string]$Email,

        [parameter(Mandatory = $false)]
        [string]$EmployeeNumber,

        [parameter(Mandatory = $false)]
        [bool]$EnableMultifactorAuthentication,

        [parameter(Mandatory = $false)]
        [string]$FirstName,

        [parameter(Mandatory = $false)]
        [string]$Gender,

        [parameter(Mandatory = $false)]
        [string]$HomePhone,

        [parameter(Mandatory = $false)]
        [bool]$InternalIntegrationUser,
        
        [parameter(Mandatory = $false)]
        [string]$Introduction,

        [parameter(Mandatory = $false)]
        [string]$LastName,

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [string]$Manager,

        [parameter(Mandatory = $false)]
        [string]$MiddleName,

        [parameter(Mandatory = $false)]
        [string]$MobilePhone,

        [parameter(Mandatory = $false)]
        [string]$Notification,

        [parameter(Mandatory = $false)]
        [string]$Phone,

        [parameter(Mandatory = $false)]
        [string]$Photo,

        [parameter(Mandatory = $false)]
        [string]$PreferredLanguage,

        [parameter(Mandatory = $false)]
        [string]$Source,

        [parameter(Mandatory = $false)]
        [string]$State,

        [parameter(Mandatory = $false)]
        [string]$Street,
        
        [parameter(Mandatory = $false)]
        [string]$SysDomain,        

        [parameter(Mandatory = $false)]
        [string]$TimeFormat,

        [parameter(Mandatory = $false)]
        [string]$TimeZone,

        [parameter(Mandatory = $false)]
        [string]$Title,
            
        [parameter(Mandatory = $false)]
        [string]$UserName,
            
        [parameter(Mandatory = $false)]
        [bool]$Vip,

        [parameter(Mandatory = $false)]
        [bool]$WebServiceAccessOnly,

        [parameter(Mandatory = $false)]
        [string]$Zip
    )
        
    $userRequestBuilder = $ServiceNowClient.Users()
    $user = New-Object -TypeName ServiceNow.Graph.Models.User
    $parameters = $MyInvocation.BoundParameters  
            
    if ($parameters.ContainsKey("Active")) {
        $user.Active = $Active
    }
    if ($parameters.ContainsKey("Avatar")) {
        $user.Avatar = $Avatar
    }
    if ($parameters.ContainsKey("Building") -and $Building) {
        $user.Building = Get-ReferenceLink $Building
    }                      
    if ($parameters.ContainsKey("CalendarIntegration")) {
        $user.CalendarIntegration = $CalendarIntegration
    }
    if ($parameters.ContainsKey("City")) {
        $user.City = $City
    }     
    if ($parameters.ContainsKey("Company") -and $Company) {
        $user.Company = Get-ReferenceLink $Company
    }     
    if ($parameters.ContainsKey("CostCenter") -and $CostCenter) {
        $user.CostCenter = Get-ReferenceLink $CostCenter
    }     
    if ($parameters.ContainsKey("Country")) {
        $user.Country = $Country
    }
    if ($parameters.ContainsKey("DateFormat")) {
        $user.DateFormat = $DateFormat
    }     
    if ($parameters.ContainsKey("Department") -and $Department) {
        $user.Department = Get-ReferenceLink $Department
    }
    if ($parameters.ContainsKey("EduStatus")) {
        $user.EduStatus = $EduStatus
    }         
    if ($parameters.ContainsKey("Email")) {
        $user.Email = $Email
    }     
    if ($parameters.ContainsKey("EmployeeNumber")) {
        $user.EmployeeNumber = $EmployeeNumber
    }     
    if ($parameters.ContainsKey("EnableMultifactorAuthentication")) {
        $user.EnableMultifactorAuthentication = $EnableMultifactorAuthentication
    }     
    if ($parameters.ContainsKey("FirstName")) {
        $user.FirstName = $FirstName
    }
    if ($parameters.ContainsKey("Gender")) {
        $user.Gender = $Gender
    } 
    if ($parameters.ContainsKey("HomePhone")) {
        $user.HomePhone = $HomePhone
    }
    if ($parameters.ContainsKey("InternalIntegrationUser")) {
        $user.InternalIntegrationUser = $InternalIntegrationUser
    } 
    if ($parameters.ContainsKey("Introduction")) {
        $user.Introduction = $Introduction
    }     
    if ($parameters.ContainsKey("LastName")) {
        $user.LastName = $LastName
    }       
    if ($parameters.ContainsKey("Location") -and $Location) {
        $user.Location = Get-ReferenceLink $Location
    }   
    if ($parameters.ContainsKey("Manager") -and $Manager) {
        $user.Manager = Get-ReferenceLink $Manager
    }       
    if ($parameters.ContainsKey("MiddleName")) {
        $user.MiddleName = $MiddleName
    }
    if ($parameters.ContainsKey("MobilePhone")) {
        $user.MobilePhone = $MobilePhone
    } 
    if ($parameters.ContainsKey("Notification")) {
        $user.Notification = $Notification
    }     
    if ($parameters.ContainsKey("Phone")) {
        $user.Phone = $Phone
    }     
    if ($parameters.ContainsKey("Photo")) {
        $user.Photo = $Photo
    }     
    if ($parameters.ContainsKey("PreferredLanguage")) {
        $user.PreferredLanguage = $PreferredLanguage
    }     
    if ($parameters.ContainsKey("Source")) {
        $user.Source = $Source
    }
    if ($parameters.ContainsKey("State")) {
        $user.State = $State
    }
    if ($parameters.ContainsKey("Street")) {
        $user.Street = $Street
    } 
    if ($parameters.ContainsKey("SysDomain") -and $SysDomain) {
        $user.SysDomain = Get-ReferenceLink $SysDomain
    } 
    if ($parameters.ContainsKey("TimeFormat")) {
        $user.TimeFormat = $TimeFormat
    } 
    if ($parameters.ContainsKey("TimeZone")) {
        $user.TimeZone = $TimeZone
    } 
    if ($parameters.ContainsKey("Title")) {
        $user.Title = $Title
    } 
    if ($parameters.ContainsKey("UserName")) {
        $user.UserName = $UserName
    } 
    if ($parameters.ContainsKey("Vip")) {
        $user.Vip = $Vip
    } 
    if ($parameters.ContainsKey("WebServiceAccessOnly")) {
        $user.WebServiceAccessOnly = $WebServiceAccessOnly
    } 
    if ($parameters.ContainsKey("Zip")) {
        $user.Zip = $Zip
    } 

     $userRequestBuilder.Request().AddAsync($user).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Remove-SnowUser">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id
    )
        
    $ServiceNowClient.Users()[$id].DeleteAsync().GetAwaiter().GetResult() | Out-Null
            ]]>
      </CustomCommand>

  <CustomCommand Name="Set-SnowUser">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [bool]$Active,            

        [parameter(Mandatory = $false)]
        [string]$Avatar,

        [parameter(Mandatory = $false)]
        [string]$Building,

        [parameter(Mandatory = $false)]
        [int]$CalendarIntegration,
        
        [parameter(Mandatory = $false)]
        [string]$City,
        
        [parameter(Mandatory = $false)]
        [string]$Company,
        
        [parameter(Mandatory = $false)]
        [string]$CostCenter,

        [parameter(Mandatory = $false)]
        [string]$Country,

        [parameter(Mandatory = $false)]
        [string]$DateFormat,

        [parameter(Mandatory = $false)]
        [string]$Department,

        [parameter(Mandatory = $false)]
        [string]$EduStatus,

        [parameter(Mandatory = $false)]
        [string]$Email,

        [parameter(Mandatory = $false)]
        [string]$EmployeeNumber,

        [parameter(Mandatory = $false)]
        [bool]$EnableMultifactorAuthentication,

        [parameter(Mandatory = $false)]
        [string]$FirstName,

        [parameter(Mandatory = $false)]
        [string]$Gender,

        [parameter(Mandatory = $false)]
        [string]$HomePhone,

        [parameter(Mandatory = $false)]
        [bool]$InternalIntegrationUser,
        
        [parameter(Mandatory = $false)]
        [string]$Introduction,

        [parameter(Mandatory = $false)]
        [string]$LastName,

        [parameter(Mandatory = $false)]
        [string]$Location,

        [parameter(Mandatory = $false)]
        [bool]$LockedOut,

        [parameter(Mandatory = $false)]
        [string]$Manager,

        [parameter(Mandatory = $false)]
        [string]$MiddleName,

        [parameter(Mandatory = $false)]
        [string]$MobilePhone,

        [parameter(Mandatory = $false)]
        [string]$Notification,

        [parameter(Mandatory = $false)]
        [string]$Phone,

        [parameter(Mandatory = $false)]
        [string]$Photo,

        [parameter(Mandatory = $false)]
        [string]$PreferredLanguage,

        [parameter(Mandatory = $false)]
        [string]$Source,

        [parameter(Mandatory = $false)]
        [string]$State,

        [parameter(Mandatory = $false)]
        [string]$Street,
        
        [parameter(Mandatory = $false)]
        [string]$TimeFormat,

        [parameter(Mandatory = $false)]
        [string]$TimeZone,

        [parameter(Mandatory = $false)]
        [string]$Title,
            
        [parameter(Mandatory = $false)]
        [string]$UserName,
            
        [parameter(Mandatory = $false)]
        [bool]$Vip,

        [parameter(Mandatory = $false)]
        [bool]$WebServiceAccessOnly,

        [parameter(Mandatory = $false)]
        [string]$Zip
    )
        
    $userRequestBuilder = $ServiceNowClient.Users()[$Id] 
    $user = New-Object -TypeName ServiceNow.Graph.Models.User
    $parameters = $MyInvocation.BoundParameters  
    $user.Id = $Id
            
    if ($parameters.ContainsKey("Active")) {
        $user.Active = $Active
    }
    if ($parameters.ContainsKey("Avatar")) {
        $user.Avatar = $Avatar
    }
    if ($parameters.ContainsKey("Building")) {
        if ($Building) {
            $user.Building = Get-ReferenceLink $Building
        }
        else {
            $user.Building = Get-ReferenceLink ""
        }
    }                      
    if ($parameters.ContainsKey("CalendarIntegration")) {
        $user.CalendarIntegration = $CalendarIntegration
    }
    if ($parameters.ContainsKey("City")) {
        $user.City = $City
    }     
    if ($parameters.ContainsKey("Company")) {
        if ($Company) {
            $user.Company = Get-ReferenceLink $Company
        }
        else {
            $user.Company = Get-ReferenceLink ""
        }
    }                      
    if ($parameters.ContainsKey("CostCenter")) {
        if ($CostCenter) {
            $user.CostCenter = Get-ReferenceLink $CostCenter
        }
        else {
            $user.CostCenter = Get-ReferenceLink ""
        }
    }                      
    if ($parameters.ContainsKey("Country")) {
        $user.Country = $Country
    }
    if ($parameters.ContainsKey("DateFormat")) {
        $user.DateFormat = $DateFormat
    }     
    if ($parameters.ContainsKey("Department")) {
        if ($Department) {
            $user.Department = Get-ReferenceLink $Department
        }
        else {
            $user.Department = Get-ReferenceLink ""
        }
    }                      
    if ($parameters.ContainsKey("EduStatus")) {
        $user.EduStatus = $EduStatus
    }         
    if ($parameters.ContainsKey("Email")) {
        $user.Email = $Email
    }     
    if ($parameters.ContainsKey("EmployeeNumber")) {
        $user.EmployeeNumber = $EmployeeNumber
    }     
    if ($parameters.ContainsKey("EnableMultifactorAuthentication")) {
        $user.EnableMultifactorAuthentication = $EnableMultifactorAuthentication
    }     
    if ($parameters.ContainsKey("FirstName")) {
        $user.FirstName = $FirstName
    }
    if ($parameters.ContainsKey("Gender")) {
        $user.Gender = $Gender
    } 
    if ($parameters.ContainsKey("HomePhone")) {
        $user.HomePhone = $HomePhone
    }
    if ($parameters.ContainsKey("InternalIntegrationUser")) {
        $user.InternalIntegrationUser = $InternalIntegrationUser
    } 
    if ($parameters.ContainsKey("Introduction")) {
        $user.Introduction = $Introduction
    }     
    if ($parameters.ContainsKey("LastName")) {
        $user.LastName = $LastName
    }       
    if ($parameters.ContainsKey("Location")) {
        if ($Location) {
            $user.Location = Get-ReferenceLink $Location
        }
        else {
            $user.Location = Get-ReferenceLink ""
        }
    }       
    if ($parameters.ContainsKey("LockedOut")) {
        $user.LockedOut = $LockedOut
    }                          
    if ($parameters.ContainsKey("Manager")) {
        if ($Manager) {
            $user.Manager = Get-ReferenceLink $Manager
        }
        else {
            $user.Manager = Get-ReferenceLink ""
        }
    }                      
    if ($parameters.ContainsKey("MiddleName")) {
        $user.MiddleName = $MiddleName
    }
    if ($parameters.ContainsKey("MobilePhone")) {
        $user.MobilePhone = $MobilePhone
    } 
    if ($parameters.ContainsKey("Notification")) {
        $user.Notification = $Notification
    }     
    if ($parameters.ContainsKey("Phone")) {
        $user.Phone = $Phone
    }     
    if ($parameters.ContainsKey("Photo")) {
        $user.Photo = $Photo
    }     
    if ($parameters.ContainsKey("PreferredLanguage")) {
        $user.PreferredLanguage = $PreferredLanguage
    }     
    if ($parameters.ContainsKey("Source")) {
        $user.Source = $Source
    }
    if ($parameters.ContainsKey("State")) {
        $user.State = $State
    }
    if ($parameters.ContainsKey("Street")) {
        $user.Street = $Street
    } 
    if ($parameters.ContainsKey("TimeFormat")) {
        $user.TimeFormat = $TimeFormat
    } 
    if ($parameters.ContainsKey("TimeZone")) {
        $user.TimeZone = $TimeZone
    } 
    if ($parameters.ContainsKey("Title")) {
        $user.Title = $Title
    } 
    if ($parameters.ContainsKey("UserName")) {
        $user.UserName = $UserName
    } 
    if ($parameters.ContainsKey("Vip")) {
        $user.Vip = $Vip
    } 
    if ($parameters.ContainsKey("WebServiceAccessOnly")) {
        $user.WebServiceAccessOnly = $WebServiceAccessOnly
    } 
    if ($parameters.ContainsKey("Zip")) {
        $user.Zip = $Zip
    } 

   $userRequestBuilder.Request().UpdateAsync($user).GetAwaiter().GetResult()
          ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowGroup">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
    
        Get-Entity -CollectionBuilder $ServiceNowClient.UserGroups() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowGroup">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [bool]$Active,            

        [parameter(Mandatory = $false)]
        [string]$CostCenter,

        [parameter(Mandatory = $false)]
        [string]$DefaultAssignee,

        [parameter(Mandatory = $false)]
        [string]$Description,

        [parameter(Mandatory = $false)]
        [string]$Email,

        [parameter(Mandatory = $false)]
        [bool]$ExcludeManager,

        [parameter(Mandatory = $false)]
        [bool]$IncludeMembers,

        [parameter(Mandatory = $false)]
        [string]$Manager,

        [parameter(Mandatory = $false)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$Roles,

        [parameter(Mandatory = $false)]
        [string]$Source,

        [parameter(Mandatory = $false)]
        [string]$Type
    )
    
    $groupRequestBuilder = $ServiceNowClient.UserGroups()
    $group = New-Object -TypeName ServiceNow.Graph.Models.UserGroup
    $parameters = $MyInvocation.BoundParameters  

    if ($parameters.ContainsKey("Active")) {
        $group.Active = $Active
    }
    if ($parameters.ContainsKey("CostCenter") -and $CostCenter) {
        $group.CostCenter = Get-ReferenceLink $CostCenter
    }     
    if ($parameters.ContainsKey("DefaultAssignee") -and $DefaultAssignee) {
        $group.DefaultAssignee = Get-ReferenceLink $DefaultAssignee
    }         
    if ($parameters.ContainsKey("Description")) {
        $group.Description = $Description
    } 
    if ($parameters.ContainsKey("Email")) {
        $group.Email = $Email
    } 
    if ($parameters.ContainsKey("ExcludeManager")) {
        $group.ExcludeManager = $ExcludeManager
    }
    if ($parameters.ContainsKey("IncludeMembers")) {
        $group.IncludeMembers = $IncludeMembers
    }
    if ($parameters.ContainsKey("Manager") -and $Manager) {
        $group.Manager = Get-ReferenceLink $Manager
    }             
    if ($parameters.ContainsKey("Name")) {
        $group.Name = $Name
    }
    if ($parameters.ContainsKey("Parent") -and $Parent) {
        $group.Parent = Get-ReferenceLink $Parent
    }                 
    if ($parameters.ContainsKey("Roles")) {
        $group.Roles = $Roles
    } 
    if ($parameters.ContainsKey("Source")) {
        $group.Source = $Source
    }
    if ($parameters.ContainsKey("Type")) {
        $group.Type = $Type
    }

    $groupRequestBuilder.Request().AddAsync($group).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Remove-SnowGroup">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id
    )
    
    $ServiceNowClient.UserGroups()[$id].Request().DeleteAsync().GetAwaiter().GetResult() | Out-Null
            ]]>
      </CustomCommand>

      <CustomCommand Name="Set-SnowGroup">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id,

        [parameter(Mandatory = $false)]
        [bool]$Active,            

        [parameter(Mandatory = $false)]
        [string]$CostCenter,

        [parameter(Mandatory = $false)]
        [string]$DefaultAssignee,

        [parameter(Mandatory = $false)]
        [string]$Description,

        [parameter(Mandatory = $false)]
        [string]$Email,

        [parameter(Mandatory = $false)]
        [bool]$ExcludeManager,

        [parameter(Mandatory = $false)]
        [bool]$IncludeMembers,

        [parameter(Mandatory = $false)]
        [string]$Manager,

        [parameter(Mandatory = $false)]
        [string]$Name,

        [parameter(Mandatory = $false)]
        [string]$Parent,

        [parameter(Mandatory = $false)]
        [string]$Roles,

        [parameter(Mandatory = $false)]
        [string]$Source,

        [parameter(Mandatory = $false)]
        [string]$Type
    )
        
    $groupRequestBuilder = $ServiceNowClient.UserGroups()[$Id] 
    $group = New-Object -TypeName ServiceNow.Graph.Models.UserGroup
    $parameters = $MyInvocation.BoundParameters  
    $group.Id = $Id


    if ($parameters.ContainsKey("Active")) {
        $group.Active = $Active
    }
    if ($parameters.ContainsKey("CostCenter")) {
        if ($CostCenter) {
            $group.CostCenter = Get-ReferenceLink $CostCenter
        }
        else {
            $group.CostCenter = Get-ReferenceLink ""
        }
    }                          
    if ($parameters.ContainsKey("DefaultAssignee")) {
        if ($DefaultAssignee) {
            $group.DefaultAssignee = Get-ReferenceLink $DefaultAssignee
        }
        else {
            $group.DefaultAssignee = Get-ReferenceLink ""
        }
    }                                  
    if ($parameters.ContainsKey("Description")) {
        $group.Description = $Description
    } 
    if ($parameters.ContainsKey("Email")) {
        $group.Email = $Email
    } 
    if ($parameters.ContainsKey("ExcludeManager")) {
        $group.ExcludeManager = $ExcludeManager
    }
    if ($parameters.ContainsKey("IncludeMembers")) {
        $group.IncludeMembers = $IncludeMembers
    }
    if ($parameters.ContainsKey("Manager")) {
        if ($Manager) {
            $group.Manager = Get-ReferenceLink $Manager
        }
        else {
            $group.Manager = Get-ReferenceLink ""
        }
    }                                      
    if ($parameters.ContainsKey("Name")) {
        $group.Name = $Name
    }
    if ($parameters.ContainsKey("Parent")) {
        if ($Parent) {
            $group.Parent = Get-ReferenceLink $Parent
        }
        else {
            $group.Parent = Get-ReferenceLink ""
        }
    }                                      
    if ($parameters.ContainsKey("Roles")) {
        $group.Roles = $Roles
    } 

    if ($parameters.ContainsKey("Source")) {
        $group.Source = $Source
    }
    if ($parameters.ContainsKey("Type")) {
        $group.Type = $Type
    }

    $groupRequestBuilder.Request().UpdateAsync($group).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowGroupMembership">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,
        
        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
        
        
    )
   Get-Entity -CollectionBuilder $ServiceNowClient.Memberships() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
          ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowGroupMembership">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Group,

        [parameter(Mandatory = $true)]
        [string]$User
    )
    $membershipsRequestBuilder = $ServiceNowClient.Memberships()
    $membership = New-Object -TypeName ServiceNow.Graph.Models.UserGroupMembership

    $membership.User = Get-ReferenceLink $User
    $membership.Group = Get-ReferenceLink $Group

    $membershipsRequestBuilder.Request().AddAsync($membership).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Remove-SnowGroupMembership">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id
    )
    
    $ServiceNowClient.Memberships()[$id].Request().DeleteAsync().GetAwaiter().GetResult() | Out-Null
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowRole">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
  
        Get-Entity -CollectionBuilder $ServiceNowClient.Roles() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
            ]]>
      </CustomCommand>


      <CustomCommand Name="Get-SnowRoleHasGroup">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )

    Get-Entity -CollectionBuilder $ServiceNowClient.GroupHasRoles() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
            ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowRoleHasGroup">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Role,

        [parameter(Mandatory = $true)]
        [string]$Group       
    )
    $membership = New-Object -TypeName ServiceNow.Graph.Models.GroupHasRole

    $membership.Group = Get-ReferenceLink $Group
    $membership.Role = Get-ReferenceLink $Role

    $ServiceNowClient.GroupHasRoles().Request().AddAsync($membership).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Remove-SnowRoleHasGroup">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id
    )
    
    $ServiceNowClient.GroupHasRoles()[$id].Request().DeleteAsync().GetAwaiter().GetResult() | Out-Null
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowRoleHasUser">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.UserHasRoles() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
            ]]>
      </CustomCommand>

      <CustomCommand Name="New-SnowRoleHasUser">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Role,

        [parameter(Mandatory = $true)]
        [string]$User,

        [parameter(Mandatory = $false)]
        [string]$State        
    )
    $parameters = $MyInvocation.BoundParameters  
    $membership = New-Object -TypeName ServiceNow.Graph.Models.UserHasRole

    $membership.User = Get-ReferenceLink $User
    $membership.Role = Get-ReferenceLink $Role

    if ($parameters.ContainsKey("State")) {
        $membership.State = $State
    }
    $ServiceNowClient.UserHasRoles().Request().AddAsync($membership).GetAwaiter().GetResult()
            ]]>
      </CustomCommand>

      <CustomCommand Name="Remove-SnowRoleHasUser">
        <![CDATA[
    param (
        [parameter(Mandatory = $true)]
        [string]$Id
    )
    
    $ServiceNowClient.UserHasRoles()[$id].Request().DeleteAsync().GetAwaiter().GetResult() | Out-Null
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-SnowRoleHasRole">
        <![CDATA[
    param (
        [parameter(Mandatory = $false)]
        [String]$Id,

        [parameter(Mandatory = $false)]
        [String]$Filter,

        [parameter(Mandatory = $false)]
        [String]$Select,

        [parameter(Mandatory = $false)]
        [String]$OrderBy
    )
        
        Get-Entity -CollectionBuilder $ServiceNowClient.RoleHasRoles() -Id $Id -Filter $Filter -Select $Select -OrderBy $OrderBy
            ]]>
      </CustomCommand>

      <CustomCommand Name="Get-ServiceNowClient">
        <![CDATA[
    param (
        [parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $false)]
        [ValidateNotNullOrEmpty()]
        [String]$Domain,

        [parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $false)]
        [ValidateNotNullOrEmpty()]
        [String]$ClientId, 

        [parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $false)]
        [ValidateNotNullOrEmpty()]
        [securestring]$ClientSecret,        

        [parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $false)]
        [ValidateNotNullOrEmpty()]
        [ValidateScript( { if ( -Not (Test-Path -Path $_) ) {
                    throw "File $_  does not exist"
                }
                return $true })]
        [String]$LibraryPath, 

        [parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $false)]
        [ValidateNotNullOrEmpty()]
        [String]$UserName, 

        [parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $false)]
        [ValidateNotNullOrEmpty()]
        [securestring]$UserPassword,		
		  
        [parameter(Mandatory = $false, ValueFromPipelineByPropertyName = $false)]
        [Int]$PageSize = 1000
    )

    if ($null -eq $Global:ServiceNowClient) {
        # Initialize the client
        $plainClientSecret = ""
        $ptr = [System.IntPtr]::Zero
        try {
            $ptr = [System.IntPtr]::Zero    
            $ptr = [System.Runtime.InteropServices.Marshal]::SecureStringToGlobalAllocUnicode($ClientSecret)
            $plainClientSecret = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($ptr)
        }
        finally {
            [System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode($ptr)
        }
		  
        $plainUserPassword = ""
        $ptrUserPassword = [System.IntPtr]::Zero
        try {
            $ptrUserPassword = [System.IntPtr]::Zero    
            $ptrUserPassword = [System.Runtime.InteropServices.Marshal]::SecureStringToGlobalAllocUnicode($UserPassword)
            $plainUserPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($ptrUserPassword)
        }
        finally {
            [System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode($ptrUserPassword)
        }		  
        Add-Type -Path $LibraryPath
        $authenticationProvider = New-Object -TypeName ServiceNow.Graph.Authentication.ClientCredentialProvider -ArgumentList $Domain, $ClientId, $plainClientSecret, $UserName, $plainUserPassword
        # Last parameter is the version that is mangled in the API Gateway URL
        $Global:ServiceNowClient = New-Object -TypeName ServiceNow.Graph.Requests.ServiceNowClient -ArgumentList $Domain, $authenticationProvider, $null
        $Global:PageSize = $PageSize
    }
          ]]>
      </CustomCommand>
      <CustomCommand Name="Remove-ServiceNowClient">
        <![CDATA[
         # $Global:ServiceNowClient = $null
      ]]>
      </CustomCommand>
    </CustomCommands>
    <PredefinedCommands></PredefinedCommands>
    <EnvironmentInitialization>

      <Connect>
        <CommandSequence>
          <Item Command="Get-ServiceNowClient" Order="1">
            <SetParameter Param="Domain" Source="ConnectionParameter" Value="Domain" />
            <SetParameter Param="ClientId" Source="ConnectionParameter" Value="ClientId" />
            <SetParameter Param="ClientSecret" Source="ConnectionParameter" Value="ClientSecret"
                          ConversionMethod="ToSecureString" />
            <SetParameter Param="UserName" Source="ConnectionParameter" Value="UserName" />
            <SetParameter Param="UserPassword" Source="ConnectionParameter" Value="UserPassword"
                          ConversionMethod="ToSecureString" />
            <SetParameter Param="LibraryPath" Source="ConnectionParameter" Value="LibraryPath" />
            <SetParameter Param="PageSize" Source="ConnectionParameter" Value="PageSize" DataType="Int" />
          </Item>
        </CommandSequence>
      </Connect>

      <Disconnect>
        <CommandSequence>
          <Item Command="Remove-ServiceNowClient" Order="1" />
        </CommandSequence>
      </Disconnect>

    </EnvironmentInitialization>
  </Initialization>
  <Schema>

    <Class Name="BusinessUnit">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="Id" />
            <Bind CommandResultOf="New-SnowBusinessUnit" Path="Id" />
            <Bind CommandResultOf="Set-SnowBusinessUnit" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowBusinessUnit" Parameter="Id" />
            <Map ToCommand="Set-SnowBusinessUnit" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="Name" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBusinessUnit" Method="Insert" />
            <ModBy Command="Set-SnowBusinessUnit" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBusinessUnit" Parameter="Name" />
            <Map ToCommand="Set-SnowBusinessUnit" Parameter="Name" />
          </CommandMappings>
        </Property>

        <Property Name="BusinessUnitHead" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="BuHead.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBusinessUnit" Method="Insert" />
            <ModBy Command="Set-SnowBusinessUnit" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBusinessUnit" Parameter="BuHead" />
            <Map ToCommand="Set-SnowBusinessUnit" Parameter="BuHead" />
          </CommandMappings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="Company.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBusinessUnit" Method="Insert" />
            <ModBy Command="Set-SnowBusinessUnit" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBusinessUnit" Parameter="Company" />
            <Map ToCommand="Set-SnowBusinessUnit" Parameter="Company" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBusinessUnit" Method="Insert" />
            <ModBy Command="Set-SnowBusinessUnit" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBusinessUnit" Parameter="Parent" />
            <Map ToCommand="Set-SnowBusinessUnit" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="Description" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBusinessUnit" Method="Insert" />
            <ModBy Command="Set-SnowBusinessUnit" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBusinessUnit" Parameter="Description" />
            <Map ToCommand="Set-SnowBusinessUnit" Parameter="Description" />
          </CommandMappings>
        </Property>

        <Property Name="HierarchyLevel" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="HierarchyLevel" />
          </ReturnBindings>
        </Property>

        <Property Name="SysDomain" DataType="String" AccessConstraint="ReadAndInsertOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="SysDomain.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBusinessUnit" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBusinessUnit" Parameter="SysDomain" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBusinessUnit" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowBusinessUnit">
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="business_unit_filter" />
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,name,parent" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowBusinessUnit" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowBusinessUnit" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowBusinessUnit" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="ConfigurationItem">
      <Properties>
        <Property Name="Id" DataType="String" IsUniqueKey="true" IsMandatory="false" AccessConstraint="ReadOnly"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowConfigurationItem" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="SysDomain" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="SysDomain.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="SysClassPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="SysClassPath" />
          </ReturnBindings>
        </Property>

        <Property Name="Asset" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Asset.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="AssetTag" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="AssetTag" />
          </ReturnBindings>
        </Property>

        <Property Name="Assigned" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Assigned" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignedTo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="AssignedTo.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignmentGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="AssignmentGroup.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="AttestationScore" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="AttestationScore" />
          </ReturnBindings>
        </Property>

        <Property Name="AttestationStatus" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="AttestationStatus" />
          </ReturnBindings>
        </Property>

        <Property Name="Attested" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Attested" />
          </ReturnBindings>
        </Property>

        <Property Name="AttestedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="AttestedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="AttestedDate" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="AttestedDate" />
          </ReturnBindings>
        </Property>

        <Property Name="Attributes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Attributes" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessUnit" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="BusinessUnit.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CanPrint" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="CanPrint" />
          </ReturnBindings>
        </Property>

        <Property Name="Category" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Category" />
          </ReturnBindings>
        </Property>

        <Property Name="ApprovalGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="ApprovalGroup.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CheckedIn" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="CheckedIn.Value" />
          </ReturnBindings>
        </Property>

        <Property Name="CheckedOut" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="CheckedOut" />
          </ReturnBindings>
        </Property>

        <Property Name="Comments" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Comments" />
          </ReturnBindings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Company.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CorrelationId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="CorrelationId" />
          </ReturnBindings>
        </Property>

        <Property Name="Cost" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Cost" />
          </ReturnBindings>
        </Property>

        <Property Name="CostCc" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="CostCc" />
          </ReturnBindings>
        </Property>

        <Property Name="CostCenter" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="CostCenter.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryDate" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="DeliveryDate" />
          </ReturnBindings>
        </Property>

        <Property Name="Department" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Department.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DiscoverySource" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="DiscoverySource" />
          </ReturnBindings>
        </Property>

        <Property Name="DnsDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="DnsDomain" />
          </ReturnBindings>
        </Property>

        <Property Name="Due" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Due" />
          </ReturnBindings>
        </Property>

        <Property Name="DueIn" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="DueIn" />
          </ReturnBindings>
        </Property>

        <Property Name="DuplicateOf" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="DuplicateOf.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Environment" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Environment" />
          </ReturnBindings>
        </Property>

        <Property Name="FaultCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="FaultCount" />
          </ReturnBindings>
        </Property>

        <Property Name="FirstDiscovered" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="FirstDiscovered" />
          </ReturnBindings>
        </Property>

        <Property Name="Fqdn" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Fqdn" />
          </ReturnBindings>
        </Property>

        <Property Name="GlAccount" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="GlAccount" />
          </ReturnBindings>
        </Property>

        <Property Name="InstallDate" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="InstallDate" />
          </ReturnBindings>
        </Property>

        <Property Name="InstallStatus" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="InstallStatus" />
          </ReturnBindings>
        </Property>

        <Property Name="InvoiceNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="InvoiceNumber" />
          </ReturnBindings>
        </Property>

        <Property Name="IpAddress" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="IpAddress" />
          </ReturnBindings>
        </Property>

        <Property Name="Justification" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Justification" />
          </ReturnBindings>
        </Property>

        <Property Name="LastDiscovered" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="LastDiscovered" />
          </ReturnBindings>
        </Property>

        <Property Name="LeaseId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="LeaseId" />
          </ReturnBindings>
        </Property>

        <Property Name="LifeCycleStage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="LifeCycleStage.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="LifeCycleStageStatus" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="LifeCycleStageStatus.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Location" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Location.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="MacAddress" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="MacAddress" />
          </ReturnBindings>
        </Property>

        <Property Name="MaintenanceSchedule" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="MaintenanceSchedule.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ManagedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="ManagedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ManagedByGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="ManagedByGroup.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Manufacturer" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Manufacturer.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ModelId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="ModelId.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ModelNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="ModelNumber" />
          </ReturnBindings>
        </Property>

        <Property Name="Monitor" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Monitor" />
          </ReturnBindings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Name" />
          </ReturnBindings>
        </Property>

        <Property Name="OperationalStatus" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="OperationalStatus" />
          </ReturnBindings>
        </Property>

        <Property Name="OrderDate" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="OrderDate" />
          </ReturnBindings>
        </Property>

        <Property Name="OwnedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="OwnedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="PoNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="PoNumber" />
          </ReturnBindings>
        </Property>

        <Property Name="PurchaseDate" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="PurchaseDate" />
          </ReturnBindings>
        </Property>

        <Property Name="Schedule" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Schedule.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SerialNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="SerialNumber" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Description" />
          </ReturnBindings>
        </Property>

        <Property Name="SkipSync" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="SkipSync" />
          </ReturnBindings>
        </Property>

        <Property Name="StartDate" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="StartDate" />
          </ReturnBindings>
        </Property>

        <Property Name="Subcategory" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Subcategory" />
          </ReturnBindings>
        </Property>

        <Property Name="SupportedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="SupportedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SupportGroup" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="SupportGroup.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Unverified" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Unverified" />
          </ReturnBindings>
        </Property>

        <Property Name="Vendor" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="Vendor.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="WarrantyExpiration" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowConfigurationItem" Path="WarrantyExpiration" />
          </ReturnBindings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowConfigurationItem">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,name,duplicateof" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="cmdb_ci_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowConfigurationItem" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
      </MethodConfiguration>

    </Class>
    <Class Name="Building">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="Id" />
            <Bind CommandResultOf="New-SnowBuilding" Path="Id" />
            <Bind CommandResultOf="Set-SnowBuilding" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowBuilding" Parameter="Id" />
            <Map ToCommand="Set-SnowBuilding" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Contact" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="Contact.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBuilding" Method="Insert" />
            <ModBy Command="Set-SnowBuilding" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBuilding" Parameter="Contact" />
            <Map ToCommand="Set-SnowBuilding" Parameter="Contact" />
          </CommandMappings>
        </Property>

        <Property Name="Floors" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="Floors" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBuilding" Method="Insert" />
            <ModBy Command="Set-SnowBuilding" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBuilding" Parameter="Floors" />
            <Map ToCommand="Set-SnowBuilding" Parameter="Floors" />
          </CommandMappings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="Location.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBuilding" Method="Insert" />
            <ModBy Command="Set-SnowBuilding" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBuilding" Parameter="Location" />
            <Map ToCommand="Set-SnowBuilding" Parameter="Location" />
          </CommandMappings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="Name" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBuilding" Method="Insert" />
            <ModBy Command="Set-SnowBuilding" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBuilding" Parameter="Name" />
            <Map ToCommand="Set-SnowBuilding" Parameter="Name" />
          </CommandMappings>
        </Property>

        <Property Name="Notes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowBuilding" Path="Notes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowBuilding" Method="Insert" />
            <ModBy Command="Set-SnowBuilding" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowBuilding" Parameter="Notes" />
            <Map ToCommand="Set-SnowBuilding" Parameter="Notes" />
          </CommandMappings>
        </Property>
      </Properties>
      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowBuilding">
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="building_filter" />
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,name,contact,location" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowBuilding" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowBuilding" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowBuilding" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="CostCenter">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="Id" />
            <Bind CommandResultOf="New-SnowCostCenter" Path="Id" />
            <Bind CommandResultOf="Set-SnowCostCenter" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowCostCenter" Parameter="Id" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="SysDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="SysDomain.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="SysDomain" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="AccountNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="AccountNumber" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
            <ModBy Command="Set-SnowCostCenter" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="AccountNumber" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="AccountNumber" />
          </CommandMappings>
        </Property>

        <Property Name="Code" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="Code" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
            <ModBy Command="Set-SnowCostCenter" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="Code" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="Code" />
          </CommandMappings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="Location.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
            <ModBy Command="Set-SnowCostCenter" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="Location" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="Location" />
          </CommandMappings>
        </Property>

        <Property Name="Manager" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="Manager.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
            <ModBy Command="Set-SnowCostCenter" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="Manager" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="Manager" />
          </CommandMappings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="Name" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
            <ModBy Command="Set-SnowCostCenter" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="Name" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="Name" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
            <ModBy Command="Set-SnowCostCenter" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="Parent" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="ValidFrom" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="ValidFrom" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
            <ModBy Command="Set-SnowCostCenter" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="ValidFrom" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="ValidFrom" />
          </CommandMappings>
        </Property>

        <Property Name="ValidTo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCostCenter" Path="ValidTo" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCostCenter" Method="Insert" />
            <ModBy Command="Set-SnowCostCenter" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCostCenter" Parameter="ValidTo" />
            <Map ToCommand="Set-SnowCostCenter" Parameter="ValidTo" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowCostCenter">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,name,parent,location,manager" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="cmn_cost_center_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowCostCenter" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowCostCenter" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowCostCenter" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="Department">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="Id" />
            <Bind CommandResultOf="New-SnowDepartment" Path="Id" />
            <Bind CommandResultOf="Set-SnowDepartment" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowDepartment" Parameter="Id" />
            <Map ToCommand="Set-SnowDepartment" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessUnit" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="BusinessUnit.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="BusinessUnit" />
            <Map ToCommand="Set-SnowDepartment" Parameter="BusinessUnit" />
          </CommandMappings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="Company.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="Company" />
            <Map ToCommand="Set-SnowDepartment" Parameter="Company" />
          </CommandMappings>
        </Property>

        <Property Name="CostCenter" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="CostCenter.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="CostCenter" />
            <Map ToCommand="Set-SnowDepartment" Parameter="CostCenter" />
          </CommandMappings>
        </Property>

        <Property Name="DeptHead" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="DeptHead.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="DeptHead" />
            <Map ToCommand="Set-SnowDepartment" Parameter="DeptHead" />
          </CommandMappings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="Description" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="Description" />
            <Map ToCommand="Set-SnowDepartment" Parameter="Description" />
          </CommandMappings>
        </Property>

        <Property Name="HeadCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="HeadCount" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="HeadCount" />
            <Map ToCommand="Set-SnowDepartment" Parameter="HeadCount" />
          </CommandMappings>
        </Property>

        <Property Name="DepartmentId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="DepartmentId" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="DepartmentId" />
            <Map ToCommand="Set-SnowDepartment" Parameter="DepartmentId" />
          </CommandMappings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="Name" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="Name" />
            <Map ToCommand="Set-SnowDepartment" Parameter="Name" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="Parent" />
            <Map ToCommand="Set-SnowDepartment" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="PrimaryContact" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowDepartment" Path="PrimaryContact.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowDepartment" Method="Insert" />
            <ModBy Command="Set-SnowDepartment" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowDepartment" Parameter="PrimaryContact" />
            <Map ToCommand="Set-SnowDepartment" Parameter="PrimaryContact" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowDepartment">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,name,parent" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="cmn_department_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowDepartment" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowDepartment" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowDepartment" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="Location">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Id" />
            <Bind CommandResultOf="New-SnowLocation" Path="Id" />
            <Bind CommandResultOf="Set-SnowLocation" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowLocation" Parameter="Id" />
            <Map ToCommand="Set-SnowLocation" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="City" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="City" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="City" />
            <Map ToCommand="Set-SnowLocation" Parameter="City" />
          </CommandMappings>
        </Property>

        <Property Name="CmnLocationSource" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="CmnLocationSource" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="CmnLocationSource" />
            <Map ToCommand="Set-SnowLocation" Parameter="CmnLocationSource" />
          </CommandMappings>
        </Property>

        <Property Name="CmnLocationType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="CmnLocationType" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="CmnLocationType" />
            <Map ToCommand="Set-SnowLocation" Parameter="CmnLocationType" />
          </CommandMappings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Company.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Company" />
            <Map ToCommand="Set-SnowLocation" Parameter="Company" />
          </CommandMappings>
        </Property>

        <Property Name="Contact" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Contact.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Contact" />
            <Map ToCommand="Set-SnowLocation" Parameter="Contact" />
          </CommandMappings>
        </Property>

        <Property Name="CoordinatesRetrievedOn" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="CoordinatesRetrievedOn" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="CoordinatesRetrievedOn" />
            <Map ToCommand="Set-SnowLocation" Parameter="CoordinatesRetrievedOn" />
          </CommandMappings>
        </Property>

        <Property Name="Country" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Country" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Country" />
            <Map ToCommand="Set-SnowLocation" Parameter="Country" />
          </CommandMappings>
        </Property>

        <Property Name="Duplicate" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Duplicate" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Duplicate" />
            <Map ToCommand="Set-SnowLocation" Parameter="Duplicate" />
          </CommandMappings>
        </Property>

        <Property Name="FaxPhone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="FaxPhone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="FaxPhone" />
            <Map ToCommand="Set-SnowLocation" Parameter="FaxPhone" />
          </CommandMappings>
        </Property>

        <Property Name="FullName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="FullName" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="FullName" />
            <Map ToCommand="Set-SnowLocation" Parameter="FullName" />
          </CommandMappings>
        </Property>

        <Property Name="Latitude" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Latitude" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Latitude" />
            <Map ToCommand="Set-SnowLocation" Parameter="Latitude" />
          </CommandMappings>
        </Property>

        <Property Name="LatLongError" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="LatLongError" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="LatLongError" />
            <Map ToCommand="Set-SnowLocation" Parameter="LatLongError" />
          </CommandMappings>
        </Property>

        <Property Name="LifeCycleStage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="LifeCycleStage.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="LifeCycleStage" />
            <Map ToCommand="Set-SnowLocation" Parameter="LifeCycleStage" />
          </CommandMappings>
        </Property>

        <Property Name="LifeCycleStageStatus" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="LifeCycleStageStatus.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="LifeCycleStageStatus" />
            <Map ToCommand="Set-SnowLocation" Parameter="LifeCycleStageStatus" />
          </CommandMappings>
        </Property>

        <Property Name="Longitude" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Longitude" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Longitude" />
            <Map ToCommand="Set-SnowLocation" Parameter="Longitude" />
          </CommandMappings>
        </Property>

        <Property Name="ManagedByGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="ManagedByGroup.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="ManagedByGroup" />
            <Map ToCommand="Set-SnowLocation" Parameter="ManagedByGroup" />
          </CommandMappings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Name" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Name" />
            <Map ToCommand="Set-SnowLocation" Parameter="Name" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Parent" />
            <Map ToCommand="Set-SnowLocation" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="Phone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Phone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Phone" />
            <Map ToCommand="Set-SnowLocation" Parameter="Phone" />
          </CommandMappings>
        </Property>

        <Property Name="PhoneTerritory" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="PhoneTerritory.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="PhoneTerritory" />
            <Map ToCommand="Set-SnowLocation" Parameter="PhoneTerritory" />
          </CommandMappings>
        </Property>

        <Property Name="PrimaryLocation" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="PrimaryLocation.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="PrimaryLocation" />
            <Map ToCommand="Set-SnowLocation" Parameter="PrimaryLocation" />
          </CommandMappings>
        </Property>

        <Property Name="State" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="State" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="State" />
            <Map ToCommand="Set-SnowLocation" Parameter="State" />
          </CommandMappings>
        </Property>

        <Property Name="StockRoom" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="StockRoom" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="StockRoom" />
            <Map ToCommand="Set-SnowLocation" Parameter="StockRoom" />
          </CommandMappings>
        </Property>

        <Property Name="Street" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Street" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Street" />
            <Map ToCommand="Set-SnowLocation" Parameter="Street" />
          </CommandMappings>
        </Property>

        <Property Name="TimeZone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="TimeZone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="TimeZone" />
            <Map ToCommand="Set-SnowLocation" Parameter="TimeZone" />
          </CommandMappings>
        </Property>

        <Property Name="Zip" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLocation" Path="Zip" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLocation" Method="Insert" />
            <ModBy Command="Set-SnowLocation" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="Zip" />
            <Map ToCommand="Set-SnowLocation" Parameter="Zip" />
          </CommandMappings>
        </Property>

      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowLocation">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,name,parent,primarylocation" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="cmn_location_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowLocation" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowLocation" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowLocation" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="Company">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Id" />
            <Bind CommandResultOf="New-SnowCompany" Path="Id" />
            <Bind CommandResultOf="Set-SnowCompany" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowCompany" Parameter="Id" />
            <Map ToCommand="Set-SnowCompany" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="AppleIcon" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="AppleIcon" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="AppleIcon" />
            <Map ToCommand="Set-SnowCompany" Parameter="AppleIcon" />
          </CommandMappings>
        </Property>

        <Property Name="BannerImage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="BannerImage" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="BannerImage" />
            <Map ToCommand="Set-SnowCompany" Parameter="BannerImage" />
          </CommandMappings>
        </Property>

        <Property Name="BannerImageLight" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="BannerImageLight" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="BannerImageLight" />
            <Map ToCommand="Set-SnowCompany" Parameter="BannerImageLight" />
          </CommandMappings>
        </Property>

        <Property Name="BannerText" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="BannerText" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="BannerText" />
            <Map ToCommand="Set-SnowCompany" Parameter="BannerText" />
          </CommandMappings>
        </Property>

        <Property Name="City" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="City" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="City" />
            <Map ToCommand="Set-SnowCompany" Parameter="City" />
          </CommandMappings>
        </Property>

        <Property Name="Contact" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Contact.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Contact" />
            <Map ToCommand="Set-SnowCompany" Parameter="Contact" />
          </CommandMappings>
        </Property>

        <Property Name="CoordinatesRetrievedOn" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="CoordinatesRetrievedOn" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="CoordinatesRetrievedOn" />
            <Map ToCommand="Set-SnowCompany" Parameter="CoordinatesRetrievedOn" />
          </CommandMappings>
        </Property>

        <Property Name="Country" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Country" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Country" />
            <Map ToCommand="Set-SnowCompany" Parameter="Country" />
          </CommandMappings>
        </Property>

        <Property Name="Customer" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Customer" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Customer" />
            <Map ToCommand="Set-SnowCompany" Parameter="Customer" />
          </CommandMappings>
        </Property>

        <Property Name="Discount" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Discount" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Discount" />
            <Map ToCommand="Set-SnowCompany" Parameter="Discount" />
          </CommandMappings>
        </Property>

        <Property Name="FaxPhone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="FaxPhone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLocation" Parameter="FaxPhone" />
            <Map ToCommand="Set-SnowLocation" Parameter="FaxPhone" />
          </CommandMappings>
        </Property>

        <Property Name="FiscalYear" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="FiscalYear" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="FiscalYear" />
            <Map ToCommand="Set-SnowCompany" Parameter="FiscalYear" />
          </CommandMappings>
        </Property>

        <Property Name="Latitude" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Latitude" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Latitude" />
            <Map ToCommand="Set-SnowCompany" Parameter="Latitude" />
          </CommandMappings>
        </Property>

        <Property Name="LatLongError" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="LatLongError" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="LatLongError" />
            <Map ToCommand="Set-SnowCompany" Parameter="LatLongError" />
          </CommandMappings>
        </Property>

        <Property Name="Longitude" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Longitude" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Longitude" />
            <Map ToCommand="Set-SnowCompany" Parameter="Longitude" />
          </CommandMappings>
        </Property>

        <Property Name="Manufacturer" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Manufacturer" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Manufacturer" />
            <Map ToCommand="Set-SnowCompany" Parameter="Manufacturer" />
          </CommandMappings>
        </Property>

        <Property Name="MarketCap" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="MarketCap" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="MarketCap" />
            <Map ToCommand="Set-SnowCompany" Parameter="MarketCap" />
          </CommandMappings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Name" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Name" />
            <Map ToCommand="Set-SnowCompany" Parameter="Name" />
          </CommandMappings>
        </Property>

        <Property Name="Notes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Notes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Notes" />
            <Map ToCommand="Set-SnowCompany" Parameter="Notes" />
          </CommandMappings>
        </Property>

        <Property Name="NumEmployees" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="NumEmployees" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="NumEmployees" />
            <Map ToCommand="Set-SnowCompany" Parameter="NumEmployees" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Parent" />
            <Map ToCommand="Set-SnowCompany" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="Phone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Phone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Phone" />
            <Map ToCommand="Set-SnowCompany" Parameter="Phone" />
          </CommandMappings>
        </Property>

        <Property Name="Primary" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Primary" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Primary" />
            <Map ToCommand="Set-SnowCompany" Parameter="Primary" />
          </CommandMappings>
        </Property>

        <Property Name="Profits" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Profits" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Profits" />
            <Map ToCommand="Set-SnowCompany" Parameter="Profits" />
          </CommandMappings>
        </Property>

        <Property Name="PubliclyTraded" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="PubliclyTraded" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="PubliclyTraded" />
            <Map ToCommand="Set-SnowCompany" Parameter="PubliclyTraded" />
          </CommandMappings>
        </Property>

        <Property Name="RankTier" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="RankTier" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="RankTier" />
            <Map ToCommand="Set-SnowCompany" Parameter="RankTier" />
          </CommandMappings>
        </Property>

        <Property Name="RevenuePerYear" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="RevenuePerYear" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="RevenuePerYear" />
            <Map ToCommand="Set-SnowCompany" Parameter="RevenuePerYear" />
          </CommandMappings>
        </Property>

        <Property Name="State" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="State" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="State" />
            <Map ToCommand="Set-SnowCompany" Parameter="State" />
          </CommandMappings>
        </Property>

        <Property Name="StockSymbol" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="StockSymbol" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="StockSymbol" />
            <Map ToCommand="Set-SnowCompany" Parameter="StockSymbol" />
          </CommandMappings>
        </Property>

        <Property Name="StockPrice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="StockPrice" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="StockPrice" />
            <Map ToCommand="Set-SnowCompany" Parameter="StockPrice" />
          </CommandMappings>
        </Property>

        <Property Name="Street" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Street" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Street" />
            <Map ToCommand="Set-SnowCompany" Parameter="Street" />
          </CommandMappings>
        </Property>

        <Property Name="Theme" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Theme.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Theme" />
            <Map ToCommand="Set-SnowCompany" Parameter="Theme" />
          </CommandMappings>
        </Property>

        <Property Name="Vendor" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Vendor" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Vendor" />
            <Map ToCommand="Set-SnowCompany" Parameter="Vendor" />
          </CommandMappings>
        </Property>

        <Property Name="VendorManager" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="VendorManager" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="VendorManager" />
            <Map ToCommand="Set-SnowCompany" Parameter="VendorManager" />
          </CommandMappings>
        </Property>

        <Property Name="VendorType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="VendorType" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="VendorType" />
            <Map ToCommand="Set-SnowCompany" Parameter="VendorType" />
          </CommandMappings>
        </Property>

        <Property Name="Website" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Website" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Website" />
            <Map ToCommand="Set-SnowCompany" Parameter="Website" />
          </CommandMappings>
        </Property>

        <Property Name="Zip" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCompany" Path="Zip" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCompany" Method="Insert" />
            <ModBy Command="Set-SnowCompany" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCompany" Parameter="Zip" />
            <Map ToCommand="Set-SnowCompany" Parameter="Zip" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowCompany">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,name,parent" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="core_company_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowCompany" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowCompany" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowCompany" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="Incident">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Id" />
            <Bind CommandResultOf="New-SnowIncident" Path="Id" />
            <Bind CommandResultOf="Set-SnowIncident" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowIncident" Parameter="Id" />
            <Map ToCommand="Set-SnowIncident" Parameter="Id" />
            <Map ToCommand="Get-SnowJournalFields" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="SysDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="SysDomain.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowIncident" Parameter="SysDomain" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Active" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Active" />
            <Map ToCommand="New-SnowIncident" Parameter="Active" />
          </CommandMappings>
        </Property>

        <Property Name="ActivityDue" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ActivityDue" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="ActivityDue" />
            <Map ToCommand="New-SnowIncident" Parameter="ActivityDue" />
          </CommandMappings>
        </Property>

        <Property Name="AdditionalAssigneeList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="AdditionalAssigneeList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="AdditionalAssigneeList" />
            <Map ToCommand="New-SnowIncident" Parameter="AdditionalAssigneeList" />
          </CommandMappings>
        </Property>

        <Property Name="Approval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Approval" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Approval" />
            <Map ToCommand="New-SnowIncident" Parameter="Approval" />
          </CommandMappings>
        </Property>

        <Property Name="ApprovalHistory" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowJournalFields" Path="ApprovalHistory" />
          </ReturnBindings>
        </Property>

        <Property Name="ApprovalSet" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ApprovalSet" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignedTo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="AssignedTo.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="AssignedTo" />
            <Map ToCommand="New-SnowIncident" Parameter="AssignedTo" />
          </CommandMappings>
        </Property>

        <Property Name="AssignmentGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="AssignmentGroup.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="AssignmentGroup" />
            <Map ToCommand="New-SnowIncident" Parameter="AssignmentGroup" />
          </CommandMappings>
        </Property>

        <Property Name="BusinessDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="BusinessDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessImpact" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="BusinessImpact" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="BusinessImpact" />
            <Map ToCommand="New-SnowIncident" Parameter="BusinessImpact" />
          </CommandMappings>
        </Property>

        <Property Name="BusinessService" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="BusinessService.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="BusinessService" />
            <Map ToCommand="New-SnowIncident" Parameter="BusinessService" />
          </CommandMappings>
        </Property>

        <Property Name="BusinessStc" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="BusinessStc" />
          </ReturnBindings>
        </Property>

        <Property Name="CalendarDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CalendarDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CalendarStc" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CalendarStc" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Active" />
            <Map ToCommand="New-SnowIncident" Parameter="Active" />
          </CommandMappings>
        </Property>

        <Property Name="CallerId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CallerId.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="CallerId" />
            <Map ToCommand="New-SnowIncident" Parameter="CallerId" />
          </CommandMappings>
        </Property>

        <Property Name="Category" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Category" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Category" />
            <Map ToCommand="New-SnowIncident" Parameter="Category" />
          </CommandMappings>
        </Property>

        <Property Name="Cause" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Cause" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Cause" />
            <Map ToCommand="New-SnowIncident" Parameter="Cause" />
          </CommandMappings>
        </Property>

        <Property Name="CausedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CausedBy.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="CausedBy" />
            <Map ToCommand="New-SnowIncident" Parameter="CausedBy" />
          </CommandMappings>
        </Property>

        <Property Name="ChildIncidents" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ChildIncidents" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ClosedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ClosedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CloseCode" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CloseCode" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="CloseCode" />
            <Map ToCommand="New-SnowIncident" Parameter="CloseCode" />
          </CommandMappings>
        </Property>

        <Property Name="CloseNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CloseNotes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="CloseNotes" />
            <Map ToCommand="New-SnowIncident" Parameter="CloseNotes" />
          </CommandMappings>
        </Property>

        <Property Name="CmdbCi" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CmdbCi.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="CmdbCi" />
            <Map ToCommand="New-SnowIncident" Parameter="CmdbCi" />
          </CommandMappings>
        </Property>

        <Property Name="Comments" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Comments" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Comments" />
            <Map ToCommand="New-SnowIncident" Parameter="Comments" />
          </CommandMappings>
        </Property>

        <Property Name="CommentsAndWorkNotes" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowJournalFields" Path="CommentsAndWorkNotes" />
          </ReturnBindings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Company.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Company" />
            <Map ToCommand="New-SnowIncident" Parameter="Company" />
          </CommandMappings>
        </Property>

        <Property Name="ContactType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ContactType" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="ContactType" />
            <Map ToCommand="New-SnowIncident" Parameter="ContactType" />
          </CommandMappings>
        </Property>

        <Property Name="Contract" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Contract.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Contract" />
            <Map ToCommand="New-SnowIncident" Parameter="Contract" />
          </CommandMappings>
        </Property>

        <Property Name="CorrelationDisplay" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CorrelationDisplay" />
          </ReturnBindings>
        </Property>

        <Property Name="CorrelationId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="CorrelationId" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryPlan" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="DeliveryPlan.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryTask" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="DeliveryTask.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Description" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Description" />
            <Map ToCommand="New-SnowIncident" Parameter="Description" />
          </CommandMappings>
        </Property>

        <Property Name="DueDate" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="DueDate" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="DueDate" />
            <Map ToCommand="New-SnowIncident" Parameter="DueDate" />
          </CommandMappings>
        </Property>

        <Property Name="Escalation" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Escalation" />
          </ReturnBindings>
        </Property>

        <Property Name="ExpectedStart" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ExpectedStart" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="ExpectedStart" />
            <Map ToCommand="New-SnowIncident" Parameter="ExpectedStart" />
          </CommandMappings>
        </Property>

        <Property Name="FollowUp" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="FollowUp" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="FollowUp" />
            <Map ToCommand="New-SnowIncident" Parameter="FollowUp" />
          </CommandMappings>
        </Property>

        <Property Name="GroupList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="GroupList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="GroupList" />
            <Map ToCommand="New-SnowIncident" Parameter="GroupList" />
          </CommandMappings>
        </Property>

        <Property Name="HoldReason" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="HoldReason" />
          </ReturnBindings>
        </Property>

        <Property Name="Impact" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Impact" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Impact" />
            <Map ToCommand="New-SnowIncident" Parameter="Impact" />
          </CommandMappings>
        </Property>


        <Property Name="IncidentState" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="IncidentState" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="IncidentState" />
            <Map ToCommand="New-SnowIncident" Parameter="IncidentState" />
          </CommandMappings>
        </Property>

        <Property Name="Knowledge" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Knowledge" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Knowledge" />
            <Map ToCommand="New-SnowIncident" Parameter="Knowledge" />
          </CommandMappings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Location.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Location" />
            <Map ToCommand="New-SnowIncident" Parameter="Location" />
          </CommandMappings>
        </Property>

        <Property Name="MadeSla" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="MadeSla" />
          </ReturnBindings>
        </Property>

        <Property Name="Notify" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Notify" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Notify" />
            <Map ToCommand="New-SnowIncident" Parameter="Notify" />
          </CommandMappings>
        </Property>

        <Property Name="Number" DataType="String" IsDisplay="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Number" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="OpenedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="OpenedBy.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowIncident" Parameter="OpenedBy" />
          </CommandMappings>
        </Property>

        <Property Name="Order" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Order" />
          </ReturnBindings>
        </Property>

        <Property Name="OriginId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="OriginId.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="OriginId" />
            <Map ToCommand="New-SnowIncident" Parameter="OriginId" />
          </CommandMappings>
        </Property>

        <Property Name="OriginTable" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="OriginTable" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="OriginTable" />
            <Map ToCommand="New-SnowIncident" Parameter="OriginTable" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Parent" />
            <Map ToCommand="New-SnowIncident" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="ParentIncident" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ParentIncident.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="ParentIncident" />
            <Map ToCommand="New-SnowIncident" Parameter="ParentIncident" />
          </CommandMappings>
        </Property>

        <Property Name="Priority" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Priority" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Priority" />
            <Map ToCommand="New-SnowIncident" Parameter="Priority" />
          </CommandMappings>
        </Property>

        <Property Name="ProblemId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ProblemId.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="ProblemId" />
            <Map ToCommand="New-SnowIncident" Parameter="ProblemId" />
          </CommandMappings>
        </Property>

        <Property Name="ReassignmentCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ReassignmentCount" />
          </ReturnBindings>
        </Property>

        <Property Name="RejectionGoto" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="RejectionGoto.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ReopenedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ReopenedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ReopenedTime" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ReopenedTime" />
          </ReturnBindings>
        </Property>

        <Property Name="ReopenCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ReopenCount" />
          </ReturnBindings>
        </Property>

        <Property Name="ResolvedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ResolvedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="ResolvedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ResolvedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Rfc" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Rfc.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Rfc" />
            <Map ToCommand="New-SnowIncident" Parameter="Rfc" />
          </CommandMappings>
        </Property>

        <Property Name="RouteReason" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="RouteReason" />
          </ReturnBindings>
        </Property>

        <Property Name="ServiceOffering" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ServiceOffering.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="ServiceOffering" />
            <Map ToCommand="New-SnowIncident" Parameter="ServiceOffering" />
          </CommandMappings>
        </Property>

        <Property Name="Severity" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Severity" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Severity" />
            <Map ToCommand="New-SnowIncident" Parameter="Severity" />
          </CommandMappings>
        </Property>

        <Property Name="ShortDescription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="ShortDescription" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="ShortDescription" />
            <Map ToCommand="New-SnowIncident" Parameter="ShortDescription" />
          </CommandMappings>
        </Property>

        <Property Name="SlaDue" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="SlaDue" />
          </ReturnBindings>
        </Property>

        <Property Name="State" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="State" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="State" />
            <Map ToCommand="New-SnowIncident" Parameter="State" />
          </CommandMappings>
        </Property>

        <Property Name="SubCategory" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="SubCategory" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="SubCategory" />
            <Map ToCommand="New-SnowIncident" Parameter="SubCategory" />
          </CommandMappings>
        </Property>

        <Property Name="TaskEffectiveNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="TaskEffectiveNumber" />
          </ReturnBindings>
        </Property>

        <Property Name="TimeWorked" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="TimeWorked" />
          </ReturnBindings>
        </Property>

        <Property Name="UniversalRequest" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="UniversalRequest.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="UponApproval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="UponApproval" />
          </ReturnBindings>
        </Property>

        <Property Name="UponReject" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="UponReject" />
          </ReturnBindings>
        </Property>

        <Property Name="Urgency" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Urgency" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="Urgency" />
            <Map ToCommand="New-SnowIncident" Parameter="Urgency" />
          </CommandMappings>
        </Property>

        <Property Name="UserInput" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="UserInput" />
          </ReturnBindings>
        </Property>

        <Property Name="Variables" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="Variables" />
          </ReturnBindings>
        </Property>

        <Property Name="WatchList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="WatchList" />
          </ReturnBindings>
        </Property>

        <Property Name="WfActivity" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="WfActivity.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkEnd" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="WorkEnd" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="WorkNotes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowIncident" Method="Update" />
            <ModBy Command="New-SnowIncident" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowIncident" Parameter="WorkNotes" />
            <Map ToCommand="New-SnowIncident" Parameter="WorkNotes" />
          </CommandMappings>
        </Property>

        <Property Name="WorkNotesList" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="WorkNotesList" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkStart" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowIncident" Path="WorkStart" />
          </ReturnBindings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowIncident">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,number" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="incident_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowIncident" Order="1" />
          <Item Command="Get-SnowJournalFields" Order="2">
            <SetParameter Param="Select" Source="FixedValue" DataType="String"
                          Value="comments_and_work_notes,approval_history" />
            <SetParameter Param="Table" Source="FixedValue" DataType="String" Value="incident" />
          </Item>
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowIncident" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowIncident" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="Variable">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowVariable" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Active" />
          </ReturnBindings>
        </Property>

        <Property Name="Attributes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Attributes" />
          </ReturnBindings>
        </Property>

        <Property Name="Category" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Category.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CatalogItem" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="CatalogItem.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ChoiceDirection" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ChoiceDirection" />
          </ReturnBindings>
        </Property>

        <Property Name="ChoiceField" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ChoiceField" />
          </ReturnBindings>
        </Property>

        <Property Name="ChoiceTable" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ChoiceTable" />
          </ReturnBindings>
        </Property>

        <Property Name="CreateRoles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="CreateRoles" />
          </ReturnBindings>
        </Property>

        <Property Name="DefaultHtmlValue" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="DefaultHtmlValue" />
          </ReturnBindings>
        </Property>

        <Property Name="DefaultValue" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="DefaultValue" />
          </ReturnBindings>
        </Property>

        <Property Name="DeleteRoles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="DeleteRoles" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryPlan" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="DeliveryPlan.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Description" />
          </ReturnBindings>
        </Property>

        <Property Name="DisplayTitle" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="DisplayTitle" />
          </ReturnBindings>
        </Property>

        <Property Name="DoNotSelectFirst" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="DoNotSelectFirst" />
          </ReturnBindings>
        </Property>

        <Property Name="DynamicDefaultValue" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="DynamicDefaultValue.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DynamicRefQual" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="DynamicRefQual.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="EnableAlsoRequestFor" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="EnableAlsoRequestFor" />
          </ReturnBindings>
        </Property>

        <Property Name="ExampleText" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ExampleText" />
          </ReturnBindings>
        </Property>

        <Property Name="Field" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Field" />
          </ReturnBindings>
        </Property>

        <Property Name="Global" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Global" />
          </ReturnBindings>
        </Property>

        <Property Name="HelpTag" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="HelpTag" />
          </ReturnBindings>
        </Property>

        <Property Name="HelpText" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="HelpText" />
          </ReturnBindings>
        </Property>

        <Property Name="Hidden" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Hidden" />
          </ReturnBindings>
        </Property>

        <Property Name="IncludeNone" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="IncludeNone" />
          </ReturnBindings>
        </Property>

        <Property Name="Instructions" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Instructions" />
          </ReturnBindings>
        </Property>

        <Property Name="Layout" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Layout" />
          </ReturnBindings>
        </Property>

        <Property Name="ListTable" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ListTable" />
          </ReturnBindings>
        </Property>

        <Property Name="LookupLabel" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="LookupLabel" />
          </ReturnBindings>
        </Property>

        <Property Name="LookupPrice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="LookupPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="LookupTable" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="LookupTable" />
          </ReturnBindings>
        </Property>

        <Property Name="LookupUnique" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="LookupUnique" />
          </ReturnBindings>
        </Property>

        <Property Name="LookupValue" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="LookupValue" />
          </ReturnBindings>
        </Property>

        <Property Name="Macro" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Macro.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Macroponent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Macroponent.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Mandatory" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Mandatory" />
          </ReturnBindings>
        </Property>

        <Property Name="MapToField" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="MapToField" />
          </ReturnBindings>
        </Property>

        <Property Name="MaskUseConfirmation" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="MaskUseConfirmation" />
          </ReturnBindings>
        </Property>

        <Property Name="MaskUseEncryption" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="MaskUseEncryption" />
          </ReturnBindings>
        </Property>

        <Property Name="Name" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Name" />
          </ReturnBindings>
        </Property>

        <Property Name="Order" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Order" />
          </ReturnBindings>
        </Property>

        <Property Name="PriceIfChecked" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="PriceIfChecked" />
          </ReturnBindings>
        </Property>

        <Property Name="PricingImplications" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="PricingImplications" />
          </ReturnBindings>
        </Property>

        <Property Name="PublishedRef" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="PublishedRef.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="QuestionText" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="QuestionText" />
          </ReturnBindings>
        </Property>

        <Property Name="ReadOnly" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ReadOnly" />
          </ReturnBindings>
        </Property>

        <Property Name="ReadRoles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ReadRoles" />
          </ReturnBindings>
        </Property>

        <Property Name="ReadScript" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ReadScript" />
          </ReturnBindings>
        </Property>

        <Property Name="Record" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Record" />
          </ReturnBindings>
        </Property>

        <Property Name="RecordProducerTable" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="RecordProducerTable" />
          </ReturnBindings>
        </Property>

        <Property Name="RecLookupPrice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="RecLookupPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="RecPriceIfChecked" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="RecPriceIfChecked" />
          </ReturnBindings>
        </Property>

        <Property Name="Reference" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="VariableWidth" />
          </ReturnBindings>
        </Property>

        <Property Name="ReferenceQual" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ReferenceQual" />
          </ReturnBindings>
        </Property>

        <Property Name="ReferenceQualCondition" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ReferenceQualCondition.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="RichText" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="RichText" />
          </ReturnBindings>
        </Property>

        <Property Name="RolesToUseAlsoRequestFor" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="RolesToUseAlsoRequestFor" />
          </ReturnBindings>
        </Property>

        <Property Name="SaveScript" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SaveScript" />
          </ReturnBindings>
        </Property>

        <Property Name="ScaleMax" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ScaleMax" />
          </ReturnBindings>
        </Property>

        <Property Name="ScaleMin" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ScaleMin" />
          </ReturnBindings>
        </Property>

        <Property Name="ShowHelp" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ShowHelp" />
          </ReturnBindings>
        </Property>

        <Property Name="ShowHelpOnLoad" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ShowHelpOnLoad" />
          </ReturnBindings>
        </Property>

        <Property Name="SpWidget" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SpWidget.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SummaryMacro" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SummaryMacro.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysName" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SysName" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPackage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SysPackage.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPolicy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SysPolicy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysScope" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SysScope.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysUpdateName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="SysUpdateName" />
          </ReturnBindings>
        </Property>

        <Property Name="Table" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Table" />
          </ReturnBindings>
        </Property>

        <Property Name="Tooltip" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Tooltip" />
          </ReturnBindings>
        </Property>

        <Property Name="Type" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Type" />
          </ReturnBindings>
        </Property>

        <Property Name="UiPage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="UiPage.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Unique" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Unique" />
          </ReturnBindings>
        </Property>

        <Property Name="UseDynamicDefault" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="UseDynamicDefault" />
          </ReturnBindings>
        </Property>

        <Property Name="UseReferenceQualifier" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="UseReferenceQualifier" />
          </ReturnBindings>
        </Property>

        <Property Name="ValidateRegex" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="ValidateRegex.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="VariableName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="VariableName" />
          </ReturnBindings>
        </Property>

        <Property Name="VariableSet" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="VariableSet.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="VariableWidth" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="VariableWidth" />
          </ReturnBindings>
        </Property>

        <Property Name="Visibility" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="Visibility" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleBundle" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="VisibleBundle" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleGuide" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="VisibleGuide" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleStandalone" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="VisibleStandalone" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleSummary" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="VisibleSummary" />
          </ReturnBindings>
        </Property>

        <Property Name="WriteRoles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariable" Path="WriteRoles" />
          </ReturnBindings>
        </Property>
      </Properties>
      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowVariable">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,sys_name,publishedref" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="item_option_new_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowVariable" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration />
    </Class>


    <Class Name="LiveProfile">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true" IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="Id" />
            <Bind CommandResultOf="Set-SnowLiveProfile" Path="Id" />
            <Bind CommandResultOf="New-SnowLiveProfile" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowLiveProfile" Parameter="Id" />
            <Map ToCommand="Set-SnowLiveProfile" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Document" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="Document.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLiveProfile" Parameter="Document" />
          </CommandMappings>
        </Property>

        <Property Name="FollowerCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="FollowerCount" />
          </ReturnBindings>
        </Property>

        <Property Name="FollowingCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="FollowingCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Image" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="Image" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowLiveProfile" Method="Update" />
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowLiveProfile" Parameter="Image" />
            <Map ToCommand="New-SnowLiveProfile" Parameter="Image" />
          </CommandMappings>
        </Property>

        <Property Name="JoinedFeed" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="JoinedFeed" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowLiveProfile" Method="Update" />
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowLiveProfile" Parameter="JoinedFeed" />
            <Map ToCommand="New-SnowLiveProfile" Parameter="JoinedFeed" />
          </CommandMappings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="Name" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowLiveProfile" Method="Update" />
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowLiveProfile" Parameter="Name" />
            <Map ToCommand="New-SnowLiveProfile" Parameter="Name" />
          </CommandMappings>
        </Property>

        <Property Name="Photo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="Photo" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowLiveProfile" Method="Update" />
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowLiveProfile" Parameter="Photo" />
            <Map ToCommand="New-SnowLiveProfile" Parameter="Photo" />
          </CommandMappings>
        </Property>

        <Property Name="ShortDescription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="ShortDescription" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowLiveProfile" Method="Update" />
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowLiveProfile" Parameter="ShortDescription" />
            <Map ToCommand="New-SnowLiveProfile" Parameter="ShortDescription" />
          </CommandMappings>
        </Property>

        <Property Name="Status" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="Status" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowLiveProfile" Method="Update" />
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowLiveProfile" Parameter="Status" />
            <Map ToCommand="New-SnowLiveProfile" Parameter="Status" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="SysDomain.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLiveProfile" Parameter="SysDomain" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="Table" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="Table" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLiveProfile" Parameter="Table" />
          </CommandMappings>
        </Property>

        <Property Name="Type" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowLiveProfile" Path="Type" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowLiveProfile" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowLiveProfile" Parameter="Type" />
          </CommandMappings>
        </Property>

      </Properties>
      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowLiveProfile">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="name,sys_id,sys_updated_on" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="live_profile_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowLiveProfile" Order="1" />
        </CommandSequence>
      </ReadConfiguration>
      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowLiveProfile" Order="1" />
          </CommandSequence>
        </Method>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowLiveProfile" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="ServiceCatalog">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowServiceCatalog" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="Active" />
          </ReturnBindings>
        </Property>

        <Property Name="BackgroundColor" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="BackgroundColor" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="Description" />
          </ReturnBindings>
        </Property>

        <Property Name="DesktopContinueShopping" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="DesktopContinueShopping" />
          </ReturnBindings>
        </Property>

        <Property Name="DesktopHomePage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="DesktopHomePage" />
          </ReturnBindings>
        </Property>

        <Property Name="DesktopImage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="DesktopImage" />
          </ReturnBindings>
        </Property>

        <Property Name="Editors" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="Editors" />
          </ReturnBindings>
        </Property>

        <Property Name="EnableWishList" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="EnableWishList" />
          </ReturnBindings>
        </Property>

        <Property Name="Manager" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="Manager.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysName" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="SysName" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPackage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="SysPackage.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPolicy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="SysPolicy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysScope" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="SysScope.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysUpdateName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="SysUpdateName" />
          </ReturnBindings>
        </Property>

        <Property Name="Title" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowServiceCatalog" Path="Title" />
          </ReturnBindings>
        </Property>
      </Properties>
      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowServiceCatalog">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,title,sys_update_name" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sc_catalog_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowServiceCatalog" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration />
    </Class>

    <Class Name="CatalogItem">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowCatalogItem" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="AccessType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="AccessType" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Active" />
          </ReturnBindings>
        </Property>

        <Property Name="Availability" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Availability" />
          </ReturnBindings>
        </Property>

        <Property Name="Billable" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Billable" />
          </ReturnBindings>
        </Property>

        <Property Name="Category" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Category.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CheckedOut" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="CheckedOut" />
          </ReturnBindings>
        </Property>

        <Property Name="Cost" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Cost" />
          </ReturnBindings>
        </Property>

        <Property Name="CustomCart" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="CustomCart.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryPlan" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="DeliveryPlan.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryPlanScript" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="DeliveryPlanScript" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryTime" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="DeliveryTime.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Description" />
          </ReturnBindings>
        </Property>

        <Property Name="DisplayPriceProperty" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="DisplayPriceProperty" />
          </ReturnBindings>
        </Property>

        <Property Name="EntitlementScript" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="EntitlementScript" />
          </ReturnBindings>
        </Property>

        <Property Name="FlowDesignerFlow" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="FlowDesignerFlow.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="FulfillmentAutomationLevel" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="FulfillmentAutomationLevel" />
          </ReturnBindings>
        </Property>

        <Property Name="Group" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Group.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="HideSp" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="HideSp" />
          </ReturnBindings>
        </Property>

        <Property Name="Icon" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Icon" />
          </ReturnBindings>
        </Property>

        <Property Name="IgnorePrice" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="IgnorePrice" />
          </ReturnBindings>
        </Property>

        <Property Name="Image" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Image" />
          </ReturnBindings>
        </Property>

        <Property Name="ListPrice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="ListPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Location.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="MandatoryAttachment" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="MandatoryAttachment" />
          </ReturnBindings>
        </Property>

        <Property Name="Meta" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Meta" />
          </ReturnBindings>
        </Property>

        <Property Name="MobileHidePrice" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="MobileHidePrice" />
          </ReturnBindings>
        </Property>

        <Property Name="MobilePicture" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="MobilePicture" />
          </ReturnBindings>
        </Property>

        <Property Name="MobilePictureType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="MobilePictureType" />
          </ReturnBindings>
        </Property>

        <Property Name="Model" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Model.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Name" />
          </ReturnBindings>
        </Property>

        <Property Name="NoAttachmentV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoAttachmentV2" />
          </ReturnBindings>
        </Property>

        <Property Name="NoCart" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoCart" />
          </ReturnBindings>
        </Property>

        <Property Name="NoCartV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoCartV2" />
          </ReturnBindings>
        </Property>

        <Property Name="NoDeliveryTimeV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoDeliveryTimeV2" />
          </ReturnBindings>
        </Property>

        <Property Name="NoOrder" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoOrder" />
          </ReturnBindings>
        </Property>

        <Property Name="NoOrderNow" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoOrderNow" />
          </ReturnBindings>
        </Property>

        <Property Name="NoProceedCheckout" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoProceedCheckout" />
          </ReturnBindings>
        </Property>

        <Property Name="NoQuantity" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoQuantity" />
          </ReturnBindings>
        </Property>

        <Property Name="NoQuantityV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoQuantityV2" />
          </ReturnBindings>
        </Property>

        <Property Name="NoSearch" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoSearch" />
          </ReturnBindings>
        </Property>

        <Property Name="NoWishlistV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="NoWishlistV2" />
          </ReturnBindings>
        </Property>

        <Property Name="OmitPrice" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="OmitPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="Order" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Order" />
          </ReturnBindings>
        </Property>

        <Property Name="OrderedItemLink" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="OrderedItemLink.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Owner" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Owner.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Picture" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Picture" />
          </ReturnBindings>
        </Property>

        <Property Name="Preview" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Preview" />
          </ReturnBindings>
        </Property>

        <Property Name="Price" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Price" />
          </ReturnBindings>
        </Property>

        <Property Name="PublishedRef" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="PublishedRef.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="RecurringFrequency" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="RecurringFrequency" />
          </ReturnBindings>
        </Property>

        <Property Name="RecurringPrice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="RecurringPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="RequestMethod" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="RequestMethod" />
          </ReturnBindings>
        </Property>

        <Property Name="Roles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Roles" />
          </ReturnBindings>
        </Property>

        <Property Name="ScCatalogs" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="ScCatalogs" />
          </ReturnBindings>
        </Property>

        <Property Name="ScIcItemStaging" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="ScIcItemStaging.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ScIcVersion" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="ScIcVersion" />
          </ReturnBindings>
        </Property>

        <Property Name="ScTemplate" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="ScTemplate.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ShortDescription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="ShortDescription" />
          </ReturnBindings>
        </Property>

        <Property Name="ShowVariableHelpOnLoad" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="ShowVariableHelpOnLoad" />
          </ReturnBindings>
        </Property>

        <Property Name="StartClosed" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="StartClosed" />
          </ReturnBindings>
        </Property>

        <Property Name="State" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="State" />
          </ReturnBindings>
        </Property>

        <Property Name="SysName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="SysName" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPackage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="SysPackage.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPolicy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="SysPolicy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysScope" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="SysScope.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysUpdateName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="SysUpdateName" />
          </ReturnBindings>
        </Property>

        <Property Name="TaxonomyTopic" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="TaxonomyTopic.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Template" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Template.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="TemplateManagerRoles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="TemplateManagerRoles" />
          </ReturnBindings>
        </Property>

        <Property Name="Type" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Type" />
          </ReturnBindings>
        </Property>

        <Property Name="UseScLayout" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="UseScLayout" />
          </ReturnBindings>
        </Property>

        <Property Name="Vendor" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Vendor.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleBundle" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="VisibleBundle" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleGuide" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="VisibleGuide" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleStandalone" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="VisibleStandalone" />
          </ReturnBindings>
        </Property>

        <Property Name="Workflow" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogItem" Path="Workflow.ToString()" />
          </ReturnBindings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowCatalogItem">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,name,publishedref" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sc_cat_item_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowCatalogItem" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration />
    </Class>

    <Class Name="OrderGuide">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowOrderGuide" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="AccessType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="AccessType" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Active" />
          </ReturnBindings>
        </Property>

        <Property Name="Availability" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Availability" />
          </ReturnBindings>
        </Property>

        <Property Name="Billable" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Billable" />
          </ReturnBindings>
        </Property>

        <Property Name="Cascade" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Cascade" />
          </ReturnBindings>
        </Property>

        <Property Name="Category" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Category.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CheckedOut" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="CheckedOut" />
          </ReturnBindings>
        </Property>

        <Property Name="Cost" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Cost" />
          </ReturnBindings>
        </Property>

        <Property Name="CustomCart" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="CustomCart.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryPlan" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="DeliveryPlan.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryPlanScript" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="DeliveryPlanScript" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryTime" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="DeliveryTime.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Description" />
          </ReturnBindings>
        </Property>

        <Property Name="DisplayPriceProperty" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="DisplayPriceProperty" />
          </ReturnBindings>
        </Property>

        <Property Name="EntitlementScript" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="EntitlementScript" />
          </ReturnBindings>
        </Property>

        <Property Name="FlowDesignerFlow" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="FlowDesignerFlow.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="FulfillmentAutomationLevel" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="FulfillmentAutomationLevel" />
          </ReturnBindings>
        </Property>

        <Property Name="Group" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Group.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="HideSp" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="HideSp" />
          </ReturnBindings>
        </Property>

        <Property Name="Icon" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Icon" />
          </ReturnBindings>
        </Property>

        <Property Name="IncludeItems" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="IncludeItems" />
          </ReturnBindings>
        </Property>

        <Property Name="IgnorePrice" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="IgnorePrice" />
          </ReturnBindings>
        </Property>

        <Property Name="Image" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Image" />
          </ReturnBindings>
        </Property>

        <Property Name="ListPrice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="ListPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Location.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="MandatoryAttachment" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="MandatoryAttachment" />
          </ReturnBindings>
        </Property>

        <Property Name="Meta" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Meta" />
          </ReturnBindings>
        </Property>

        <Property Name="MobileHidePrice" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="MobileHidePrice" />
          </ReturnBindings>
        </Property>

        <Property Name="MobilePicture" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="MobilePicture" />
          </ReturnBindings>
        </Property>

        <Property Name="MobilePictureType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="MobilePictureType" />
          </ReturnBindings>
        </Property>

        <Property Name="Model" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Model.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Name" />
          </ReturnBindings>
        </Property>

        <Property Name="NoAttachmentV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoAttachmentV2" />
          </ReturnBindings>
        </Property>

        <Property Name="NoCart" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoCart" />
          </ReturnBindings>
        </Property>

        <Property Name="NoCartV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoCartV2" />
          </ReturnBindings>
        </Property>

        <Property Name="NoDeliveryTimeV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoDeliveryTimeV2" />
          </ReturnBindings>
        </Property>

        <Property Name="NoOrder" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoOrder" />
          </ReturnBindings>
        </Property>

        <Property Name="NoOrderNow" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoOrderNow" />
          </ReturnBindings>
        </Property>

        <Property Name="NoProceedCheckout" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoProceedCheckout" />
          </ReturnBindings>
        </Property>

        <Property Name="NoQuantity" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoQuantity" />
          </ReturnBindings>
        </Property>

        <Property Name="NoQuantityV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoQuantityV2" />
          </ReturnBindings>
        </Property>

        <Property Name="NoSearch" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoSearch" />
          </ReturnBindings>
        </Property>

        <Property Name="NoWishlistV2" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="NoWishlistV2" />
          </ReturnBindings>
        </Property>

        <Property Name="OmitPrice" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="OmitPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="Order" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Order" />
          </ReturnBindings>
        </Property>

        <Property Name="OrderedItemLink" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="OrderedItemLink.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="OrderToCart" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="OrderToCart" />
          </ReturnBindings>
        </Property>

        <Property Name="Owner" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Owner.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Picture" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Picture" />
          </ReturnBindings>
        </Property>

        <Property Name="Preview" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Preview" />
          </ReturnBindings>
        </Property>

        <Property Name="Price" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Price" />
          </ReturnBindings>
        </Property>

        <Property Name="PublishedRef" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="PublishedRef.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="RecurringFrequency" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="RecurringFrequency" />
          </ReturnBindings>
        </Property>

        <Property Name="RecurringPrice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="RecurringPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="RequestMethod" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="RequestMethod" />
          </ReturnBindings>
        </Property>

        <Property Name="Roles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Roles" />
          </ReturnBindings>
        </Property>

        <Property Name="Script" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Script" />
          </ReturnBindings>
        </Property>

        <Property Name="ScCatalogs" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="ScCatalogs" />
          </ReturnBindings>
        </Property>

        <Property Name="ScIcItemStaging" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="ScIcItemStaging.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ScIcVersion" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="ScIcVersion" />
          </ReturnBindings>
        </Property>

        <Property Name="ScTemplate" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="ScTemplate.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ShortDescription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="ShortDescription" />
          </ReturnBindings>
        </Property>

        <Property Name="ShowVariableHelpOnLoad" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="ShowVariableHelpOnLoad" />
          </ReturnBindings>
        </Property>

        <Property Name="StartClosed" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="StartClosed" />
          </ReturnBindings>
        </Property>

        <Property Name="State" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="State" />
          </ReturnBindings>
        </Property>

        <Property Name="SysName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="SysName" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPackage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="SysPackage.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPolicy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="SysPolicy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysScope" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="SysScope.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysUpdateName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="SysUpdateName" />
          </ReturnBindings>
        </Property>

        <Property Name="TaxonomyTopic" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="TaxonomyTopic.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Template" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Template.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="TemplateManagerRoles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="TemplateManagerRoles" />
          </ReturnBindings>
        </Property>

        <Property Name="TwoStep" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="TwoStep" />
          </ReturnBindings>
        </Property>

        <Property Name="Type" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Type" />
          </ReturnBindings>
        </Property>

        <Property Name="UseScLayout" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="UseScLayout" />
          </ReturnBindings>
        </Property>

        <Property Name="Validator" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Validator" />
          </ReturnBindings>
        </Property>

        <Property Name="Vendor" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Vendor.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleBundle" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="VisibleBundle" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleGuide" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="VisibleGuide" />
          </ReturnBindings>
        </Property>

        <Property Name="VisibleStandalone" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="VisibleStandalone" />
          </ReturnBindings>
        </Property>

        <Property Name="Workflow" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowOrderGuide" Path="Workflow.ToString()" />
          </ReturnBindings>
        </Property>

      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowOrderGuide">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,name" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sc_cat_item_guide_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowOrderGuide" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration />
    </Class>

    <Class Name="CatalogOptions">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsUniqueKey="true" IsAutoFill="true"
                  IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="Id" />
            <Bind CommandResultOf="Set-SnowCatalogOption" Path="Id" />
            <Bind CommandResultOf="New-SnowCatalogOption" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowCatalogOption" Parameter="Id" />
            <Map ToCommand="Set-SnowCatalogOption" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="CartItem" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="CartItem.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogOption" Method="Update" />
            <ModBy Command="New-SnowCatalogOption" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogOption" Parameter="CartItem" />
            <Map ToCommand="New-SnowCatalogOption" Parameter="CartItem" />
          </CommandMappings>
        </Property>

        <Property Name="ItemOptionNew" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="ItemOptionNew.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogOption" Method="Update" />
            <ModBy Command="New-SnowCatalogOption" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogOption" Parameter="ItemOptionNew" />
            <Map ToCommand="New-SnowCatalogOption" Parameter="ItemOptionNew" />
          </CommandMappings>
        </Property>

        <Property Name="Order" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="Order" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogOption" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogOption" Parameter="Order" />
          </CommandMappings>
        </Property>

        <Property Name="ScCatItemOption" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="ScCatItemOption.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogOption" Method="Update" />
            <ModBy Command="New-SnowCatalogOption" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogOption" Parameter="ScCatItemOption" />
            <Map ToCommand="New-SnowCatalogOption" Parameter="ScCatItemOption" />
          </CommandMappings>
        </Property>

        <Property Name="Value" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogOption" Path="Value" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogOption" Method="Update" />
            <ModBy Command="New-SnowCatalogOption" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogOption" Parameter="Value" />
            <Map ToCommand="New-SnowCatalogOption" Parameter="Value" />
          </CommandMappings>
        </Property>

      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowCatalogOption">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sc_item_option_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowCatalogOption" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowCatalogOption" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowCatalogOption" Order="1" />
          </CommandSequence>
        </Method>

      </MethodConfiguration>
    </Class>

    <Class Name="VariableOwnership">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="Id" />
            <Bind CommandResultOf="New-SnowVariableOwnership" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowVariableOwnership" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="RequestItem" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="RequestItem.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowVariableOwnership" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowVariableOwnership" Parameter="RequestItem" />
          </CommandMappings>
        </Property>

        <Property Name="ScItemOption" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowVariableOwnership" Path="ScItemOption.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowVariableOwnership" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowVariableOwnership" Parameter="ScItemOption" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowVariableOwnership">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sc_item_option_mtom_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowVariableOwnership" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowVariableOwnership" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="CatalogRequest">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsUniqueKey="true" IsAutoFill="true"
                  IsMandatory="false" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Id" />
            <Bind CommandResultOf="Set-SnowCatalogRequest" Path="Id" />
            <Bind CommandResultOf="New-SnowCatalogRequest" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowCatalogRequest" Parameter="Id" />
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Id" />
            <Map ToCommand="Get-SnowJournalFields" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Active" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Active" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Active" />
          </CommandMappings>
        </Property>

        <Property Name="ActivityDue" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ActivityDue" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="ActivityDue" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="ActivityDue" />
          </CommandMappings>
        </Property>

        <Property Name="AdditionalAssigneeList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="AdditionalAssigneeList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="AdditionalAssigneeList" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="AdditionalAssigneeList" />
          </CommandMappings>
        </Property>

        <Property Name="Approval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Approval" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Approval" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Approval" />
          </CommandMappings>
        </Property>

        <Property Name="ApprovalHistory" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ApprovalHistory" />
          </ReturnBindings>
        </Property>

        <Property Name="ApprovalSet" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ApprovalSet" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignedTo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="AssignedTo.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="AssignedTo" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="AssignedTo" />
          </CommandMappings>
        </Property>

        <Property Name="AssignmentGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="AssignmentGroup.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="AssignmentGroup" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="AssignmentGroup" />
          </CommandMappings>
        </Property>

        <Property Name="BusinessDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="BusinessDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessService" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="BusinessService.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="BusinessService" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="BusinessService" />
          </CommandMappings>
        </Property>

        <Property Name="CalendarDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="CalendarDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CalendarStc" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="CalendarStc" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ClosedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ClosedBy.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="ClosedBy" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="ClosedBy" />
          </CommandMappings>
        </Property>

        <Property Name="CloseNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="CloseNotes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="CloseNotes" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="CloseNotes" />
          </CommandMappings>
        </Property>

        <Property Name="CmdbCi" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="CmdbCi.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="CmdbCi" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="CmdbCi" />
          </CommandMappings>
        </Property>

        <Property Name="Comments" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Comments" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Comments" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Comments" />
          </CommandMappings>
        </Property>

        <Property Name="CommentsAndWorkNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowJournalFields" Path="CommentsAndWorkNotes" />
          </ReturnBindings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Company.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Company" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Company" />
          </CommandMappings>
        </Property>

        <Property Name="ContactType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ContactType" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="ContactType" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="ContactType" />
          </CommandMappings>
        </Property>

        <Property Name="Contract" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Contract.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Contract" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Contract" />
          </CommandMappings>
        </Property>

        <Property Name="CorrelationDisplay" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="CorrelationDisplay" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="CorrelationDisplay" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="CorrelationDisplay" />
          </CommandMappings>
        </Property>

        <Property Name="CorrelationId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="CorrelationId" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="CorrelationId" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="CorrelationId" />
          </CommandMappings>
        </Property>

        <Property Name="DeliveryAddress" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="DeliveryAddress" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="DeliveryAddress" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="DeliveryAddress" />
          </CommandMappings>
        </Property>

        <Property Name="DeliveryPlan" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="DeliveryPlan.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryTask" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="DeliveryTask.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Description" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Description" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Description" />
          </CommandMappings>
        </Property>

        <Property Name="DueDate" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="DueDate" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="DueDate" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="DueDate" />
          </CommandMappings>
        </Property>

        <Property Name="Escalation" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Escalation" />
          </ReturnBindings>
        </Property>

        <Property Name="ExpectedStart" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ExpectedStart" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="ExpectedStart" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="ExpectedStart" />
          </CommandMappings>
        </Property>

        <Property Name="FollowUp" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="FollowUp" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="FollowUp" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="FollowUp" />
          </CommandMappings>
        </Property>

        <Property Name="GroupList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="GroupList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="GroupList" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="GroupList" />
          </CommandMappings>
        </Property>

        <Property Name="Impact" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Impact" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Impact" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Impact" />
          </CommandMappings>
        </Property>

        <Property Name="Knowledge" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Knowledge" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Knowledge" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Knowledge" />
          </CommandMappings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Location.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Location" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Location" />
          </CommandMappings>
        </Property>

        <Property Name="MadeSla" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="MadeSla" />
          </ReturnBindings>
        </Property>

        <Property Name="Number" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Number" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="OpenedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="OpenedBy.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogRequest" Parameter="OpenedBy" />
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="OpenedBy" />
          </CommandMappings>
        </Property>

        <Property Name="Order" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Order" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Order" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Parent" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="ParentInteraction" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ParentInteraction.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="ParentInteraction" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="ParentInteraction" />
          </CommandMappings>
        </Property>

        <Property Name="Price" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Price" />
          </ReturnBindings>
        </Property>

        <Property Name="Priority" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Priority" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Priority" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Priority" />
          </CommandMappings>
        </Property>

        <Property Name="ReassignmentCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ReassignmentCount" />
          </ReturnBindings>
        </Property>

        <Property Name="RejectionGoto" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="RejectionGoto.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="RequestedDate" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="RequestedDate" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="RequestedDate" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="RequestedDate" />
          </CommandMappings>
        </Property>

        <Property Name="RequestedFor" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="RequestedFor.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="RequestedFor" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="RequestedFor" />
          </CommandMappings>
        </Property>

        <Property Name="RequestState" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="RequestState" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="RequestState" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="RequestState" />
          </CommandMappings>
        </Property>

        <Property Name="RouteReason" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="RouteReason" />
          </ReturnBindings>
        </Property>

        <Property Name="ServiceOffering" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ServiceOffering.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="ServiceOffering" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="ServiceOffering" />
          </CommandMappings>
        </Property>

        <Property Name="ShortDescription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="ShortDescription" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="ShortDescription" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="ShortDescription" />
          </CommandMappings>
        </Property>

        <Property Name="SlaDue" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="SlaDue" />
          </ReturnBindings>
        </Property>

        <Property Name="SpecialInstructions" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="SpecialInstructions" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="SpecialInstructions" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="SpecialInstructions" />
          </CommandMappings>
        </Property>

        <Property Name="Stage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Stage" />
          </ReturnBindings>
        </Property>

        <Property Name="State" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="State" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="State" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="State" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="SysDomain.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogRequest" Parameter="SysDomain" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="TaskEffectiveNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="TaskEffectiveNumber" />
          </ReturnBindings>
        </Property>

        <Property Name="TimeWorked" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="TimeWorked" />
          </ReturnBindings>
        </Property>

        <Property Name="UniversalRequest" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="UniversalRequest.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="UponApproval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="UponApproval" />
          </ReturnBindings>
        </Property>

        <Property Name="UponReject" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="UponReject" />
          </ReturnBindings>
        </Property>

        <Property Name="Urgency" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Urgency" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="Urgency" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="Urgency" />
          </CommandMappings>
        </Property>

        <Property Name="UserInput" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="UserInput" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="UserInput" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="UserInput" />
          </CommandMappings>
        </Property>

        <Property Name="Variables" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="Variables" />
          </ReturnBindings>
        </Property>

        <Property Name="WatchList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="WatchList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="WatchList" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="WatchList" />
          </CommandMappings>
        </Property>

        <Property Name="WfActivity" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="WfActivity.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkEnd" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="WorkEnd" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="WorkNotes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="WorkNotes" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="WorkNotes" />
          </CommandMappings>
        </Property>

        <Property Name="WorkNotesList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="WorkNotesList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogRequest" Method="Update" />
            <ModBy Command="New-SnowCatalogRequest" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogRequest" Parameter="WorkNotesList" />
            <Map ToCommand="New-SnowCatalogRequest" Parameter="WorkNotesList" />
          </CommandMappings>
        </Property>

        <Property Name="WorkStart" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogRequest" Path="WorkStart" />
          </ReturnBindings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowCatalogRequest">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,number,sys_class_name" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sc_request_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowCatalogRequest" Order="1" />
          <Item Command="Get-SnowJournalFields" Order="2">
            <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="comments_and_work_notes" />
            <SetParameter Param="Table" Source="FixedValue" DataType="String" Value="sc_request" />
          </Item>
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowCatalogRequest" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowCatalogRequest" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="RequestItem">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsAutoFill="true" IsUniqueKey="true"
                  IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Id" />
            <Bind CommandResultOf="Set-SnowRequestItem" Path="Id" />
            <Bind CommandResultOf="New-SnowRequestItem" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowRequestItem" Parameter="Id" />
            <Map ToCommand="Set-SnowRequestItem" Parameter="Id" />
            <Map ToCommand="Get-SnowJournalFields" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Active" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Active" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Active" />
          </CommandMappings>
        </Property>

        <Property Name="ActivityDue" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ActivityDue" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="ActivityDue" />
            <Map ToCommand="New-SnowRequestItem" Parameter="ActivityDue" />
          </CommandMappings>
        </Property>

        <Property Name="AdditionalAssigneeList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="AdditionalAssigneeList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="AdditionalAssigneeList" />
            <Map ToCommand="New-SnowRequestItem" Parameter="AdditionalAssigneeList" />
          </CommandMappings>
        </Property>

        <Property Name="Approval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Approval" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Approval" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Approval" />
          </CommandMappings>
        </Property>

        <Property Name="ApprovalHistory" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ApprovalHistory" />
          </ReturnBindings>
        </Property>

        <Property Name="ApprovalSet" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ApprovalSet" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignedTo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="AssignedTo.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="AssignedTo" />
            <Map ToCommand="New-SnowRequestItem" Parameter="AssignedTo" />
          </CommandMappings>
        </Property>

        <Property Name="AssignmentGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="AssignmentGroup.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="AssignmentGroup" />
            <Map ToCommand="New-SnowRequestItem" Parameter="AssignmentGroup" />
          </CommandMappings>
        </Property>

        <Property Name="BackOrdered" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="BackOrdered" />
          </ReturnBindings>
        </Property>

        <Property Name="Billable" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Billable" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="BusinessDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessService" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="BusinessService.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="BusinessService" />
            <Map ToCommand="New-SnowRequestItem" Parameter="BusinessService" />
          </CommandMappings>
        </Property>

        <Property Name="CalendarDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="CalendarDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CatItem" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="CatItem.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRequestItem" Parameter="CatItem" />
          </CommandMappings>
        </Property>

        <Property Name="ClosedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ClosedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ClosedBy.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="ClosedBy" />
            <Map ToCommand="New-SnowRequestItem" Parameter="ClosedBy" />
          </CommandMappings>
        </Property>

        <Property Name="CloseNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="CloseNotes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="CloseNotes" />
            <Map ToCommand="New-SnowRequestItem" Parameter="CloseNotes" />
          </CommandMappings>
        </Property>

        <Property Name="CmdbCi" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="CmdbCi.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="CmdbCi" />
            <Map ToCommand="New-SnowRequestItem" Parameter="CmdbCi" />
          </CommandMappings>
        </Property>

        <Property Name="Comments" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Comments" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Comments" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Comments" />
          </CommandMappings>
        </Property>

        <Property Name="CommentsAndWorkNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowJournalFields" Path="CommentsAndWorkNotes" />
          </ReturnBindings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Company.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Company" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Company" />
          </CommandMappings>
        </Property>

        <Property Name="ConfigurationItem" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ConfigurationItem.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="ConfigurationItem" />
            <Map ToCommand="New-SnowRequestItem" Parameter="ConfigurationItem" />
          </CommandMappings>
        </Property>

        <Property Name="ContactType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ContactType" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="ContactType" />
            <Map ToCommand="New-SnowRequestItem" Parameter="ContactType" />
          </CommandMappings>
        </Property>

        <Property Name="Context" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Context.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Contract" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Contract.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Contract" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Contract" />
          </CommandMappings>
        </Property>

        <Property Name="CorrelationDisplay" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="CorrelationDisplay" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="CorrelationDisplay" />
            <Map ToCommand="New-SnowRequestItem" Parameter="CorrelationDisplay" />
          </CommandMappings>
        </Property>

        <Property Name="CorrelationId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="CorrelationId" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="CorrelationId" />
            <Map ToCommand="New-SnowRequestItem" Parameter="CorrelationId" />
          </CommandMappings>
        </Property>

        <Property Name="DeliveryPlan" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="DeliveryPlan.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryTask" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="DeliveryTask.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Description" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Description" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Description" />
          </CommandMappings>
        </Property>

        <Property Name="DueDate" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="DueDate" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="DueDate" />
            <Map ToCommand="New-SnowRequestItem" Parameter="DueDate" />
          </CommandMappings>
        </Property>

        <Property Name="Escalation" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Escalation" />
          </ReturnBindings>
        </Property>

        <Property Name="EstimatedDelivery" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="EstimatedDelivery" />
          </ReturnBindings>
        </Property>

        <Property Name="ExpectedStart" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ExpectedStart" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="ExpectedStart" />
            <Map ToCommand="New-SnowRequestItem" Parameter="ExpectedStart" />
          </CommandMappings>
        </Property>

        <Property Name="FlowContext" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="FlowContext.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="FollowUp" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="FollowUp" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="FollowUp" />
            <Map ToCommand="New-SnowRequestItem" Parameter="FollowUp" />
          </CommandMappings>
        </Property>

        <Property Name="GroupList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="GroupList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="GroupList" />
            <Map ToCommand="New-SnowRequestItem" Parameter="GroupList" />
          </CommandMappings>
        </Property>

        <Property Name="Impact" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Impact" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Impact" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Impact" />
          </CommandMappings>
        </Property>

        <Property Name="Knowledge" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Knowledge" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Knowledge" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Knowledge" />
          </CommandMappings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Location.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Location" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Location" />
          </CommandMappings>
        </Property>

        <Property Name="MadeSla" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="MadeSla" />
          </ReturnBindings>
        </Property>

        <Property Name="Number" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Number" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="OpenedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="OpenedBy.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRequestItem" Parameter="OpenedBy" />
            <Map ToCommand="Set-SnowRequestItem" Parameter="OpenedBy" />
          </CommandMappings>
        </Property>

        <Property Name="Order" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Order" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRequestItem" Parameter="Order" />
          </CommandMappings>
        </Property>

        <Property Name="OrderGuide" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="OrderGuide.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="OrderGuide" />
            <Map ToCommand="New-SnowRequestItem" Parameter="OrderGuide" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Parent" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="Price" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Price" />
          </ReturnBindings>
        </Property>

        <Property Name="Priority" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Priority" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Priority" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Priority" />
          </CommandMappings>
        </Property>

        <Property Name="Quantity" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Quantity" />
          </ReturnBindings>
        </Property>

        <Property Name="ReassignmentCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ReassignmentCount" />
          </ReturnBindings>
        </Property>

        <Property Name="RecurringFrequency" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="RecurringFrequency" />
          </ReturnBindings>
        </Property>

        <Property Name="RecurringPrice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="RecurringPrice" />
          </ReturnBindings>
        </Property>

        <Property Name="RejectionGoto" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="RejectionGoto.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Request" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Request.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRequestItem" Parameter="Request" />
          </CommandMappings>
        </Property>

        <Property Name="RequestedFor" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="RequestedFor.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="RequestedFor" />
            <Map ToCommand="New-SnowRequestItem" Parameter="RequestedFor" />
          </CommandMappings>
        </Property>

        <Property Name="RouteReason" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="RouteReason" />
          </ReturnBindings>
        </Property>

        <Property Name="ScCatalog" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ScCatalog.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRequestItem" Parameter="ScCatalog" />
          </CommandMappings>
        </Property>

        <Property Name="ServiceOffering" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ServiceOffering.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="ServiceOffering" />
            <Map ToCommand="New-SnowRequestItem" Parameter="ServiceOffering" />
          </CommandMappings>
        </Property>

        <Property Name="ShortDescription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="ShortDescription" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="ShortDescription" />
            <Map ToCommand="New-SnowRequestItem" Parameter="ShortDescription" />
          </CommandMappings>
        </Property>

        <Property Name="SlaDue" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="SlaDue" />
          </ReturnBindings>
        </Property>

        <Property Name="Stage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Stage" />
          </ReturnBindings>
        </Property>

        <Property Name="State" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="State" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="State" />
            <Map ToCommand="New-SnowRequestItem" Parameter="State" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="SysDomain.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRequestItem" Parameter="SysDomain" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="TaskEffectiveNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="TaskEffectiveNumber" />
          </ReturnBindings>
        </Property>

        <Property Name="TimeWorked" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="TimeWorked" />
          </ReturnBindings>
        </Property>

        <Property Name="UniversalRequest" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="UniversalRequest.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="UponApproval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="UponApproval" />
          </ReturnBindings>
        </Property>

        <Property Name="UponReject" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="UponReject" />
          </ReturnBindings>
        </Property>

        <Property Name="Urgency" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Urgency" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="Urgency" />
            <Map ToCommand="New-SnowRequestItem" Parameter="Urgency" />
          </CommandMappings>
        </Property>

        <Property Name="UserInput" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="UserInput" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="UserInput" />
            <Map ToCommand="New-SnowRequestItem" Parameter="UserInput" />
          </CommandMappings>
        </Property>

        <Property Name="Variables" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="Variables" />
          </ReturnBindings>
        </Property>

        <Property Name="WatchList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="WatchList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="WatchList" />
            <Map ToCommand="New-SnowRequestItem" Parameter="WatchList" />
          </CommandMappings>
        </Property>

        <Property Name="WfActivity" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="WfActivity.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkEnd" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="WorkEnd" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="WorkNotes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="WorkNotes" />
            <Map ToCommand="New-SnowRequestItem" Parameter="WorkNotes" />
          </CommandMappings>
        </Property>

        <Property Name="WorkNotesList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="WorkNotesList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowRequestItem" Method="Update" />
            <ModBy Command="New-SnowRequestItem" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowRequestItem" Parameter="WorkNotesList" />
            <Map ToCommand="New-SnowRequestItem" Parameter="WorkNotesList" />
          </CommandMappings>
        </Property>

        <Property Name="WorkStart" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRequestItem" Path="WorkStart" />
          </ReturnBindings>
        </Property>

      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowRequestItem">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,number" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sc_req_item_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowRequestItem" Order="1" />
          <Item Command="Get-SnowJournalFields" Order="2">
            <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="comments_and_work_notes" />
            <SetParameter Param="Table" Source="FixedValue" DataType="String" Value="sc_req_item" />
          </Item>
        </CommandSequence>

      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowRequestItem" Order="1" />
          </CommandSequence>
        </Method>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowRequestItem" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="CatalogTask">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Id" />
            <Bind CommandResultOf="Set-SnowCatalogTask" Path="Id" />
            <Bind CommandResultOf="New-SnowCatalogTask" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowCatalogTask" Parameter="Id" />
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Id" />
            <Map ToCommand="Get-SnowJournalFields" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Active" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Active" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Active" />
          </CommandMappings>
        </Property>

        <Property Name="ActivityDue" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ActivityDue" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="ActivityDue" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="ActivityDue" />
          </CommandMappings>
        </Property>

        <Property Name="AdditionalAssigneeList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="AdditionalAssigneeList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="AdditionalAssigneeList" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="AdditionalAssigneeList" />
          </CommandMappings>
        </Property>

        <Property Name="Approval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Approval" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Approval" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Approval" />
          </CommandMappings>
        </Property>

        <Property Name="ApprovalHistory" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ApprovalHistory" />
          </ReturnBindings>
        </Property>

        <Property Name="ApprovalSet" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ApprovalSet" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignedTo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="AssignedTo.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="AssignedTo" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="AssignedTo" />
          </CommandMappings>
        </Property>

        <Property Name="AssignmentGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="AssignmentGroup.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="AssignmentGroup" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="AssignmentGroup" />
          </CommandMappings>
        </Property>

        <Property Name="BusinessDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="BusinessDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessService" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="BusinessService.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="BusinessService" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="BusinessService" />
          </CommandMappings>
        </Property>

        <Property Name="CalendarDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="CalendarDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CalendarStc" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="CalendarStc" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ClosedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ClosedBy.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="ClosedBy" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="ClosedBy" />
          </CommandMappings>
        </Property>

        <Property Name="CloseNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="CloseNotes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="CloseNotes" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="CloseNotes" />
          </CommandMappings>
        </Property>

        <Property Name="CmdbCi" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="CmdbCi.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="CmdbCi" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="CmdbCi" />
          </CommandMappings>
        </Property>

        <Property Name="Comments" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Comments" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Comments" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Comments" />
          </CommandMappings>
        </Property>

        <Property Name="CommentsAndWorkNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowJournalFields" Path="CommentsAndWorkNotes" />
          </ReturnBindings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Company.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Company" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Company" />
          </CommandMappings>
        </Property>

        <Property Name="ContactType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ContactType" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="ContactType" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="ContactType" />
          </CommandMappings>
        </Property>

        <Property Name="Contract" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Contract.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Contract" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Contract" />
          </CommandMappings>
        </Property>

        <Property Name="CorrelationDisplay" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="CorrelationDisplay" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="CorrelationDisplay" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="CorrelationDisplay" />
          </CommandMappings>
        </Property>

        <Property Name="CorrelationId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="CorrelationId" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="CorrelationId" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="CorrelationId" />
          </CommandMappings>
        </Property>

        <Property Name="DeliveryPlan" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="DeliveryPlan.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryTask" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="DeliveryTask.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Description" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Description" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Description" />
          </CommandMappings>
        </Property>

        <Property Name="DueDate" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="DueDate" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="DueDate" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="DueDate" />
          </CommandMappings>
        </Property>

        <Property Name="Escalation" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Escalation" />
          </ReturnBindings>
        </Property>

        <Property Name="ExpectedStart" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ExpectedStart" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="ExpectedStart" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="ExpectedStart" />
          </CommandMappings>
        </Property>

        <Property Name="FollowUp" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="FollowUp" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="FollowUp" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="FollowUp" />
          </CommandMappings>
        </Property>

        <Property Name="GroupList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="GroupList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="GroupList" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="GroupList" />
          </CommandMappings>
        </Property>

        <Property Name="Impact" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Impact" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Impact" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Impact" />
          </CommandMappings>
        </Property>

        <Property Name="Knowledge" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Knowledge" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Knowledge" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Knowledge" />
          </CommandMappings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Location.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Location" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Location" />
          </CommandMappings>
        </Property>

        <Property Name="MadeSla" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="MadeSla" />
          </ReturnBindings>
        </Property>

        <Property Name="Number" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Number" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="OpenedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="OpenedBy.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogTask" Parameter="OpenedBy" />
            <Map ToCommand="Set-SnowCatalogTask" Parameter="OpenedBy" />
          </CommandMappings>
        </Property>

        <Property Name="Order" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Order" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogTask" Parameter="Order" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Parent" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="Priority" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Priority" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Priority" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Priority" />
          </CommandMappings>
        </Property>

        <Property Name="ReassignmentCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ReassignmentCount" />
          </ReturnBindings>
        </Property>

        <Property Name="RejectionGoto" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="RejectionGoto.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Request" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Request.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogTask" Parameter="Request" />
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Request" />
          </CommandMappings>
        </Property>

        <Property Name="RequestItem" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="RequestItem.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="RequestItem" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="RequestItem" />
          </CommandMappings>
        </Property>

        <Property Name="RouteReason" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="RouteReason" />
          </ReturnBindings>
        </Property>

        <Property Name="ScCatalog" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ScCatalog.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogTask" Parameter="ScCatalog" />
          </CommandMappings>
        </Property>

        <Property Name="ServiceOffering" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ServiceOffering.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="ServiceOffering" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="ServiceOffering" />
          </CommandMappings>
        </Property>

        <Property Name="ShortDescription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="ShortDescription" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="ShortDescription" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="ShortDescription" />
          </CommandMappings>
        </Property>

        <Property Name="SlaDue" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="SlaDue" />
          </ReturnBindings>
        </Property>

        <Property Name="State" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="State" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="State" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="State" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="SysDomain.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowCatalogTask" Parameter="SysDomain" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="TaskEffectiveNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="TaskEffectiveNumber" />
          </ReturnBindings>
        </Property>

        <Property Name="TimeWorked" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="TimeWorked" />
          </ReturnBindings>
        </Property>

        <Property Name="UniversalRequest" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="UniversalRequest.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="UponApproval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="UponApproval" />
          </ReturnBindings>
        </Property>

        <Property Name="UponReject" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="UponReject" />
          </ReturnBindings>
        </Property>

        <Property Name="Urgency" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Urgency" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="Urgency" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="Urgency" />
          </CommandMappings>
        </Property>

        <Property Name="UserInput" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="UserInput" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="UserInput" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="UserInput" />
          </CommandMappings>
        </Property>

        <Property Name="Variables" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="Variables" />
          </ReturnBindings>
        </Property>

        <Property Name="WatchList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="WatchList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="WatchList" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="WatchList" />
          </CommandMappings>
        </Property>

        <Property Name="WfActivity" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="WfActivity.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkEnd" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="WorkEnd" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="WorkNotes" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="WorkNotes" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="WorkNotes" />
          </CommandMappings>
        </Property>

        <Property Name="WorkNotesList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="WorkNotesList" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowCatalogTask" Method="Update" />
            <ModBy Command="New-SnowCatalogTask" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowCatalogTask" Parameter="WorkNotesList" />
            <Map ToCommand="New-SnowCatalogTask" Parameter="WorkNotesList" />
          </CommandMappings>
        </Property>

        <Property Name="WorkStart" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowCatalogTask" Path="WorkStart" />
          </ReturnBindings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowCatalogTask">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,number" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sc_task_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowCatalogTask" Order="1" />
          <Item Command="Get-SnowJournalFields" Order="2">
            <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="comments_and_work_notes" />
            <SetParameter Param="Table" Source="FixedValue" DataType="String" Value="sc_task" />
          </Item>
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowCatalogTask" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowCatalogTask" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>

    </Class>

    <Class Name="SysAttachment">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="Id" />
            <Bind CommandResultOf="New-SnowAttachment" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowAttachment" Parameter="Id" />
            <Map ToCommand="Remove-SnowAttachment" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="AverageImageColor" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="AverageImageColor" />
          </ReturnBindings>
        </Property>

        <Property Name="ChunkSizeBytes" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="ChunkSizeBytes" />
          </ReturnBindings>
        </Property>

        <Property Name="Compressed" DataType="Bool" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="Compressed" />
          </ReturnBindings>
        </Property>

        <Property Name="ContentType" DataType="String" AccessConstraint="ReadAndInsertOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="ContentType" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowAttachment" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowAttachment" Parameter="ContentType" />
          </CommandMappings>
        </Property>

        <Property Name="DownloadLink" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="DownloadLink.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="FileName" DataType="String" AccessConstraint="ReadAndInsertOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="FileName" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowAttachment" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowAttachment" Parameter="FileName" />
          </CommandMappings>
        </Property>

        <Property Name="Hash" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="Hash" />
          </ReturnBindings>
        </Property>

        <Property Name="Image" DataType="String" AccessConstraint="ReadAndInsertOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="Image" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowAttachment" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowAttachment" Parameter="Image" />
          </CommandMappings>
        </Property>

        <Property Name="ImageHeight" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="ImageHeight" />
          </ReturnBindings>
        </Property>

        <Property Name="ImageWidth" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="ImageWidth" />
          </ReturnBindings>
        </Property>

        <Property Name="SizeBytes" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="SizeBytes" />
          </ReturnBindings>
        </Property>

        <Property Name="SizeCompressed" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="SizeCompressed" />
          </ReturnBindings>
        </Property>

        <Property Name="State" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="State" />
          </ReturnBindings>
        </Property>

        <Property Name="TableName" DataType="String" IsDisplay="true" AccessConstraint="ReadAndInsertOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="TableName" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowAttachment" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowAttachment" Parameter="TableName" />
          </CommandMappings>
        </Property>

        <Property Name="TableSysId" DataType="String" IsDisplay="true" AccessConstraint="ReadAndInsertOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowAttachment" Path="TableSysId" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowAttachment" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowAttachment" Parameter="TableSysId" />
          </CommandMappings>
        </Property>
      </Properties>
      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowAttachment">
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sys_attachment_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowAttachment" Order="1" />
        </CommandSequence>
      </ReadConfiguration>
      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowAttachment" Order="1" />
          </CommandSequence>
        </Method>
        <Method Name="Delete">
          <CommandSequence>
            <Item Command="Remove-SnowAttachment" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="GroupHasRole">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsAutoFill="true" IsUniqueKey="true"
                  IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="Id" />
            <Bind CommandResultOf="New-SnowRoleHasGroup" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowRoleHasGroup" Parameter="Id" />
            <Map ToCommand="Remove-SnowRoleHasGroup" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="GrantedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="GrantedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Group" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="Group.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRoleHasGroup" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRoleHasGroup" Parameter="Group" />
          </CommandMappings>
        </Property>

        <Property Name="Inherits" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="Inherits" />
          </ReturnBindings>
        </Property>

        <Property Name="Role" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasGroup" Path="Role.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRoleHasGroup" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRoleHasGroup" Parameter="Role" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowRoleHasGroup">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,group,role" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sys_group_has_role_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowRoleHasGroup" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowRoleHasGroup" Order="1" />
          </CommandSequence>
        </Method>
        <Method Name="Delete">
          <CommandSequence>
            <Item Command="Remove-SnowRoleHasGroup" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>

    </Class>

    <Class Name="SysUser">
      <Properties>
        <Property Name="Id" DataType="String" IsUniqueKey="true" IsMandatory="false" AccessConstraint="ReadOnly"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Id" />
            <Bind CommandResultOf="Set-SnowUser" Path="Id" />
            <Bind CommandResultOf="New-SnowUser" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowUser" Parameter="Id" />
            <Map ToCommand="Set-SnowUser" Parameter="Id" />
            <Map ToCommand="Remove-SnowUser" Parameter="Id" />
            <Map ToCommand="Set-SnowUserPassword" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadAndInsertOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Active" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Active" />
            <Map ToCommand="New-SnowUser" Parameter="Active" />
          </CommandMappings>
        </Property>

        <Property Name="AccumulatedRoles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="AccumulatedRoles" />
          </ReturnBindings>
        </Property>

        <Property Name="Avatar" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Avatar" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Avatar" />
            <Map ToCommand="New-SnowUser" Parameter="Avatar" />
          </CommandMappings>
        </Property>

        <Property Name="Building" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Building.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Building" />
            <Map ToCommand="New-SnowUser" Parameter="Building" />
          </CommandMappings>
        </Property>

        <Property Name="CalendarIntegration" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="CalendarIntegration" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="CalendarIntegration" />
            <Map ToCommand="New-SnowUser" Parameter="CalendarIntegration" />
          </CommandMappings>
        </Property>

        <Property Name="City" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="City" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="City" />
            <Map ToCommand="New-SnowUser" Parameter="City" />
          </CommandMappings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Company.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Company" />
            <Map ToCommand="New-SnowUser" Parameter="Company" />
          </CommandMappings>
        </Property>

        <Property Name="CostCenter" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="CostCenter.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="CostCenter" />
            <Map ToCommand="New-SnowUser" Parameter="CostCenter" />
          </CommandMappings>
        </Property>

        <Property Name="Country" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Country" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Country" />
            <Map ToCommand="New-SnowUser" Parameter="Country" />
          </CommandMappings>
        </Property>

        <Property Name="DateFormat" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="DateFormat" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="DateFormat" />
            <Map ToCommand="New-SnowUser" Parameter="DateFormat" />
          </CommandMappings>
        </Property>

        <Property Name="DefaultPerspective" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="DefaultPerspective.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Department" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Department.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Department" />
            <Map ToCommand="New-SnowUser" Parameter="Department" />
          </CommandMappings>
        </Property>

        <Property Name="EduStatus" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="EduStatus" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="EduStatus" />
            <Map ToCommand="New-SnowUser" Parameter="EduStatus" />
          </CommandMappings>
        </Property>

        <Property Name="Email" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Email" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Email" />
            <Map ToCommand="New-SnowUser" Parameter="Email" />
          </CommandMappings>
        </Property>

        <Property Name="EmployeeNumber" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="EmployeeNumber" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="EmployeeNumber" />
            <Map ToCommand="New-SnowUser" Parameter="EmployeeNumber" />
          </CommandMappings>
        </Property>

        <Property Name="EnableMultifactorAuthentication" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="EnableMultifactorAuthentication" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="EnableMultifactorAuthentication" />
            <Map ToCommand="New-SnowUser" Parameter="EnableMultifactorAuthentication" />
          </CommandMappings>
        </Property>

        <Property Name="FailedAttempts" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="FailedAttempts" />
          </ReturnBindings>
        </Property>

        <Property Name="FirstName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="FirstName" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="FirstName" />
            <Map ToCommand="New-SnowUser" Parameter="FirstName" />
          </CommandMappings>
        </Property>

        <Property Name="Gender" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Gender" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Gender" />
            <Map ToCommand="New-SnowUser" Parameter="Gender" />
          </CommandMappings>
        </Property>

        <Property Name="HashedUserId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="HashedUserId" />
          </ReturnBindings>
        </Property>

        <Property Name="HomePhone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="HomePhone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="HomePhone" />
            <Map ToCommand="New-SnowUser" Parameter="HomePhone" />
          </CommandMappings>
        </Property>

        <Property Name="InternalIntegrationUser" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="InternalIntegrationUser" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="InternalIntegrationUser" />
            <Map ToCommand="New-SnowUser" Parameter="InternalIntegrationUser" />
          </CommandMappings>
        </Property>

        <Property Name="Introduction" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Introduction" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Introduction" />
            <Map ToCommand="New-SnowUser" Parameter="Introduction" />
          </CommandMappings>
        </Property>

        <Property Name="LastLogin" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="LastLogin" />
          </ReturnBindings>
        </Property>

        <Property Name="LastLoginTime" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="LastLoginTime" />
          </ReturnBindings>
        </Property>

        <Property Name="LastLoginDevice" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="LastLoginDevice" />
          </ReturnBindings>
        </Property>

        <Property Name="LastName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="LastName" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="LastName" />
            <Map ToCommand="New-SnowUser" Parameter="LastName" />
          </CommandMappings>
        </Property>

        <Property Name="LastPassword" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="LastPassword" />
          </ReturnBindings>
        </Property>

        <Property Name="LdapServer" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="LdapServer.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Location.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Location" />
            <Map ToCommand="New-SnowUser" Parameter="Location" />
          </CommandMappings>
        </Property>

        <Property Name="LockedOut" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="LockedOut" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="LockedOut" />
          </CommandMappings>
        </Property>

        <Property Name="Manager" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Manager.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Manager" />
            <Map ToCommand="New-SnowUser" Parameter="Manager" />
          </CommandMappings>
        </Property>

        <Property Name="MiddleName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="MiddleName" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="MiddleName" />
            <Map ToCommand="New-SnowUser" Parameter="MiddleName" />
          </CommandMappings>
        </Property>

        <Property Name="MobilePhone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="MobilePhone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="MobilePhone" />
            <Map ToCommand="New-SnowUser" Parameter="MobilePhone" />
          </CommandMappings>
        </Property>

        <Property Name="DisplayName" DataType="String" IsDisplay="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Name" />
          </ReturnBindings>
        </Property>

        <Property Name="Notification" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Notification" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Notification" />
            <Map ToCommand="New-SnowUser" Parameter="Notification" />
          </CommandMappings>
        </Property>

        <Property Name="PasswordNeedsReset" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="PasswordNeedsReset" />
          </ReturnBindings>
        </Property>

        <Property Name="Phone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Phone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Phone" />
            <Map ToCommand="New-SnowUser" Parameter="Phone" />
          </CommandMappings>
        </Property>

        <Property Name="Photo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Photo" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Photo" />
            <Map ToCommand="New-SnowUser" Parameter="Photo" />
          </CommandMappings>
        </Property>

        <Property Name="PreferredLanguage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="PreferredLanguage" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="PreferredLanguage" />
            <Map ToCommand="New-SnowUser" Parameter="PreferredLanguage" />
          </CommandMappings>
        </Property>

        <Property Name="Roles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Roles" />
          </ReturnBindings>
        </Property>

        <Property Name="Schedule" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Schedule.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Source" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Source" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="Set-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Source" />
            <Map ToCommand="New-SnowUser" Parameter="Source" />
          </CommandMappings>
        </Property>

        <Property Name="State" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="State" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="State" />
            <Map ToCommand="New-SnowUser" Parameter="State" />
          </CommandMappings>
        </Property>

        <Property Name="Street" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Street" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Street" />
            <Map ToCommand="New-SnowUser" Parameter="Street" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="SysDomain.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowUser" Parameter="SysDomain" />
          </CommandMappings>
        </Property>

        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="TimeFormat" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="TimeFormat" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="TimeFormat" />
            <Map ToCommand="New-SnowUser" Parameter="TimeFormat" />
          </CommandMappings>
        </Property>

        <Property Name="TimeZone" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="TimeZone" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="TimeZone" />
            <Map ToCommand="New-SnowUser" Parameter="TimeZone" />
          </CommandMappings>
        </Property>

        <Property Name="Title" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Title" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Title" />
            <Map ToCommand="New-SnowUser" Parameter="Title" />
          </CommandMappings>
        </Property>

        <Property Name="UserName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="UserName" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="UserName" />
            <Map ToCommand="New-SnowUser" Parameter="UserName" />
          </CommandMappings>
        </Property>

        <Property Name="UserPassword" DataType="String" AccessConstraint="WriteOnly">
          <ModifiedBy>
            <ModBy Command="Set-SnowUserPassword" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUserPassword" Parameter="Password" Converter="ToSecureString" />
          </CommandMappings>
        </Property>

        <Property Name="Vip" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Vip" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Vip" />
            <Map ToCommand="New-SnowUser" Parameter="Vip" />
          </CommandMappings>
        </Property>

        <Property Name="WebServiceAccessOnly" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="WebServiceAccessOnly" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="WebServiceAccessOnly" />
            <Map ToCommand="New-SnowUser" Parameter="WebServiceAccessOnly" />
          </CommandMappings>
        </Property>

        <Property Name="Zip" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowUser" Path="Zip" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="Set-SnowUser" Method="Update" />
            <ModBy Command="New-SnowUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowUser" Parameter="Zip" />
            <Map ToCommand="New-SnowUser" Parameter="Zip" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowUser">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,name,sys_class_name,company,costcenter,department,location,manager" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sys_user_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowUser" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowUser" Order="1" Condition="ModificationExists" />
            <Item Command="Set-SnowUserPassword" Order="2" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowUser" Order="1" />
            <Item Command="Set-SnowUserPassword" Order="2" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Delete">
          <CommandSequence>
            <Item Command="Remove-SnowUser" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="SysUserGroupMember">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsAutoFill="true" IsUniqueKey="true"
                  IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="Id" />
            <Bind CommandResultOf="New-SnowGroupMembership" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowGroupMembership" Parameter="Id" />
            <Map ToCommand="Remove-SnowGroupMembership" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Group" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="Group.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroupMembership" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowGroupMembership" Parameter="Group" />
          </CommandMappings>
        </Property>

        <Property Name="User" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroupMembership" Path="User.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroupMembership" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowGroupMembership" Parameter="User" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowGroupMembership">
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sys_user_grmember_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowGroupMembership" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowGroupMembership" Order="1" />
          </CommandSequence>
        </Method>
        <Method Name="Delete">
          <CommandSequence>
            <Item Command="Remove-SnowGroupMembership" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="SysUserGroup">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsUniqueKey="true" IsAutoFill="true"
                  IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Id" />
            <Bind CommandResultOf="Set-SnowGroup" Path="Id" />
            <Bind CommandResultOf="New-SnowGroup" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowGroup" Parameter="Id" />
            <Map ToCommand="Set-SnowGroup" Parameter="Id" />
            <Map ToCommand="Remove-SnowGroup" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Active" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Active" />
            <Map ToCommand="New-SnowGroup" Parameter="Active" />
          </CommandMappings>
        </Property>

        <Property Name="CostCenter" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="CostCenter.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="CostCenter" />
            <Map ToCommand="New-SnowGroup" Parameter="CostCenter" />
          </CommandMappings>
        </Property>

        <Property Name="DefaultAssignee" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="DefaultAssignee.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="DefaultAssignee" />
            <Map ToCommand="New-SnowGroup" Parameter="DefaultAssignee" />
          </CommandMappings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Description" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Description" />
            <Map ToCommand="New-SnowGroup" Parameter="Description" />
          </CommandMappings>
        </Property>

        <Property Name="Email" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Email" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Email" />
            <Map ToCommand="New-SnowGroup" Parameter="Email" />
          </CommandMappings>
        </Property>

        <Property Name="ExcludeManager" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="ExcludeManager" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="ExcludeManager" />
            <Map ToCommand="New-SnowGroup" Parameter="ExcludeManager" />
          </CommandMappings>
        </Property>

        <Property Name="IncludeMembers" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="IncludeMembers" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="IncludeMembers" />
            <Map ToCommand="New-SnowGroup" Parameter="IncludeMembers" />
          </CommandMappings>
        </Property>

        <Property Name="Manager" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Manager.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Manager" />
            <Map ToCommand="New-SnowGroup" Parameter="Manager" />
          </CommandMappings>
        </Property>

        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Name" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Name" />
            <Map ToCommand="New-SnowGroup" Parameter="Name" />
          </CommandMappings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Parent.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Parent" />
            <Map ToCommand="New-SnowGroup" Parameter="Parent" />
          </CommandMappings>
        </Property>

        <Property Name="Roles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Roles" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Roles" />
            <Map ToCommand="New-SnowGroup" Parameter="Roles" />
          </CommandMappings>
        </Property>

        <Property Name="Source" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Source" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Source" />
            <Map ToCommand="New-SnowGroup" Parameter="Source" />
          </CommandMappings>
        </Property>

        <Property Name="Type" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowGroup" Path="Type" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowGroup" Method="Insert" />
            <ModBy Command="Set-SnowGroup" Method="Update" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="Set-SnowGroup" Parameter="Type" />
            <Map ToCommand="New-SnowGroup" Parameter="Type" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowGroup">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,name,costcenter,parent" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sys_user_group_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowGroup" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Update">
          <CommandSequence>
            <Item Command="Set-SnowGroup" Order="1" Condition="ModificationExists" />
          </CommandSequence>
        </Method>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowGroup" Order="1" />
          </CommandSequence>
        </Method>
        <Method Name="Delete">
          <CommandSequence>
            <Item Command="Remove-SnowGroup" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>
    </Class>

    <Class Name="UserHasRole">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsAutoFill="true" IsUniqueKey="true"
                  IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="Id" />
            <Bind CommandResultOf="New-SnowRoleHasUser" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowRoleHasUser" Parameter="Id" />
            <Map ToCommand="Remove-SnowRoleHasUser" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="GrantedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="GrantedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="IncludedInRole" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="IncludedInRole.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="IncludedInRoleInstance" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="IncludedInRoleInstance.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Inherited" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="Inherited" />
          </ReturnBindings>
        </Property>

        <Property Name="InhCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="InhCount" />
          </ReturnBindings>
        </Property>

        <Property Name="InhMap" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="InhMap" />
          </ReturnBindings>
        </Property>

        <Property Name="Role" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="Role.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRoleHasUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRoleHasUser" Parameter="Role" />
          </CommandMappings>
        </Property>

        <Property Name="State" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="State" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRoleHasUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRoleHasUser" Parameter="State" />
          </CommandMappings>
        </Property>

        <Property Name="User" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasUser" Path="User.ToString()" />
          </ReturnBindings>
          <ModifiedBy>
            <ModBy Command="New-SnowRoleHasUser" Method="Insert" />
          </ModifiedBy>
          <CommandMappings>
            <Map ToCommand="New-SnowRoleHasUser" Parameter="User" />
          </CommandMappings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowRoleHasUser">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,user,role,includedinrole" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sys_user_has_role_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowRoleHasUser" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration>
        <Method Name="Insert">
          <CommandSequence>
            <Item Command="New-SnowRoleHasUser" Order="1" />
          </CommandSequence>
        </Method>
        <Method Name="Delete">
          <CommandSequence>
            <Item Command="Remove-SnowRoleHasUser" Order="1" />
          </CommandSequence>
        </Method>
      </MethodConfiguration>

    </Class>

    <Class Name="Role">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowRole" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPackage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="SysPackage.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="SysName" />
          </ReturnBindings>
        </Property>

        <Property Name="SysScope" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="SysScope.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPolicy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="SysPolicy" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignableBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="AssignableBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CanDelegate" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="CanDelegate" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="Description" />
          </ReturnBindings>
        </Property>

        <Property Name="ElevatedPrivilege" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="ElevatedPrivilege" />
          </ReturnBindings>
        </Property>

        <Property Name="Grantable" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="Grantable" />
          </ReturnBindings>
        </Property>


        <Property Name="IncludesRoles" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="IncludesRoles" />
          </ReturnBindings>
        </Property>


        <Property Name="Name" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="Name" />
          </ReturnBindings>
        </Property>

        <Property Name="RequiresSubscription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="RequiresSubscription" />
          </ReturnBindings>
        </Property>

        <Property Name="ApplicationAdministrator" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="ApplicationAdministrator" />
          </ReturnBindings>
        </Property>

        <Property Name="Suffix" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRole" Path="Suffix" />
          </ReturnBindings>
        </Property>

      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowRole">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,name,assignableby" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="sys_user_role_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowRole" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration />
    </Class>

    <Class Name="RoleHasRole">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsAutoFill="true" IsUniqueKey="true"
                  IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowRoleHasRole" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="ObjectType" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="Role" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="Role.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Contains" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="Contains.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysUpdateName" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="SysUpdateName" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPackage" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="SysPackage.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysName" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="SysName" />
          </ReturnBindings>
        </Property>

        <Property Name="SysScope" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="SysScope.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="SysPolicy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowRoleHasRole" Path="SysPolicy" />
          </ReturnBindings>
        </Property>
      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowRoleHasRole">
          <SetParameter Param="Select" Source="FixedValue" DataType="String" Value="sys_id,sys_updated_on,sys_name" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String"
                        Value="sys_user_role_contains_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowRoleHasRole" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->
      <MethodConfiguration />

    </Class>

    <Class Name="Task">
      <Properties>
        <Property Name="Id" DataType="String" AccessConstraint="ReadOnly" IsMandatory="true" IsUniqueKey="true"
                  IsAutoFill="true" IsDisplay="false">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Id" />
          </ReturnBindings>
          <CommandMappings>
            <Map ToCommand="Get-SnowTask" Parameter="Id" />
          </CommandMappings>
        </Property>

        <Property Name="WhenUpdated" DataType="DateTime" IsRevision="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="WhenUpdated" />
          </ReturnBindings>
        </Property>

        <Property Name="WhenCreated" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="WhenCreated" />
          </ReturnBindings>
        </Property>

        <Property Name="Number" DataType="String" IsDisplay="true">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Number" />
          </ReturnBindings>
        </Property>

        <Property Name="ObjectType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ObjectType" />
          </ReturnBindings>
        </Property>


        <Property Name="MadeSla" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="MadeSla" />
          </ReturnBindings>
        </Property>

        <Property Name="CreatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="CreatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="WatchList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="WatchList" />
          </ReturnBindings>
        </Property>

        <Property Name="UpdatedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="UpdatedBy" />
          </ReturnBindings>
        </Property>

        <Property Name="SysModCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="SysModCount" />
          </ReturnBindings>
        </Property>

        <Property Name="SysTags" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="SysTags" />
          </ReturnBindings>
        </Property>

        <Property Name="UponReject" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="UponReject" />
          </ReturnBindings>
        </Property>

        <Property Name="ApprovalHistory" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ApprovalHistory" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="OpenedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Parent" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Parent.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="UserInput" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="UserInput" />
          </ReturnBindings>
        </Property>

        <Property Name="SysDomain" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="SysDomain.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="State" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="State" />
          </ReturnBindings>
        </Property>

        <Property Name="Knowledge" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Knowledge" />
          </ReturnBindings>
        </Property>

        <Property Name="Order" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Order" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ClosedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="CmdbCi" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="CmdbCi.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryPlan" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="DeliveryPlan.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Impact" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Impact" />
          </ReturnBindings>
        </Property>

        <Property Name="Active" DataType="Bool">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Active" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkNotesList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="WorkNotesList" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessService" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="BusinessService.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Priority" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Priority" />
          </ReturnBindings>
        </Property>


        <Property Name="SysDomainPath" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="SysDomainPath" />
          </ReturnBindings>
        </Property>

        <Property Name="TimeWorked" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="TimeWorked" />
          </ReturnBindings>
        </Property>

        <Property Name="ExpectedStart" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ExpectedStart" />
          </ReturnBindings>
        </Property>

        <Property Name="OpenedAt" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="OpenedAt" />
          </ReturnBindings>
        </Property>

        <Property Name="BusinessDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="BusinessDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="GroupList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="GroupList" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkEnd" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="WorkEnd" />
          </ReturnBindings>
        </Property>

        <Property Name="ApprovalSet" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ApprovalSet" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="WorkNotes" />
          </ReturnBindings>
        </Property>

        <Property Name="ShortDescription" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ShortDescription" />
          </ReturnBindings>
        </Property>

        <Property Name="CorrelationDisplay" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="CorrelationDisplay" />
          </ReturnBindings>
        </Property>

        <Property Name="DeliveryTask" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="DeliveryTask.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="WorkStart" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="WorkStart" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignmentGroup" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="AssignmentGroup.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="AdditionalAssigneeList" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="AdditionalAssigneeList" />
          </ReturnBindings>
        </Property>

        <Property Name="Description" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Description" />
          </ReturnBindings>
        </Property>

        <Property Name="CalendarDuration" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="CalendarDuration.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="CloseNotes" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="CloseNotes" />
          </ReturnBindings>
        </Property>

        <Property Name="ServiceOffering" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ServiceOffering.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ClosedBy" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ClosedBy.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="FollowUp" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="FollowUp" />
          </ReturnBindings>
        </Property>

        <Property Name="ContactType" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ContactType" />
          </ReturnBindings>
        </Property>

        <Property Name="Urgency" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Urgency" />
          </ReturnBindings>
        </Property>

        <Property Name="Company" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Company.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="ReassignmentCount" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ReassignmentCount" />
          </ReturnBindings>
        </Property>

        <Property Name="ActivityDue" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="ActivityDue" />
          </ReturnBindings>
        </Property>

        <Property Name="AssignedTo" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="AssignedTo.ToString()" />
          </ReturnBindings>
        </Property>

        <Property Name="Comments" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Comments" />
          </ReturnBindings>
        </Property>

        <Property Name="Approval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Approval" />
          </ReturnBindings>
        </Property>

        <Property Name="SlaDue" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="SlaDue" />
          </ReturnBindings>
        </Property>

        <Property Name="CommentsAndWorkNotes" DataType="String" AccessConstraint="ReadOnly">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="CommentsAndWorkNotes" />
          </ReturnBindings>
        </Property>

        <Property Name="DueDate" DataType="DateTime">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="DueDate" />
          </ReturnBindings>
        </Property>

        <Property Name="Escalation" DataType="Int">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Escalation" />
          </ReturnBindings>
        </Property>

        <Property Name="UponApproval" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="UponApproval" />
          </ReturnBindings>
        </Property>

        <Property Name="CorrelationId" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="CorrelationId" />
          </ReturnBindings>
        </Property>

        <Property Name="Location" DataType="String">
          <ReturnBindings>
            <Bind CommandResultOf="Get-SnowTask" Path="Location.ToString()" />
          </ReturnBindings>
        </Property>

      </Properties>

      <!-- Configuration items for readable types -->
      <ReadConfiguration>
        <ListingCommand Command="Get-SnowTask">
          <SetParameter Param="Select" Source="FixedValue" DataType="String"
                        Value="sys_id,sys_updated_on,number,sys_class_name" />
          <SetParameter Param="Filter" Source="ConnectionParameter" DataType="String" Value="task_filter" />
        </ListingCommand>
        <CommandSequence>
          <Item Command="Get-SnowTask" Order="1" />
        </CommandSequence>
      </ReadConfiguration>

      <!-- Methods supported by this class -->

      <MethodConfiguration>

      </MethodConfiguration>

    </Class>
  </Schema>
</PowershellConnectorDefinition>